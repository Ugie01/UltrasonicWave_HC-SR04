
hc-sr04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077cc  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08007910  08007910  00008910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d70  08007d70  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d70  08007d70  00008d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d78  08007d78  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d78  08007d78  00008d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d80  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001d4  08007f54  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007f54  000093d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5e4  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  000147e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00016868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e5  00000000  00000000  00017420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175fe  00000000  00000000  00017d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e92f  00000000  00000000  0002f303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8b8  00000000  00000000  0003dc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb4ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000445c  00000000  00000000  000cb530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cf98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	080078f4 	.word	0x080078f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	080078f4 	.word	0x080078f4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b99e 	b.w	8000eec <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83c 	bl	8000c34 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4604      	mov	r4, r0
 8000bd0:	460d      	mov	r5, r1
 8000bd2:	f7ff ff0b 	bl	80009ec <__aeabi_dcmplt>
 8000bd6:	b928      	cbnz	r0, 8000be4 <__aeabi_d2lz+0x1c>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be0:	f000 b80a 	b.w	8000bf8 <__aeabi_d2ulz>
 8000be4:	4620      	mov	r0, r4
 8000be6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bea:	f000 f805 	bl	8000bf8 <__aeabi_d2ulz>
 8000bee:	4240      	negs	r0, r0
 8000bf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2ulz>:
 8000bf8:	b5d0      	push	{r4, r6, r7, lr}
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <__aeabi_d2ulz+0x34>)
 8000bfe:	4606      	mov	r6, r0
 8000c00:	460f      	mov	r7, r1
 8000c02:	f7ff fc81 	bl	8000508 <__aeabi_dmul>
 8000c06:	f7ff ff57 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fc02 	bl	8000414 <__aeabi_ui2d>
 8000c10:	2200      	movs	r2, #0
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <__aeabi_d2ulz+0x38>)
 8000c14:	f7ff fc78 	bl	8000508 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	4639      	mov	r1, r7
 8000c20:	f7ff faba 	bl	8000198 <__aeabi_dsub>
 8000c24:	f7ff ff48 	bl	8000ab8 <__aeabi_d2uiz>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c2c:	3df00000 	.word	0x3df00000
 8000c30:	41f00000 	.word	0x41f00000

08000c34 <__udivmoddi4>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	9d08      	ldr	r5, [sp, #32]
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d14e      	bne.n	8000cde <__udivmoddi4+0xaa>
 8000c40:	4694      	mov	ip, r2
 8000c42:	458c      	cmp	ip, r1
 8000c44:	4686      	mov	lr, r0
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	d962      	bls.n	8000d12 <__udivmoddi4+0xde>
 8000c4c:	b14a      	cbz	r2, 8000c62 <__udivmoddi4+0x2e>
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	4091      	lsls	r1, r2
 8000c54:	fa20 f303 	lsr.w	r3, r0, r3
 8000c58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7a:	fb04 f106 	mul.w	r1, r4, r6
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x64>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8a:	f080 8110 	bcs.w	8000eae <__udivmoddi4+0x27a>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 810d 	bls.w	8000eae <__udivmoddi4+0x27a>
 8000c94:	3c02      	subs	r4, #2
 8000c96:	4463      	add	r3, ip
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x94>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cba:	f080 80fa 	bcs.w	8000eb2 <__udivmoddi4+0x27e>
 8000cbe:	429e      	cmp	r6, r3
 8000cc0:	f240 80f7 	bls.w	8000eb2 <__udivmoddi4+0x27e>
 8000cc4:	4463      	add	r3, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	2100      	movs	r1, #0
 8000cca:	1b9b      	subs	r3, r3, r6
 8000ccc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa6>
 8000cd2:	40d3      	lsrs	r3, r2
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xba>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb4>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa6>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x150>
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xcc>
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f0c0 80ee 	bcc.w	8000edc <__udivmoddi4+0x2a8>
 8000d00:	1a86      	subs	r6, r0, r2
 8000d02:	eb64 0303 	sbc.w	r3, r4, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d0e6      	beq.n	8000cda <__udivmoddi4+0xa6>
 8000d0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d10:	e7e3      	b.n	8000cda <__udivmoddi4+0xa6>
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	f040 808f 	bne.w	8000e36 <__udivmoddi4+0x202>
 8000d18:	eba1 040c 	sub.w	r4, r1, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x11c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x11a>
 8000d48:	4298      	cmp	r0, r3
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b0>
 8000d4e:	4626      	mov	r6, r4
 8000d50:	1a1c      	subs	r4, r3, r0
 8000d52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d56:	fb08 4410 	mls	r4, r8, r0, r4
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	429f      	cmp	r7, r3
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x148>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x146>
 8000d74:	429f      	cmp	r7, r3
 8000d76:	f200 80ae 	bhi.w	8000ed6 <__udivmoddi4+0x2a2>
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	1bdb      	subs	r3, r3, r7
 8000d7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x9c>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa24 f607 	lsr.w	r6, r4, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	fb09 6618 	mls	r6, r9, r8, r6
 8000da6:	fa20 f307 	lsr.w	r3, r0, r7
 8000daa:	408c      	lsls	r4, r1
 8000dac:	fa00 fa01 	lsl.w	sl, r0, r1
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	431c      	orrs	r4, r3
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x1a6>
 8000dc4:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc8:	f108 36ff 	add.w	r6, r8, #4294967295
 8000dcc:	f080 8081 	bcs.w	8000ed2 <__udivmoddi4+0x29e>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d97e      	bls.n	8000ed2 <__udivmoddi4+0x29e>
 8000dd4:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd8:	4463      	add	r3, ip
 8000dda:	1a1e      	subs	r6, r3, r0
 8000ddc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000de0:	fb09 6613 	mls	r6, r9, r3, r6
 8000de4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x1d0>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dfa:	d266      	bcs.n	8000eca <__udivmoddi4+0x296>
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d964      	bls.n	8000eca <__udivmoddi4+0x296>
 8000e00:	3b02      	subs	r3, #2
 8000e02:	4464      	add	r4, ip
 8000e04:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e08:	fba0 8302 	umull	r8, r3, r0, r2
 8000e0c:	eba4 040e 	sub.w	r4, r4, lr
 8000e10:	429c      	cmp	r4, r3
 8000e12:	46c6      	mov	lr, r8
 8000e14:	461e      	mov	r6, r3
 8000e16:	d350      	bcc.n	8000eba <__udivmoddi4+0x286>
 8000e18:	d04d      	beq.n	8000eb6 <__udivmoddi4+0x282>
 8000e1a:	b155      	cbz	r5, 8000e32 <__udivmoddi4+0x1fe>
 8000e1c:	ebba 030e 	subs.w	r3, sl, lr
 8000e20:	eb64 0406 	sbc.w	r4, r4, r6
 8000e24:	fa04 f707 	lsl.w	r7, r4, r7
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	431f      	orrs	r7, r3
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	e9c5 7400 	strd	r7, r4, [r5]
 8000e32:	2100      	movs	r1, #0
 8000e34:	e751      	b.n	8000cda <__udivmoddi4+0xa6>
 8000e36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3a:	f1c2 0320 	rsb	r3, r2, #32
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa20 f303 	lsr.w	r3, r0, r3
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e50:	fb08 1110 	mls	r1, r8, r0, r1
 8000e54:	4094      	lsls	r4, r2
 8000e56:	431c      	orrs	r4, r3
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	0c23      	lsrs	r3, r4, #16
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb00 f107 	mul.w	r1, r0, r7
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x248>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e72:	d22c      	bcs.n	8000ece <__udivmoddi4+0x29a>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	d92a      	bls.n	8000ece <__udivmoddi4+0x29a>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1a5b      	subs	r3, r3, r1
 8000e7e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e82:	fb08 3311 	mls	r3, r8, r1, r3
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e8c:	fb01 f307 	mul.w	r3, r1, r7
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x272>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e9c:	d213      	bcs.n	8000ec6 <__udivmoddi4+0x292>
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	d911      	bls.n	8000ec6 <__udivmoddi4+0x292>
 8000ea2:	3902      	subs	r1, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	1ae4      	subs	r4, r4, r3
 8000ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xf2>
 8000eae:	4604      	mov	r4, r0
 8000eb0:	e6f2      	b.n	8000c98 <__udivmoddi4+0x64>
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	e708      	b.n	8000cc8 <__udivmoddi4+0x94>
 8000eb6:	45c2      	cmp	sl, r8
 8000eb8:	d2af      	bcs.n	8000e1a <__udivmoddi4+0x1e6>
 8000eba:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ebe:	eb63 060c 	sbc.w	r6, r3, ip
 8000ec2:	3801      	subs	r0, #1
 8000ec4:	e7a9      	b.n	8000e1a <__udivmoddi4+0x1e6>
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	e7ed      	b.n	8000ea6 <__udivmoddi4+0x272>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	e79a      	b.n	8000e04 <__udivmoddi4+0x1d0>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e7d4      	b.n	8000e7c <__udivmoddi4+0x248>
 8000ed2:	46b0      	mov	r8, r6
 8000ed4:	e781      	b.n	8000dda <__udivmoddi4+0x1a6>
 8000ed6:	4463      	add	r3, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e74f      	b.n	8000d7c <__udivmoddi4+0x148>
 8000edc:	4606      	mov	r6, r0
 8000ede:	4623      	mov	r3, r4
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e711      	b.n	8000d08 <__udivmoddi4+0xd4>
 8000ee4:	3e02      	subs	r6, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x11c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_CRC_Init+0x20>)
 8000ef6:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <MX_CRC_Init+0x24>)
 8000ef8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_CRC_Init+0x20>)
 8000efc:	f000 fcf1 	bl	80018e2 <HAL_CRC_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f06:	f000 f955 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001f0 	.word	0x200001f0
 8000f14:	40023000 	.word	0x40023000

08000f18 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <HAL_CRC_MspInit+0x34>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10b      	bne.n	8000f42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_CRC_MspInit+0x38>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_CRC_MspInit+0x38>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_CRC_MspInit+0x38>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40023000 	.word	0x40023000
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_GPIO_Init+0x70>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <MX_GPIO_Init+0x70>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_GPIO_Init+0x70>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4810      	ldr	r0, [pc, #64]	@ (8000fc8 <MX_GPIO_Init+0x74>)
 8000f86:	f000 fe70 	bl	8001c6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <MX_GPIO_Init+0x74>)
 8000fa0:	f000 fcbc 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa4:	2340      	movs	r3, #64	@ 0x40
 8000fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <MX_GPIO_Init+0x74>)
 8000fb6:	f000 fcb1 	bl	800191c <HAL_GPIO_Init>

}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <delayMicroseconds>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void delayMicroseconds (uint16_t us)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	htim2.Instance->CNT=0;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <delayMicroseconds+0x2c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (htim2.Instance->CNT < us) ;
 8000fde:	bf00      	nop
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <delayMicroseconds+0x2c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3f9      	bcc.n	8000fe0 <delayMicroseconds+0x14>
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	200001fc 	.word	0x200001fc

08000ffc <pulseIn>:

int pulseIn(GPIO_TypeDef * Port, uint16_t Pin){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	  while(!HAL_GPIO_ReadPin(Port, Pin));
 8001008:	bf00      	nop
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fe14 	bl	8001c3c <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f7      	beq.n	800100a <pulseIn+0xe>
	  int t1=htim2.Instance->CNT;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <pulseIn+0x50>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001020:	60fb      	str	r3, [r7, #12]
	  while(HAL_GPIO_ReadPin(Port, Pin));
 8001022:	bf00      	nop
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fe07 	bl	8001c3c <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f7      	bne.n	8001024 <pulseIn+0x28>
	  int t2=htim2.Instance->CNT;
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <pulseIn+0x50>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103a:	60bb      	str	r3, [r7, #8]

	  return (t2-t1);
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001fc 	.word	0x200001fc

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f000 fad0 	bl	80015fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f85d 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f7ff ff79 	bl	8000f54 <MX_GPIO_Init>
  MX_CRC_Init();
 8001062:	f7ff ff45 	bl	8000ef0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001066:	f000 fa35 	bl	80014d4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800106a:	f000 f9cb 	bl	8001404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800106e:	4826      	ldr	r0, [pc, #152]	@ (8001108 <main+0xb8>)
 8001070:	f001 fc4a 	bl	8002908 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int duration;

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2120      	movs	r1, #32
 8001078:	4824      	ldr	r0, [pc, #144]	@ (800110c <main+0xbc>)
 800107a:	f000 fdf6 	bl	8001c6a <HAL_GPIO_WritePin>
	  delayMicroseconds(2);
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff ffa4 	bl	8000fcc <delayMicroseconds>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	2120      	movs	r1, #32
 8001088:	4820      	ldr	r0, [pc, #128]	@ (800110c <main+0xbc>)
 800108a:	f000 fdee 	bl	8001c6a <HAL_GPIO_WritePin>
	  delayMicroseconds(10);
 800108e:	200a      	movs	r0, #10
 8001090:	f7ff ff9c 	bl	8000fcc <delayMicroseconds>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2120      	movs	r1, #32
 8001098:	481c      	ldr	r0, [pc, #112]	@ (800110c <main+0xbc>)
 800109a:	f000 fde6 	bl	8001c6a <HAL_GPIO_WritePin>

	  duration = pulseIn(GPIOA, GPIO_PIN_6);
 800109e:	2140      	movs	r1, #64	@ 0x40
 80010a0:	481a      	ldr	r0, [pc, #104]	@ (800110c <main+0xbc>)
 80010a2:	f7ff ffab 	bl	8000ffc <pulseIn>
 80010a6:	6278      	str	r0, [r7, #36]	@ 0x24
	  float distance = duration * 0.017;
 80010a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010aa:	f7ff f9c3 	bl	8000434 <__aeabi_i2d>
 80010ae:	a314      	add	r3, pc, #80	@ (adr r3, 8001100 <main+0xb0>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fa28 	bl	8000508 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd1a 	bl	8000af8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	623b      	str	r3, [r7, #32]

	  char buffer[25];
	  sprintf(buffer, "%.2f cm\n", distance);
 80010c8:	6a38      	ldr	r0, [r7, #32]
 80010ca:	f7ff f9c5 	bl	8000458 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	1d38      	adds	r0, r7, #4
 80010d4:	490e      	ldr	r1, [pc, #56]	@ (8001110 <main+0xc0>)
 80010d6:	f002 ffe1 	bl	800409c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f84f 	bl	8000180 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	1d39      	adds	r1, r7, #4
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <main+0xc4>)
 80010ee:	f001 fed1 	bl	8002e94 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80010f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010f6:	f000 faef 	bl	80016d8 <HAL_Delay>
  {
 80010fa:	bf00      	nop
 80010fc:	e7ba      	b.n	8001074 <main+0x24>
 80010fe:	bf00      	nop
 8001100:	b020c49c 	.word	0xb020c49c
 8001104:	3f916872 	.word	0x3f916872
 8001108:	200001fc 	.word	0x200001fc
 800110c:	40020000 	.word	0x40020000
 8001110:	08007910 	.word	0x08007910
 8001114:	2000023c 	.word	0x2000023c

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b092      	sub	sp, #72	@ 0x48
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2234      	movs	r2, #52	@ 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f003 f81b 	bl	8004162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <SystemClock_Config+0x98>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001142:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <SystemClock_Config+0x98>)
 8001144:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001148:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115a:	2300      	movs	r3, #0
 800115c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800115e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001162:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001164:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001168:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fd94 	bl	8001c9c <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800117a:	f000 f81b 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2303      	movs	r3, #3
 8001184:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2101      	movs	r1, #1
 8001196:	4618      	mov	r0, r3
 8001198:	f001 f8b0 	bl	80022fc <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011a2:	f000 f807 	bl	80011b4 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3748      	adds	r7, #72	@ 0x48
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_MspInit+0x58>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <HAL_MspInit+0x58>)
 80011cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011d0:	6253      	str	r3, [r2, #36]	@ 0x24
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_MspInit+0x58>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_MspInit+0x58>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <HAL_MspInit+0x58>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_MspInit+0x58>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_MspInit+0x58>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <HAL_MspInit+0x58>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6253      	str	r3, [r2, #36]	@ 0x24
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_MspInit+0x58>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <NMI_Handler+0x4>

08001224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <UsageFault_Handler+0x4>

08001244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 fa18 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <_kill>:

int _kill(int pid, int sig)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128c:	f002 ffbc 	bl	8004208 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	2216      	movs	r2, #22
 8001294:	601a      	str	r2, [r3, #0]
  return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_exit>:

void _exit (int status)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012aa:	f04f 31ff 	mov.w	r1, #4294967295
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffe7 	bl	8001282 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <_exit+0x12>

080012b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
  }

  return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf1      	blt.n	8001304 <_write+0x12>
  }
  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001350:	605a      	str	r2, [r3, #4]
  return 0;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <_isatty>:

int _isatty(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
	...

0800138c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <_sbrk+0x5c>)
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_sbrk+0x60>)
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <_sbrk+0x64>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <_sbrk+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d207      	bcs.n	80013cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013bc:	f002 ff24 	bl	8004208 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	220c      	movs	r2, #12
 80013c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e009      	b.n	80013e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	4a05      	ldr	r2, [pc, #20]	@ (80013f0 <_sbrk+0x64>)
 80013dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20014000 	.word	0x20014000
 80013ec:	00000400 	.word	0x00000400
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	200003d8 	.word	0x200003d8

080013f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001420:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_TIM2_Init+0x94>)
 800142a:	221f      	movs	r2, #31
 800142c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_TIM2_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001448:	4813      	ldr	r0, [pc, #76]	@ (8001498 <MX_TIM2_Init+0x94>)
 800144a:	f001 fa1d 	bl	8002888 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001454:	f7ff feae 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001466:	f001 fa99 	bl	800299c <HAL_TIM_ConfigClockSource>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001470:	f7ff fea0 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001482:	f001 fc59 	bl	8002d38 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800148c:	f7ff fe92 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200001fc 	.word	0x200001fc

0800149c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ac:	d10b      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_TIM_Base_MspInit+0x34>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_TIM_Base_MspInit+0x34>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6253      	str	r3, [r2, #36]	@ 0x24
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_TIM_Base_MspInit+0x34>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_USART1_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_USART1_UART_Init+0x4c>)
 800150c:	f001 fc72 	bl	8002df4 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f7ff fe4d 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000023c 	.word	0x2000023c
 8001524:	40013800 	.word	0x40013800

08001528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_UART_MspInit+0x7c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d128      	bne.n	800159c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_UART_MspInit+0x80>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a16      	ldr	r2, [pc, #88]	@ (80015a8 <HAL_UART_MspInit+0x80>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001554:	6213      	str	r3, [r2, #32]
 8001556:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_UART_MspInit+0x80>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_UART_MspInit+0x80>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_UART_MspInit+0x80>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_UART_MspInit+0x80>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800157a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158c:	2307      	movs	r3, #7
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <HAL_UART_MspInit+0x84>)
 8001598:	f000 f9c0 	bl	800191c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff ff22 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b6:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b8:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015cc:	4c09      	ldr	r4, [pc, #36]	@ (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f002 fe1b 	bl	8004214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fd37 	bl	8001050 <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015ec:	08007d80 	.word	0x08007d80
  ldr r2, =_sbss
 80015f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015f4:	200003d4 	.word	0x200003d4

080015f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_IRQHandler>

080015fa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f939 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f80e 	bl	800162c <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	e001      	b.n	8001620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800161c:	f7ff fdd0 	bl	80011c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001620:	79fb      	ldrb	r3, [r7, #7]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_InitTick+0x68>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d022      	beq.n	8001686 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_InitTick+0x6c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_InitTick+0x68>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800164c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f938 	bl	80018ca <HAL_SYSTICK_Config>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10f      	bne.n	8001680 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	d809      	bhi.n	800167a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001666:	2200      	movs	r2, #0
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	f04f 30ff 	mov.w	r0, #4294967295
 800166e:	f000 f910 	bl	8001892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_InitTick+0x70>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e007      	b.n	800168a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e004      	b.n	800168a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e001      	b.n	800168a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000008 	.word	0x20000008
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x1c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_IncTick+0x20>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a03      	ldr	r2, [pc, #12]	@ (80016bc <HAL_IncTick+0x1c>)
 80016b0:	6013      	str	r3, [r2, #0]
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000284 	.word	0x20000284
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b02      	ldr	r3, [pc, #8]	@ (80016d4 <HAL_GetTick+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000284 	.word	0x20000284

080016d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff fff0 	bl	80016c4 <HAL_GetTick>
 80016e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d004      	beq.n	80016fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_Delay+0x40>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016fc:	bf00      	nop
 80016fe:	f7ff ffe1 	bl	80016c4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d8f7      	bhi.n	80016fe <HAL_Delay+0x26>
  {
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000008 	.word	0x20000008

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff90 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff49 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff5e 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffb0 	bl	8001838 <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e00e      	b.n	8001912 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	795b      	ldrb	r3, [r3, #5]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d105      	bne.n	800190a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fb07 	bl	8000f18 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001932:	e160      	b.n	8001bf6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8152 	beq.w	8001bf0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d005      	beq.n	8001964 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001960:	2b02      	cmp	r3, #2
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d017      	beq.n	8001a02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d123      	bne.n	8001a56 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0203 	and.w	r2, r3, #3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80ac 	beq.w	8001bf0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a98:	4b5e      	ldr	r3, [pc, #376]	@ (8001c14 <HAL_GPIO_Init+0x2f8>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c14 <HAL_GPIO_Init+0x2f8>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <HAL_GPIO_Init+0x2f8>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ab0:	4a59      	ldr	r2, [pc, #356]	@ (8001c18 <HAL_GPIO_Init+0x2fc>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a51      	ldr	r2, [pc, #324]	@ (8001c1c <HAL_GPIO_Init+0x300>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d025      	beq.n	8001b28 <HAL_GPIO_Init+0x20c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a50      	ldr	r2, [pc, #320]	@ (8001c20 <HAL_GPIO_Init+0x304>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01f      	beq.n	8001b24 <HAL_GPIO_Init+0x208>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a4f      	ldr	r2, [pc, #316]	@ (8001c24 <HAL_GPIO_Init+0x308>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d019      	beq.n	8001b20 <HAL_GPIO_Init+0x204>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a4e      	ldr	r2, [pc, #312]	@ (8001c28 <HAL_GPIO_Init+0x30c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <HAL_GPIO_Init+0x200>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_GPIO_Init+0x310>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00d      	beq.n	8001b18 <HAL_GPIO_Init+0x1fc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <HAL_GPIO_Init+0x314>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <HAL_GPIO_Init+0x1f8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <HAL_GPIO_Init+0x318>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_GPIO_Init+0x1f4>
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	e00c      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b10:	2307      	movs	r3, #7
 8001b12:	e00a      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b14:	2305      	movs	r3, #5
 8001b16:	e008      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x20e>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b3a:	4937      	ldr	r1, [pc, #220]	@ (8001c18 <HAL_GPIO_Init+0x2fc>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b48:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b6c:	4a32      	ldr	r2, [pc, #200]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b72:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b96:	4a28      	ldr	r2, [pc, #160]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9c:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bea:	4a13      	ldr	r2, [pc, #76]	@ (8001c38 <HAL_GPIO_Init+0x31c>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f47f ae97 	bne.w	8001934 <HAL_GPIO_Init+0x18>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e001      	b.n	8001c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	807b      	strh	r3, [r7, #2]
 8001c76:	4613      	mov	r3, r2
 8001c78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7a:	787b      	ldrb	r3, [r7, #1]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c80:	887a      	ldrh	r2, [r7, #2]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c86:	e003      	b.n	8001c90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	041a      	lsls	r2, r3, #16
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e31d      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cae:	4b94      	ldr	r3, [pc, #592]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb8:	4b91      	ldr	r3, [pc, #580]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d07b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d006      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d10f      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b87      	ldr	r3, [pc, #540]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x128>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d166      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e2f7      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b7f      	ldr	r3, [pc, #508]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7e      	ldr	r2, [pc, #504]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e02d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x96>
 8001d18:	4b79      	ldr	r3, [pc, #484]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a78      	ldr	r2, [pc, #480]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b76      	ldr	r3, [pc, #472]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a75      	ldr	r2, [pc, #468]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0xd0>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xb8>
 8001d3a:	4b71      	ldr	r3, [pc, #452]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a70      	ldr	r2, [pc, #448]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6e      	ldr	r3, [pc, #440]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd0>
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a69      	ldr	r2, [pc, #420]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b67      	ldr	r3, [pc, #412]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a66      	ldr	r2, [pc, #408]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fca6 	bl	80016c4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fca2 	bl	80016c4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	@ 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e2ad      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fc92 	bl	80016c4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fc8e 	bl	80016c4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e299      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db6:	4b52      	ldr	r3, [pc, #328]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d05a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d119      	bne.n	8001e12 <HAL_RCC_OscConfig+0x176>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d116      	bne.n	8001e12 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de4:	4b46      	ldr	r3, [pc, #280]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x160>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e276      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	493d      	ldr	r1, [pc, #244]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e10:	e03a      	b.n	8001e88 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f04 <HAL_RCC_OscConfig+0x268>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc50 	bl	80016c4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc4c 	bl	80016c4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e257      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3a:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	492a      	ldr	r1, [pc, #168]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
 8001e5a:	e015      	b.n	8001e88 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <HAL_RCC_OscConfig+0x268>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fc2f 	bl	80016c4 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fc2b 	bl	80016c4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e236      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e7c:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80b8 	beq.w	8002006 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d170      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x218>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e21a      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d921      	bls.n	8001f08 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fc7d 	bl	80027c8 <RCC_SetFlashLatencyFromMSIRange>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e208      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4906      	ldr	r1, [pc, #24]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	4901      	ldr	r1, [pc, #4]	@ (8001f00 <HAL_RCC_OscConfig+0x264>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
 8001efe:	e020      	b.n	8001f42 <HAL_RCC_OscConfig+0x2a6>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f08:	4b99      	ldr	r3, [pc, #612]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4996      	ldr	r1, [pc, #600]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f1a:	4b95      	ldr	r3, [pc, #596]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	061b      	lsls	r3, r3, #24
 8001f28:	4991      	ldr	r1, [pc, #580]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fc48 	bl	80027c8 <RCC_SetFlashLatencyFromMSIRange>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1d3      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	0b5b      	lsrs	r3, r3, #13
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f52:	4a87      	ldr	r2, [pc, #540]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001f54:	6892      	ldr	r2, [r2, #8]
 8001f56:	0912      	lsrs	r2, r2, #4
 8001f58:	f002 020f 	and.w	r2, r2, #15
 8001f5c:	4985      	ldr	r1, [pc, #532]	@ (8002174 <HAL_RCC_OscConfig+0x4d8>)
 8001f5e:	5c8a      	ldrb	r2, [r1, r2]
 8001f60:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f62:	4a85      	ldr	r2, [pc, #532]	@ (8002178 <HAL_RCC_OscConfig+0x4dc>)
 8001f64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f66:	4b85      	ldr	r3, [pc, #532]	@ (800217c <HAL_RCC_OscConfig+0x4e0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fb5e 	bl	800162c <HAL_InitTick>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d045      	beq.n	8002006 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	e1b5      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d029      	beq.n	8001fda <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f86:	4b7e      	ldr	r3, [pc, #504]	@ (8002180 <HAL_RCC_OscConfig+0x4e4>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fb9a 	bl	80016c4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f94:	f7ff fb96 	bl	80016c4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1a1      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fa6:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	496c      	ldr	r1, [pc, #432]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	4967      	ldr	r1, [pc, #412]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fda:	4b69      	ldr	r3, [pc, #420]	@ (8002180 <HAL_RCC_OscConfig+0x4e4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fb70 	bl	80016c4 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fb6c 	bl	80016c4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e177      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d030      	beq.n	8002074 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b5a      	ldr	r3, [pc, #360]	@ (8002184 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fb50 	bl	80016c4 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fb4c 	bl	80016c4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e157      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800203a:	4b4d      	ldr	r3, [pc, #308]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800203c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x38c>
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <HAL_RCC_OscConfig+0x4e8>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204e:	f7ff fb39 	bl	80016c4 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff fb35 	bl	80016c4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e140      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002068:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800206a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80b5 	beq.w	80021ec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10d      	bne.n	80020ae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	4a36      	ldr	r2, [pc, #216]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209c:	6253      	str	r3, [r2, #36]	@ 0x24
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	4b33      	ldr	r3, [pc, #204]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a32      	ldr	r2, [pc, #200]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fafd 	bl	80016c4 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff faf9 	bl	80016c4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b64      	cmp	r3, #100	@ 0x64
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e104      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x466>
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8002100:	e02d      	b.n	800215e <HAL_RCC_OscConfig+0x4c2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x488>
 800210a:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800210c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210e:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002114:	6353      	str	r3, [r2, #52]	@ 0x34
 8002116:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211a:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002120:	6353      	str	r3, [r2, #52]	@ 0x34
 8002122:	e01c      	b.n	800215e <HAL_RCC_OscConfig+0x4c2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_OscConfig+0x4aa>
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800212e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002130:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002136:	6353      	str	r3, [r2, #52]	@ 0x34
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213c:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002142:	6353      	str	r3, [r2, #52]	@ 0x34
 8002144:	e00b      	b.n	800215e <HAL_RCC_OscConfig+0x4c2>
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214a:	4a09      	ldr	r2, [pc, #36]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 800214c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002150:	6353      	str	r3, [r2, #52]	@ 0x34
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002156:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_RCC_OscConfig+0x4d4>)
 8002158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800215c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d024      	beq.n	80021b0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7ff faad 	bl	80016c4 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216c:	e019      	b.n	80021a2 <HAL_RCC_OscConfig+0x506>
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	08007928 	.word	0x08007928
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004
 8002180:	42470020 	.word	0x42470020
 8002184:	42470680 	.word	0x42470680
 8002188:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7ff fa9a 	bl	80016c4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0a3      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a2:	4b54      	ldr	r3, [pc, #336]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCC_OscConfig+0x4f0>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7ff fa88 	bl	80016c4 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff fa84 	bl	80016c4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e08d      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ce:	4b49      	ldr	r3, [pc, #292]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b44      	ldr	r3, [pc, #272]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	4a43      	ldr	r2, [pc, #268]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d079      	beq.n	80022e8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d056      	beq.n	80022a8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d13b      	bne.n	800227a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b3d      	ldr	r3, [pc, #244]	@ (80022f8 <HAL_RCC_OscConfig+0x65c>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa5c 	bl	80016c4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fa58 	bl	80016c4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e063      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002222:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222e:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	4319      	orrs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	430b      	orrs	r3, r1
 8002246:	492b      	ldr	r1, [pc, #172]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b2a      	ldr	r3, [pc, #168]	@ (80022f8 <HAL_RCC_OscConfig+0x65c>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fa37 	bl	80016c4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fa33 	bl	80016c4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e03e      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x5be>
 8002278:	e036      	b.n	80022e8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <HAL_RCC_OscConfig+0x65c>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fa20 	bl	80016c4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff fa1c 	bl	80016c4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e027      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x5ec>
 80022a6:	e01f      	b.n	80022e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01a      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_RCC_OscConfig+0x658>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	42470060 	.word	0x42470060

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e11a      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b8f      	ldr	r3, [pc, #572]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d919      	bls.n	8002352 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_ClockConfig+0x34>
 8002324:	4b8a      	ldr	r3, [pc, #552]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a89      	ldr	r2, [pc, #548]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b87      	ldr	r3, [pc, #540]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 0201 	bic.w	r2, r3, #1
 8002338:	4985      	ldr	r1, [pc, #532]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002340:	4b83      	ldr	r3, [pc, #524]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0f9      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235e:	4b7d      	ldr	r3, [pc, #500]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	497a      	ldr	r1, [pc, #488]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 808e 	beq.w	800249a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002386:	4b73      	ldr	r3, [pc, #460]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0d7      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800239e:	4b6d      	ldr	r3, [pc, #436]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0cb      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b6:	4b67      	ldr	r3, [pc, #412]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0bf      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023c6:	4b63      	ldr	r3, [pc, #396]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0b7      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	495c      	ldr	r1, [pc, #368]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7ff f96c 	bl	80016c4 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d112      	bne.n	800241c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff f964 	bl	80016c4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e09b      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800240e:	4b51      	ldr	r3, [pc, #324]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xfc>
 800241a:	e03e      	b.n	800249a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d112      	bne.n	800244a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	e00a      	b.n	800243c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7ff f94d 	bl	80016c4 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e084      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243c:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_ClockConfig+0x12a>
 8002448:	e027      	b.n	800249a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d11d      	bne.n	800248e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7ff f936 	bl	80016c4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e06d      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800246a:	4b3a      	ldr	r3, [pc, #232]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d1ee      	bne.n	8002454 <HAL_RCC_ClockConfig+0x158>
 8002476:	e010      	b.n	800249a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff f924 	bl	80016c4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e05b      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800248e:	4b31      	ldr	r3, [pc, #196]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ee      	bne.n	8002478 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249a:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d219      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCC_ClockConfig+0x1be>
 80024ae:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0201 	bic.w	r2, r3, #1
 80024c2:	4923      	ldr	r1, [pc, #140]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_RCC_ClockConfig+0x254>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e034      	b.n	8002546 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4917      	ldr	r1, [pc, #92]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	490f      	ldr	r1, [pc, #60]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800251a:	f000 f823 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_RCC_ClockConfig+0x258>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	490b      	ldr	r1, [pc, #44]	@ (8002558 <HAL_RCC_ClockConfig+0x25c>)
 800252c:	5ccb      	ldrb	r3, [r1, r3]
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <HAL_RCC_ClockConfig+0x260>)
 8002534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_RCC_ClockConfig+0x264>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff f876 	bl	800162c <HAL_InitTick>
 8002540:	4603      	mov	r3, r0
 8002542:	72fb      	strb	r3, [r7, #11]

  return status;
 8002544:	7afb      	ldrb	r3, [r7, #11]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	08007928 	.word	0x08007928
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b092      	sub	sp, #72	@ 0x48
 800256a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800256c:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 800257c:	2b0c      	cmp	r3, #12
 800257e:	f200 80d5 	bhi.w	800272c <HAL_RCC_GetSysClockFreq+0x1c8>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x28>
 8002586:	2b08      	cmp	r3, #8
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x2e>
 800258a:	e0cf      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b72      	ldr	r3, [pc, #456]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800258e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002590:	e0da      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b72      	ldr	r3, [pc, #456]	@ (800275c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002594:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002596:	e0d7      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a8:	0d9b      	lsrs	r3, r3, #22
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	3301      	adds	r3, #1
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b2:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d05d      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	2200      	movs	r2, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	4611      	mov	r1, r2
 80025c6:	4604      	mov	r4, r0
 80025c8:	460d      	mov	r5, r1
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4621      	mov	r1, r4
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	6139      	str	r1, [r7, #16]
 80025e8:	4629      	mov	r1, r5
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025fc:	4659      	mov	r1, fp
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002606:	4651      	mov	r1, sl
 8002608:	018a      	lsls	r2, r1, #6
 800260a:	46d4      	mov	ip, sl
 800260c:	ebb2 080c 	subs.w	r8, r2, ip
 8002610:	4659      	mov	r1, fp
 8002612:	eb63 0901 	sbc.w	r9, r3, r1
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262a:	4690      	mov	r8, r2
 800262c:	4699      	mov	r9, r3
 800262e:	4623      	mov	r3, r4
 8002630:	eb18 0303 	adds.w	r3, r8, r3
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	462b      	mov	r3, r5
 8002638:	eb49 0303 	adc.w	r3, r9, r3
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264a:	4629      	mov	r1, r5
 800264c:	024b      	lsls	r3, r1, #9
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	4604      	mov	r4, r0
 8002654:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002658:	4601      	mov	r1, r0
 800265a:	024a      	lsls	r2, r1, #9
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800266c:	f7fe fa94 	bl	8000b98 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
 8002678:	e055      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267c:	2200      	movs	r2, #0
 800267e:	623b      	str	r3, [r7, #32]
 8002680:	627a      	str	r2, [r7, #36]	@ 0x24
 8002682:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002686:	4642      	mov	r2, r8
 8002688:	464b      	mov	r3, r9
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002698:	0150      	lsls	r0, r2, #5
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	46c4      	mov	ip, r8
 80026a0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80026a4:	4640      	mov	r0, r8
 80026a6:	4649      	mov	r1, r9
 80026a8:	468c      	mov	ip, r1
 80026aa:	eb63 0b0c 	sbc.w	fp, r3, ip
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c2:	ebb2 040a 	subs.w	r4, r2, sl
 80026c6:	eb63 050b 	sbc.w	r5, r3, fp
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	00eb      	lsls	r3, r5, #3
 80026d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d8:	00e2      	lsls	r2, r4, #3
 80026da:	4614      	mov	r4, r2
 80026dc:	461d      	mov	r5, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	18e3      	adds	r3, r4, r3
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	eb45 0303 	adc.w	r3, r5, r3
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026f8:	4629      	mov	r1, r5
 80026fa:	028b      	lsls	r3, r1, #10
 80026fc:	4620      	mov	r0, r4
 80026fe:	4629      	mov	r1, r5
 8002700:	4604      	mov	r4, r0
 8002702:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002706:	4601      	mov	r1, r0
 8002708:	028a      	lsls	r2, r1, #10
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	2200      	movs	r2, #0
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	61fa      	str	r2, [r7, #28]
 8002716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271a:	f7fe fa3d 	bl	8000b98 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4613      	mov	r3, r2
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8002726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002728:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800272a:	e00d      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0b5b      	lsrs	r3, r3, #13
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	3301      	adds	r3, #1
 800273c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002746:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800274a:	4618      	mov	r0, r3
 800274c:	3748      	adds	r7, #72	@ 0x48
 800274e:	46bd      	mov	sp, r7
 8002750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200
 8002760:	0800791c 	.word	0x0800791c

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff2 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	08007938 	.word	0x08007938

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffde 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08007938 	.word	0x08007938

080027c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d12c      	bne.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e0:	4b26      	ldr	r3, [pc, #152]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80027ec:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e016      	b.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b20      	ldr	r3, [pc, #128]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	4a1f      	ldr	r2, [pc, #124]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6253      	str	r3, [r2, #36]	@ 0x24
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002818:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	4a17      	ldr	r2, [pc, #92]	@ (800287c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800282c:	d105      	bne.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002834:	d101      	bne.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002836:	2301      	movs	r3, #1
 8002838:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0f      	ldr	r2, [pc, #60]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 0201 	bic.w	r2, r3, #1
 8002854:	490b      	ldr	r1, [pc, #44]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	429a      	cmp	r2, r3
 8002868:	d001      	beq.n	800286e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000
 8002884:	40023c00 	.word	0x40023c00

08002888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e031      	b.n	80028fe <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fdf4 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f000 f930 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d001      	beq.n	8002920 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start+0x48>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a16      	ldr	r2, [pc, #88]	@ (8002990 <HAL_TIM_Base_Start+0x88>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start+0x48>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <HAL_TIM_Base_Start+0x8c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start+0x48>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <HAL_TIM_Base_Start+0x90>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40010800 	.word	0x40010800

0800299c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_ConfigClockSource+0x1c>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e0b4      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x186>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f0:	d03e      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0xd4>
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f6:	f200 8087 	bhi.w	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fe:	f000 8086 	beq.w	8002b0e <HAL_TIM_ConfigClockSource+0x172>
 8002a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a06:	d87f      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b70      	cmp	r3, #112	@ 0x70
 8002a0a:	d01a      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0xa6>
 8002a0c:	2b70      	cmp	r3, #112	@ 0x70
 8002a0e:	d87b      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b60      	cmp	r3, #96	@ 0x60
 8002a12:	d050      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a14:	2b60      	cmp	r3, #96	@ 0x60
 8002a16:	d877      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b50      	cmp	r3, #80	@ 0x50
 8002a1a:	d03c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xfa>
 8002a1c:	2b50      	cmp	r3, #80	@ 0x50
 8002a1e:	d873      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d058      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8002a24:	2b40      	cmp	r3, #64	@ 0x40
 8002a26:	d86f      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b30      	cmp	r3, #48	@ 0x30
 8002a2a:	d064      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a2c:	2b30      	cmp	r3, #48	@ 0x30
 8002a2e:	d86b      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d060      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d867      	bhi.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d05c      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d05a      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a40:	e062      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a52:	f000 f952 	bl	8002cfa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	609a      	str	r2, [r3, #8]
      break;
 8002a6e:	e04f      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a80:	f000 f93b 	bl	8002cfa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a92:	609a      	str	r2, [r3, #8]
      break;
 8002a94:	e03c      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f000 f8b2 	bl	8002c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2150      	movs	r1, #80	@ 0x50
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f909 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e02c      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 f8d0 	bl	8002c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2160      	movs	r1, #96	@ 0x60
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8f9 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e01c      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 f892 	bl	8002c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2140      	movs	r1, #64	@ 0x40
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f8e9 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002af4:	e00c      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f000 f8e0 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002b06:	e003      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e000      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <TIM_Base_SetConfig+0xc8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <TIM_Base_SetConfig+0xcc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <TIM_Base_SetConfig+0xd0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a28      	ldr	r2, [pc, #160]	@ (8002c00 <TIM_Base_SetConfig+0xd4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d017      	beq.n	8002bae <TIM_Base_SetConfig+0x82>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <TIM_Base_SetConfig+0xc8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <TIM_Base_SetConfig+0x82>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <TIM_Base_SetConfig+0xcc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <TIM_Base_SetConfig+0x82>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <TIM_Base_SetConfig+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0x82>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <TIM_Base_SetConfig+0xd4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x82>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	@ (8002c04 <TIM_Base_SetConfig+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x82>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <TIM_Base_SetConfig+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40010800 	.word	0x40010800
 8002c04:	40010c00 	.word	0x40010c00
 8002c08:	40011000 	.word	0x40011000

08002c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	f023 0201 	bic.w	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f023 030a 	bic.w	r3, r3, #10
 8002c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0210 	bic.w	r2, r3, #16
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f043 0307 	orr.w	r3, r3, #7
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b087      	sub	sp, #28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	021a      	lsls	r2, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	609a      	str	r2, [r3, #8]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e046      	b.n	8002dde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d92:	d00e      	beq.n	8002db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a13      	ldr	r2, [pc, #76]	@ (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a12      	ldr	r2, [pc, #72]	@ (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a10      	ldr	r2, [pc, #64]	@ (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10c      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40010800 	.word	0x40010800

08002df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e042      	b.n	8002e8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fb84 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f91d 	bl	8003078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	@ 0x28
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d16d      	bne.n	8002f90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UART_Transmit+0x2c>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e066      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2221      	movs	r2, #33	@ 0x21
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fbf7 	bl	80016c4 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eec:	d108      	bne.n	8002f00 <HAL_UART_Transmit+0x6c>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	e003      	b.n	8002f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f08:	e02a      	b.n	8002f60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	@ 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f840 	bl	8002f9a <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e036      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e007      	b.n	8002f52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cf      	bne.n	8002f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	@ 0x40
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f810 	bl	8002f9a <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b090      	sub	sp, #64	@ 0x40
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	e050      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d04c      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x30>
 8002fba:	f7fe fb83 	bl	80016c4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d241      	bcs.n	800304e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fea:	637a      	str	r2, [r7, #52]	@ 0x34
 8002fec:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	613b      	str	r3, [r7, #16]
   return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3314      	adds	r3, #20
 800301c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800301e:	623a      	str	r2, [r7, #32]
 8003020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	69f9      	ldr	r1, [r7, #28]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	61bb      	str	r3, [r7, #24]
   return(result);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e00f      	b.n	800306e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d09f      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3740      	adds	r7, #64	@ 0x40
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80030b8:	f023 030c 	bic.w	r3, r3, #12
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	430b      	orrs	r3, r1
 80030c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a55      	ldr	r2, [pc, #340]	@ (8003238 <UART_SetConfig+0x1c0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d103      	bne.n	80030ee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030e6:	f7ff fb5b 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	e002      	b.n	80030f4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030ee:	f7ff fb43 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 80030f2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fc:	d14c      	bne.n	8003198 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	4a49      	ldr	r2, [pc, #292]	@ (800323c <UART_SetConfig+0x1c4>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	0119      	lsls	r1, r3, #4
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fbb2 f2f3 	udiv	r2, r2, r3
 8003134:	4b41      	ldr	r3, [pc, #260]	@ (800323c <UART_SetConfig+0x1c4>)
 8003136:	fba3 0302 	umull	r0, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2064      	movs	r0, #100	@ 0x64
 800313e:	fb00 f303 	mul.w	r3, r0, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	3332      	adds	r3, #50	@ 0x32
 8003148:	4a3c      	ldr	r2, [pc, #240]	@ (800323c <UART_SetConfig+0x1c4>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003156:	4419      	add	r1, r3
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fbb2 f2f3 	udiv	r2, r2, r3
 800316e:	4b33      	ldr	r3, [pc, #204]	@ (800323c <UART_SetConfig+0x1c4>)
 8003170:	fba3 0302 	umull	r0, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	2064      	movs	r0, #100	@ 0x64
 8003178:	fb00 f303 	mul.w	r3, r0, r3
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	3332      	adds	r3, #50	@ 0x32
 8003182:	4a2e      	ldr	r2, [pc, #184]	@ (800323c <UART_SetConfig+0x1c4>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	f003 0207 	and.w	r2, r3, #7
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	440a      	add	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003196:	e04a      	b.n	800322e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009a      	lsls	r2, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	4a23      	ldr	r2, [pc, #140]	@ (800323c <UART_SetConfig+0x1c4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	0119      	lsls	r1, r3, #4
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009a      	lsls	r2, r3, #2
 80031c2:	441a      	add	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <UART_SetConfig+0x1c4>)
 80031d0:	fba3 0302 	umull	r0, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	2064      	movs	r0, #100	@ 0x64
 80031d8:	fb00 f303 	mul.w	r3, r0, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	3332      	adds	r3, #50	@ 0x32
 80031e2:	4a16      	ldr	r2, [pc, #88]	@ (800323c <UART_SetConfig+0x1c4>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ee:	4419      	add	r1, r3
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009a      	lsls	r2, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fbb2 f2f3 	udiv	r2, r2, r3
 8003206:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <UART_SetConfig+0x1c4>)
 8003208:	fba3 0302 	umull	r0, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2064      	movs	r0, #100	@ 0x64
 8003210:	fb00 f303 	mul.w	r3, r0, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	3332      	adds	r3, #50	@ 0x32
 800321a:	4a08      	ldr	r2, [pc, #32]	@ (800323c <UART_SetConfig+0x1c4>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	440a      	add	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40013800 	.word	0x40013800
 800323c:	51eb851f 	.word	0x51eb851f

08003240 <__cvt>:
 8003240:	2b00      	cmp	r3, #0
 8003242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003246:	461d      	mov	r5, r3
 8003248:	bfbb      	ittet	lt
 800324a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800324e:	461d      	movlt	r5, r3
 8003250:	2300      	movge	r3, #0
 8003252:	232d      	movlt	r3, #45	@ 0x2d
 8003254:	b088      	sub	sp, #32
 8003256:	4614      	mov	r4, r2
 8003258:	bfb8      	it	lt
 800325a:	4614      	movlt	r4, r2
 800325c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800325e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003260:	7013      	strb	r3, [r2, #0]
 8003262:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003264:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003268:	f023 0820 	bic.w	r8, r3, #32
 800326c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003270:	d005      	beq.n	800327e <__cvt+0x3e>
 8003272:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003276:	d100      	bne.n	800327a <__cvt+0x3a>
 8003278:	3601      	adds	r6, #1
 800327a:	2302      	movs	r3, #2
 800327c:	e000      	b.n	8003280 <__cvt+0x40>
 800327e:	2303      	movs	r3, #3
 8003280:	aa07      	add	r2, sp, #28
 8003282:	9204      	str	r2, [sp, #16]
 8003284:	aa06      	add	r2, sp, #24
 8003286:	e9cd a202 	strd	sl, r2, [sp, #8]
 800328a:	e9cd 3600 	strd	r3, r6, [sp]
 800328e:	4622      	mov	r2, r4
 8003290:	462b      	mov	r3, r5
 8003292:	f001 f881 	bl	8004398 <_dtoa_r>
 8003296:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800329a:	4607      	mov	r7, r0
 800329c:	d119      	bne.n	80032d2 <__cvt+0x92>
 800329e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80032a0:	07db      	lsls	r3, r3, #31
 80032a2:	d50e      	bpl.n	80032c2 <__cvt+0x82>
 80032a4:	eb00 0906 	add.w	r9, r0, r6
 80032a8:	2200      	movs	r2, #0
 80032aa:	2300      	movs	r3, #0
 80032ac:	4620      	mov	r0, r4
 80032ae:	4629      	mov	r1, r5
 80032b0:	f7fd fb92 	bl	80009d8 <__aeabi_dcmpeq>
 80032b4:	b108      	cbz	r0, 80032ba <__cvt+0x7a>
 80032b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80032ba:	2230      	movs	r2, #48	@ 0x30
 80032bc:	9b07      	ldr	r3, [sp, #28]
 80032be:	454b      	cmp	r3, r9
 80032c0:	d31e      	bcc.n	8003300 <__cvt+0xc0>
 80032c2:	4638      	mov	r0, r7
 80032c4:	9b07      	ldr	r3, [sp, #28]
 80032c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80032c8:	1bdb      	subs	r3, r3, r7
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	b008      	add	sp, #32
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032d6:	eb00 0906 	add.w	r9, r0, r6
 80032da:	d1e5      	bne.n	80032a8 <__cvt+0x68>
 80032dc:	7803      	ldrb	r3, [r0, #0]
 80032de:	2b30      	cmp	r3, #48	@ 0x30
 80032e0:	d10a      	bne.n	80032f8 <__cvt+0xb8>
 80032e2:	2200      	movs	r2, #0
 80032e4:	2300      	movs	r3, #0
 80032e6:	4620      	mov	r0, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	f7fd fb75 	bl	80009d8 <__aeabi_dcmpeq>
 80032ee:	b918      	cbnz	r0, 80032f8 <__cvt+0xb8>
 80032f0:	f1c6 0601 	rsb	r6, r6, #1
 80032f4:	f8ca 6000 	str.w	r6, [sl]
 80032f8:	f8da 3000 	ldr.w	r3, [sl]
 80032fc:	4499      	add	r9, r3
 80032fe:	e7d3      	b.n	80032a8 <__cvt+0x68>
 8003300:	1c59      	adds	r1, r3, #1
 8003302:	9107      	str	r1, [sp, #28]
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e7d9      	b.n	80032bc <__cvt+0x7c>

08003308 <__exponent>:
 8003308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800330a:	2900      	cmp	r1, #0
 800330c:	bfb6      	itet	lt
 800330e:	232d      	movlt	r3, #45	@ 0x2d
 8003310:	232b      	movge	r3, #43	@ 0x2b
 8003312:	4249      	neglt	r1, r1
 8003314:	2909      	cmp	r1, #9
 8003316:	7002      	strb	r2, [r0, #0]
 8003318:	7043      	strb	r3, [r0, #1]
 800331a:	dd29      	ble.n	8003370 <__exponent+0x68>
 800331c:	f10d 0307 	add.w	r3, sp, #7
 8003320:	461d      	mov	r5, r3
 8003322:	270a      	movs	r7, #10
 8003324:	fbb1 f6f7 	udiv	r6, r1, r7
 8003328:	461a      	mov	r2, r3
 800332a:	fb07 1416 	mls	r4, r7, r6, r1
 800332e:	3430      	adds	r4, #48	@ 0x30
 8003330:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003334:	460c      	mov	r4, r1
 8003336:	2c63      	cmp	r4, #99	@ 0x63
 8003338:	4631      	mov	r1, r6
 800333a:	f103 33ff 	add.w	r3, r3, #4294967295
 800333e:	dcf1      	bgt.n	8003324 <__exponent+0x1c>
 8003340:	3130      	adds	r1, #48	@ 0x30
 8003342:	1e94      	subs	r4, r2, #2
 8003344:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003348:	4623      	mov	r3, r4
 800334a:	1c41      	adds	r1, r0, #1
 800334c:	42ab      	cmp	r3, r5
 800334e:	d30a      	bcc.n	8003366 <__exponent+0x5e>
 8003350:	f10d 0309 	add.w	r3, sp, #9
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	42ac      	cmp	r4, r5
 8003358:	bf88      	it	hi
 800335a:	2300      	movhi	r3, #0
 800335c:	3302      	adds	r3, #2
 800335e:	4403      	add	r3, r0
 8003360:	1a18      	subs	r0, r3, r0
 8003362:	b003      	add	sp, #12
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003366:	f813 6b01 	ldrb.w	r6, [r3], #1
 800336a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800336e:	e7ed      	b.n	800334c <__exponent+0x44>
 8003370:	2330      	movs	r3, #48	@ 0x30
 8003372:	3130      	adds	r1, #48	@ 0x30
 8003374:	7083      	strb	r3, [r0, #2]
 8003376:	70c1      	strb	r1, [r0, #3]
 8003378:	1d03      	adds	r3, r0, #4
 800337a:	e7f1      	b.n	8003360 <__exponent+0x58>

0800337c <_printf_float>:
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003380:	b091      	sub	sp, #68	@ 0x44
 8003382:	460c      	mov	r4, r1
 8003384:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003388:	4616      	mov	r6, r2
 800338a:	461f      	mov	r7, r3
 800338c:	4605      	mov	r5, r0
 800338e:	f000 fef1 	bl	8004174 <_localeconv_r>
 8003392:	6803      	ldr	r3, [r0, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	9308      	str	r3, [sp, #32]
 8003398:	f7fc fef2 	bl	8000180 <strlen>
 800339c:	2300      	movs	r3, #0
 800339e:	930e      	str	r3, [sp, #56]	@ 0x38
 80033a0:	f8d8 3000 	ldr.w	r3, [r8]
 80033a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80033a6:	3307      	adds	r3, #7
 80033a8:	f023 0307 	bic.w	r3, r3, #7
 80033ac:	f103 0208 	add.w	r2, r3, #8
 80033b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80033b4:	f8d4 b000 	ldr.w	fp, [r4]
 80033b8:	f8c8 2000 	str.w	r2, [r8]
 80033bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80033c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033c6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80033d6:	4b9c      	ldr	r3, [pc, #624]	@ (8003648 <_printf_float+0x2cc>)
 80033d8:	f7fd fb30 	bl	8000a3c <__aeabi_dcmpun>
 80033dc:	bb70      	cbnz	r0, 800343c <_printf_float+0xc0>
 80033de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033e2:	f04f 32ff 	mov.w	r2, #4294967295
 80033e6:	4b98      	ldr	r3, [pc, #608]	@ (8003648 <_printf_float+0x2cc>)
 80033e8:	f7fd fb0a 	bl	8000a00 <__aeabi_dcmple>
 80033ec:	bb30      	cbnz	r0, 800343c <_printf_float+0xc0>
 80033ee:	2200      	movs	r2, #0
 80033f0:	2300      	movs	r3, #0
 80033f2:	4640      	mov	r0, r8
 80033f4:	4649      	mov	r1, r9
 80033f6:	f7fd faf9 	bl	80009ec <__aeabi_dcmplt>
 80033fa:	b110      	cbz	r0, 8003402 <_printf_float+0x86>
 80033fc:	232d      	movs	r3, #45	@ 0x2d
 80033fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003402:	4a92      	ldr	r2, [pc, #584]	@ (800364c <_printf_float+0x2d0>)
 8003404:	4b92      	ldr	r3, [pc, #584]	@ (8003650 <_printf_float+0x2d4>)
 8003406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800340a:	bf94      	ite	ls
 800340c:	4690      	movls	r8, r2
 800340e:	4698      	movhi	r8, r3
 8003410:	2303      	movs	r3, #3
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	6123      	str	r3, [r4, #16]
 8003418:	f02b 0304 	bic.w	r3, fp, #4
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	4633      	mov	r3, r6
 8003420:	4621      	mov	r1, r4
 8003422:	4628      	mov	r0, r5
 8003424:	9700      	str	r7, [sp, #0]
 8003426:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003428:	f000 f9d4 	bl	80037d4 <_printf_common>
 800342c:	3001      	adds	r0, #1
 800342e:	f040 8090 	bne.w	8003552 <_printf_float+0x1d6>
 8003432:	f04f 30ff 	mov.w	r0, #4294967295
 8003436:	b011      	add	sp, #68	@ 0x44
 8003438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343c:	4642      	mov	r2, r8
 800343e:	464b      	mov	r3, r9
 8003440:	4640      	mov	r0, r8
 8003442:	4649      	mov	r1, r9
 8003444:	f7fd fafa 	bl	8000a3c <__aeabi_dcmpun>
 8003448:	b148      	cbz	r0, 800345e <_printf_float+0xe2>
 800344a:	464b      	mov	r3, r9
 800344c:	2b00      	cmp	r3, #0
 800344e:	bfb8      	it	lt
 8003450:	232d      	movlt	r3, #45	@ 0x2d
 8003452:	4a80      	ldr	r2, [pc, #512]	@ (8003654 <_printf_float+0x2d8>)
 8003454:	bfb8      	it	lt
 8003456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800345a:	4b7f      	ldr	r3, [pc, #508]	@ (8003658 <_printf_float+0x2dc>)
 800345c:	e7d3      	b.n	8003406 <_printf_float+0x8a>
 800345e:	6863      	ldr	r3, [r4, #4]
 8003460:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	d13f      	bne.n	80034e8 <_printf_float+0x16c>
 8003468:	2306      	movs	r3, #6
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003472:	6023      	str	r3, [r4, #0]
 8003474:	9206      	str	r2, [sp, #24]
 8003476:	aa0e      	add	r2, sp, #56	@ 0x38
 8003478:	e9cd a204 	strd	sl, r2, [sp, #16]
 800347c:	aa0d      	add	r2, sp, #52	@ 0x34
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003484:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003488:	6863      	ldr	r3, [r4, #4]
 800348a:	4642      	mov	r2, r8
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4628      	mov	r0, r5
 8003490:	464b      	mov	r3, r9
 8003492:	910a      	str	r1, [sp, #40]	@ 0x28
 8003494:	f7ff fed4 	bl	8003240 <__cvt>
 8003498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800349a:	4680      	mov	r8, r0
 800349c:	2947      	cmp	r1, #71	@ 0x47
 800349e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80034a0:	d128      	bne.n	80034f4 <_printf_float+0x178>
 80034a2:	1cc8      	adds	r0, r1, #3
 80034a4:	db02      	blt.n	80034ac <_printf_float+0x130>
 80034a6:	6863      	ldr	r3, [r4, #4]
 80034a8:	4299      	cmp	r1, r3
 80034aa:	dd40      	ble.n	800352e <_printf_float+0x1b2>
 80034ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80034b0:	fa5f fa8a 	uxtb.w	sl, sl
 80034b4:	4652      	mov	r2, sl
 80034b6:	3901      	subs	r1, #1
 80034b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80034be:	f7ff ff23 	bl	8003308 <__exponent>
 80034c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80034c4:	4681      	mov	r9, r0
 80034c6:	1813      	adds	r3, r2, r0
 80034c8:	2a01      	cmp	r2, #1
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	dc02      	bgt.n	80034d4 <_printf_float+0x158>
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	07d2      	lsls	r2, r2, #31
 80034d2:	d501      	bpl.n	80034d8 <_printf_float+0x15c>
 80034d4:	3301      	adds	r3, #1
 80034d6:	6123      	str	r3, [r4, #16]
 80034d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d09e      	beq.n	800341e <_printf_float+0xa2>
 80034e0:	232d      	movs	r3, #45	@ 0x2d
 80034e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034e6:	e79a      	b.n	800341e <_printf_float+0xa2>
 80034e8:	2947      	cmp	r1, #71	@ 0x47
 80034ea:	d1bf      	bne.n	800346c <_printf_float+0xf0>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1bd      	bne.n	800346c <_printf_float+0xf0>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e7ba      	b.n	800346a <_printf_float+0xee>
 80034f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034f8:	d9dc      	bls.n	80034b4 <_printf_float+0x138>
 80034fa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80034fe:	d118      	bne.n	8003532 <_printf_float+0x1b6>
 8003500:	2900      	cmp	r1, #0
 8003502:	6863      	ldr	r3, [r4, #4]
 8003504:	dd0b      	ble.n	800351e <_printf_float+0x1a2>
 8003506:	6121      	str	r1, [r4, #16]
 8003508:	b913      	cbnz	r3, 8003510 <_printf_float+0x194>
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	07d0      	lsls	r0, r2, #31
 800350e:	d502      	bpl.n	8003516 <_printf_float+0x19a>
 8003510:	3301      	adds	r3, #1
 8003512:	440b      	add	r3, r1
 8003514:	6123      	str	r3, [r4, #16]
 8003516:	f04f 0900 	mov.w	r9, #0
 800351a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800351c:	e7dc      	b.n	80034d8 <_printf_float+0x15c>
 800351e:	b913      	cbnz	r3, 8003526 <_printf_float+0x1aa>
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	07d2      	lsls	r2, r2, #31
 8003524:	d501      	bpl.n	800352a <_printf_float+0x1ae>
 8003526:	3302      	adds	r3, #2
 8003528:	e7f4      	b.n	8003514 <_printf_float+0x198>
 800352a:	2301      	movs	r3, #1
 800352c:	e7f2      	b.n	8003514 <_printf_float+0x198>
 800352e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003534:	4299      	cmp	r1, r3
 8003536:	db05      	blt.n	8003544 <_printf_float+0x1c8>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	6121      	str	r1, [r4, #16]
 800353c:	07d8      	lsls	r0, r3, #31
 800353e:	d5ea      	bpl.n	8003516 <_printf_float+0x19a>
 8003540:	1c4b      	adds	r3, r1, #1
 8003542:	e7e7      	b.n	8003514 <_printf_float+0x198>
 8003544:	2900      	cmp	r1, #0
 8003546:	bfcc      	ite	gt
 8003548:	2201      	movgt	r2, #1
 800354a:	f1c1 0202 	rsble	r2, r1, #2
 800354e:	4413      	add	r3, r2
 8003550:	e7e0      	b.n	8003514 <_printf_float+0x198>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	055a      	lsls	r2, r3, #21
 8003556:	d407      	bmi.n	8003568 <_printf_float+0x1ec>
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	4642      	mov	r2, r8
 800355c:	4631      	mov	r1, r6
 800355e:	4628      	mov	r0, r5
 8003560:	47b8      	blx	r7
 8003562:	3001      	adds	r0, #1
 8003564:	d12b      	bne.n	80035be <_printf_float+0x242>
 8003566:	e764      	b.n	8003432 <_printf_float+0xb6>
 8003568:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800356c:	f240 80dc 	bls.w	8003728 <_printf_float+0x3ac>
 8003570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003574:	2200      	movs	r2, #0
 8003576:	2300      	movs	r3, #0
 8003578:	f7fd fa2e 	bl	80009d8 <__aeabi_dcmpeq>
 800357c:	2800      	cmp	r0, #0
 800357e:	d033      	beq.n	80035e8 <_printf_float+0x26c>
 8003580:	2301      	movs	r3, #1
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	4a35      	ldr	r2, [pc, #212]	@ (800365c <_printf_float+0x2e0>)
 8003588:	47b8      	blx	r7
 800358a:	3001      	adds	r0, #1
 800358c:	f43f af51 	beq.w	8003432 <_printf_float+0xb6>
 8003590:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003594:	4543      	cmp	r3, r8
 8003596:	db02      	blt.n	800359e <_printf_float+0x222>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	07d8      	lsls	r0, r3, #31
 800359c:	d50f      	bpl.n	80035be <_printf_float+0x242>
 800359e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035a2:	4631      	mov	r1, r6
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b8      	blx	r7
 80035a8:	3001      	adds	r0, #1
 80035aa:	f43f af42 	beq.w	8003432 <_printf_float+0xb6>
 80035ae:	f04f 0900 	mov.w	r9, #0
 80035b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80035b6:	f104 0a1a 	add.w	sl, r4, #26
 80035ba:	45c8      	cmp	r8, r9
 80035bc:	dc09      	bgt.n	80035d2 <_printf_float+0x256>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	079b      	lsls	r3, r3, #30
 80035c2:	f100 8102 	bmi.w	80037ca <_printf_float+0x44e>
 80035c6:	68e0      	ldr	r0, [r4, #12]
 80035c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80035ca:	4298      	cmp	r0, r3
 80035cc:	bfb8      	it	lt
 80035ce:	4618      	movlt	r0, r3
 80035d0:	e731      	b.n	8003436 <_printf_float+0xba>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4652      	mov	r2, sl
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f af28 	beq.w	8003432 <_printf_float+0xb6>
 80035e2:	f109 0901 	add.w	r9, r9, #1
 80035e6:	e7e8      	b.n	80035ba <_printf_float+0x23e>
 80035e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	dc38      	bgt.n	8003660 <_printf_float+0x2e4>
 80035ee:	2301      	movs	r3, #1
 80035f0:	4631      	mov	r1, r6
 80035f2:	4628      	mov	r0, r5
 80035f4:	4a19      	ldr	r2, [pc, #100]	@ (800365c <_printf_float+0x2e0>)
 80035f6:	47b8      	blx	r7
 80035f8:	3001      	adds	r0, #1
 80035fa:	f43f af1a 	beq.w	8003432 <_printf_float+0xb6>
 80035fe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003602:	ea59 0303 	orrs.w	r3, r9, r3
 8003606:	d102      	bne.n	800360e <_printf_float+0x292>
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	07d9      	lsls	r1, r3, #31
 800360c:	d5d7      	bpl.n	80035be <_printf_float+0x242>
 800360e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003612:	4631      	mov	r1, r6
 8003614:	4628      	mov	r0, r5
 8003616:	47b8      	blx	r7
 8003618:	3001      	adds	r0, #1
 800361a:	f43f af0a 	beq.w	8003432 <_printf_float+0xb6>
 800361e:	f04f 0a00 	mov.w	sl, #0
 8003622:	f104 0b1a 	add.w	fp, r4, #26
 8003626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003628:	425b      	negs	r3, r3
 800362a:	4553      	cmp	r3, sl
 800362c:	dc01      	bgt.n	8003632 <_printf_float+0x2b6>
 800362e:	464b      	mov	r3, r9
 8003630:	e793      	b.n	800355a <_printf_float+0x1de>
 8003632:	2301      	movs	r3, #1
 8003634:	465a      	mov	r2, fp
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	f43f aef8 	beq.w	8003432 <_printf_float+0xb6>
 8003642:	f10a 0a01 	add.w	sl, sl, #1
 8003646:	e7ee      	b.n	8003626 <_printf_float+0x2aa>
 8003648:	7fefffff 	.word	0x7fefffff
 800364c:	08007940 	.word	0x08007940
 8003650:	08007944 	.word	0x08007944
 8003654:	08007948 	.word	0x08007948
 8003658:	0800794c 	.word	0x0800794c
 800365c:	08007950 	.word	0x08007950
 8003660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003662:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003666:	4553      	cmp	r3, sl
 8003668:	bfa8      	it	ge
 800366a:	4653      	movge	r3, sl
 800366c:	2b00      	cmp	r3, #0
 800366e:	4699      	mov	r9, r3
 8003670:	dc36      	bgt.n	80036e0 <_printf_float+0x364>
 8003672:	f04f 0b00 	mov.w	fp, #0
 8003676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800367a:	f104 021a 	add.w	r2, r4, #26
 800367e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003680:	930a      	str	r3, [sp, #40]	@ 0x28
 8003682:	eba3 0309 	sub.w	r3, r3, r9
 8003686:	455b      	cmp	r3, fp
 8003688:	dc31      	bgt.n	80036ee <_printf_float+0x372>
 800368a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800368c:	459a      	cmp	sl, r3
 800368e:	dc3a      	bgt.n	8003706 <_printf_float+0x38a>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	07da      	lsls	r2, r3, #31
 8003694:	d437      	bmi.n	8003706 <_printf_float+0x38a>
 8003696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003698:	ebaa 0903 	sub.w	r9, sl, r3
 800369c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800369e:	ebaa 0303 	sub.w	r3, sl, r3
 80036a2:	4599      	cmp	r9, r3
 80036a4:	bfa8      	it	ge
 80036a6:	4699      	movge	r9, r3
 80036a8:	f1b9 0f00 	cmp.w	r9, #0
 80036ac:	dc33      	bgt.n	8003716 <_printf_float+0x39a>
 80036ae:	f04f 0800 	mov.w	r8, #0
 80036b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036b6:	f104 0b1a 	add.w	fp, r4, #26
 80036ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036bc:	ebaa 0303 	sub.w	r3, sl, r3
 80036c0:	eba3 0309 	sub.w	r3, r3, r9
 80036c4:	4543      	cmp	r3, r8
 80036c6:	f77f af7a 	ble.w	80035be <_printf_float+0x242>
 80036ca:	2301      	movs	r3, #1
 80036cc:	465a      	mov	r2, fp
 80036ce:	4631      	mov	r1, r6
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b8      	blx	r7
 80036d4:	3001      	adds	r0, #1
 80036d6:	f43f aeac 	beq.w	8003432 <_printf_float+0xb6>
 80036da:	f108 0801 	add.w	r8, r8, #1
 80036de:	e7ec      	b.n	80036ba <_printf_float+0x33e>
 80036e0:	4642      	mov	r2, r8
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	d1c2      	bne.n	8003672 <_printf_float+0x2f6>
 80036ec:	e6a1      	b.n	8003432 <_printf_float+0xb6>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4631      	mov	r1, r6
 80036f2:	4628      	mov	r0, r5
 80036f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80036f6:	47b8      	blx	r7
 80036f8:	3001      	adds	r0, #1
 80036fa:	f43f ae9a 	beq.w	8003432 <_printf_float+0xb6>
 80036fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003700:	f10b 0b01 	add.w	fp, fp, #1
 8003704:	e7bb      	b.n	800367e <_printf_float+0x302>
 8003706:	4631      	mov	r1, r6
 8003708:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800370c:	4628      	mov	r0, r5
 800370e:	47b8      	blx	r7
 8003710:	3001      	adds	r0, #1
 8003712:	d1c0      	bne.n	8003696 <_printf_float+0x31a>
 8003714:	e68d      	b.n	8003432 <_printf_float+0xb6>
 8003716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003718:	464b      	mov	r3, r9
 800371a:	4631      	mov	r1, r6
 800371c:	4628      	mov	r0, r5
 800371e:	4442      	add	r2, r8
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	d1c3      	bne.n	80036ae <_printf_float+0x332>
 8003726:	e684      	b.n	8003432 <_printf_float+0xb6>
 8003728:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800372c:	f1ba 0f01 	cmp.w	sl, #1
 8003730:	dc01      	bgt.n	8003736 <_printf_float+0x3ba>
 8003732:	07db      	lsls	r3, r3, #31
 8003734:	d536      	bpl.n	80037a4 <_printf_float+0x428>
 8003736:	2301      	movs	r3, #1
 8003738:	4642      	mov	r2, r8
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	f43f ae76 	beq.w	8003432 <_printf_float+0xb6>
 8003746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800374a:	4631      	mov	r1, r6
 800374c:	4628      	mov	r0, r5
 800374e:	47b8      	blx	r7
 8003750:	3001      	adds	r0, #1
 8003752:	f43f ae6e 	beq.w	8003432 <_printf_float+0xb6>
 8003756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800375a:	2200      	movs	r2, #0
 800375c:	2300      	movs	r3, #0
 800375e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003762:	f7fd f939 	bl	80009d8 <__aeabi_dcmpeq>
 8003766:	b9c0      	cbnz	r0, 800379a <_printf_float+0x41e>
 8003768:	4653      	mov	r3, sl
 800376a:	f108 0201 	add.w	r2, r8, #1
 800376e:	4631      	mov	r1, r6
 8003770:	4628      	mov	r0, r5
 8003772:	47b8      	blx	r7
 8003774:	3001      	adds	r0, #1
 8003776:	d10c      	bne.n	8003792 <_printf_float+0x416>
 8003778:	e65b      	b.n	8003432 <_printf_float+0xb6>
 800377a:	2301      	movs	r3, #1
 800377c:	465a      	mov	r2, fp
 800377e:	4631      	mov	r1, r6
 8003780:	4628      	mov	r0, r5
 8003782:	47b8      	blx	r7
 8003784:	3001      	adds	r0, #1
 8003786:	f43f ae54 	beq.w	8003432 <_printf_float+0xb6>
 800378a:	f108 0801 	add.w	r8, r8, #1
 800378e:	45d0      	cmp	r8, sl
 8003790:	dbf3      	blt.n	800377a <_printf_float+0x3fe>
 8003792:	464b      	mov	r3, r9
 8003794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003798:	e6e0      	b.n	800355c <_printf_float+0x1e0>
 800379a:	f04f 0800 	mov.w	r8, #0
 800379e:	f104 0b1a 	add.w	fp, r4, #26
 80037a2:	e7f4      	b.n	800378e <_printf_float+0x412>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4642      	mov	r2, r8
 80037a8:	e7e1      	b.n	800376e <_printf_float+0x3f2>
 80037aa:	2301      	movs	r3, #1
 80037ac:	464a      	mov	r2, r9
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b8      	blx	r7
 80037b4:	3001      	adds	r0, #1
 80037b6:	f43f ae3c 	beq.w	8003432 <_printf_float+0xb6>
 80037ba:	f108 0801 	add.w	r8, r8, #1
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80037c2:	1a5b      	subs	r3, r3, r1
 80037c4:	4543      	cmp	r3, r8
 80037c6:	dcf0      	bgt.n	80037aa <_printf_float+0x42e>
 80037c8:	e6fd      	b.n	80035c6 <_printf_float+0x24a>
 80037ca:	f04f 0800 	mov.w	r8, #0
 80037ce:	f104 0919 	add.w	r9, r4, #25
 80037d2:	e7f4      	b.n	80037be <_printf_float+0x442>

080037d4 <_printf_common>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	4616      	mov	r6, r2
 80037da:	4698      	mov	r8, r3
 80037dc:	688a      	ldr	r2, [r1, #8]
 80037de:	690b      	ldr	r3, [r1, #16]
 80037e0:	4607      	mov	r7, r0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	bfb8      	it	lt
 80037e6:	4613      	movlt	r3, r2
 80037e8:	6033      	str	r3, [r6, #0]
 80037ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037ee:	460c      	mov	r4, r1
 80037f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037f4:	b10a      	cbz	r2, 80037fa <_printf_common+0x26>
 80037f6:	3301      	adds	r3, #1
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	0699      	lsls	r1, r3, #26
 80037fe:	bf42      	ittt	mi
 8003800:	6833      	ldrmi	r3, [r6, #0]
 8003802:	3302      	addmi	r3, #2
 8003804:	6033      	strmi	r3, [r6, #0]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	f015 0506 	ands.w	r5, r5, #6
 800380c:	d106      	bne.n	800381c <_printf_common+0x48>
 800380e:	f104 0a19 	add.w	sl, r4, #25
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	6832      	ldr	r2, [r6, #0]
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	42ab      	cmp	r3, r5
 800381a:	dc2b      	bgt.n	8003874 <_printf_common+0xa0>
 800381c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	3b00      	subs	r3, #0
 8003824:	bf18      	it	ne
 8003826:	2301      	movne	r3, #1
 8003828:	0692      	lsls	r2, r2, #26
 800382a:	d430      	bmi.n	800388e <_printf_common+0xba>
 800382c:	4641      	mov	r1, r8
 800382e:	4638      	mov	r0, r7
 8003830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003834:	47c8      	blx	r9
 8003836:	3001      	adds	r0, #1
 8003838:	d023      	beq.n	8003882 <_printf_common+0xae>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	6922      	ldr	r2, [r4, #16]
 800383e:	f003 0306 	and.w	r3, r3, #6
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf14      	ite	ne
 8003846:	2500      	movne	r5, #0
 8003848:	6833      	ldreq	r3, [r6, #0]
 800384a:	f04f 0600 	mov.w	r6, #0
 800384e:	bf08      	it	eq
 8003850:	68e5      	ldreq	r5, [r4, #12]
 8003852:	f104 041a 	add.w	r4, r4, #26
 8003856:	bf08      	it	eq
 8003858:	1aed      	subeq	r5, r5, r3
 800385a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800385e:	bf08      	it	eq
 8003860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003864:	4293      	cmp	r3, r2
 8003866:	bfc4      	itt	gt
 8003868:	1a9b      	subgt	r3, r3, r2
 800386a:	18ed      	addgt	r5, r5, r3
 800386c:	42b5      	cmp	r5, r6
 800386e:	d11a      	bne.n	80038a6 <_printf_common+0xd2>
 8003870:	2000      	movs	r0, #0
 8003872:	e008      	b.n	8003886 <_printf_common+0xb2>
 8003874:	2301      	movs	r3, #1
 8003876:	4652      	mov	r2, sl
 8003878:	4641      	mov	r1, r8
 800387a:	4638      	mov	r0, r7
 800387c:	47c8      	blx	r9
 800387e:	3001      	adds	r0, #1
 8003880:	d103      	bne.n	800388a <_printf_common+0xb6>
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388a:	3501      	adds	r5, #1
 800388c:	e7c1      	b.n	8003812 <_printf_common+0x3e>
 800388e:	2030      	movs	r0, #48	@ 0x30
 8003890:	18e1      	adds	r1, r4, r3
 8003892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800389c:	4422      	add	r2, r4
 800389e:	3302      	adds	r3, #2
 80038a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038a4:	e7c2      	b.n	800382c <_printf_common+0x58>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4622      	mov	r2, r4
 80038aa:	4641      	mov	r1, r8
 80038ac:	4638      	mov	r0, r7
 80038ae:	47c8      	blx	r9
 80038b0:	3001      	adds	r0, #1
 80038b2:	d0e6      	beq.n	8003882 <_printf_common+0xae>
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7d9      	b.n	800386c <_printf_common+0x98>

080038b8 <_printf_i>:
 80038b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	7e0f      	ldrb	r7, [r1, #24]
 80038be:	4691      	mov	r9, r2
 80038c0:	2f78      	cmp	r7, #120	@ 0x78
 80038c2:	4680      	mov	r8, r0
 80038c4:	460c      	mov	r4, r1
 80038c6:	469a      	mov	sl, r3
 80038c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038ce:	d807      	bhi.n	80038e0 <_printf_i+0x28>
 80038d0:	2f62      	cmp	r7, #98	@ 0x62
 80038d2:	d80a      	bhi.n	80038ea <_printf_i+0x32>
 80038d4:	2f00      	cmp	r7, #0
 80038d6:	f000 80d3 	beq.w	8003a80 <_printf_i+0x1c8>
 80038da:	2f58      	cmp	r7, #88	@ 0x58
 80038dc:	f000 80ba 	beq.w	8003a54 <_printf_i+0x19c>
 80038e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038e8:	e03a      	b.n	8003960 <_printf_i+0xa8>
 80038ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038ee:	2b15      	cmp	r3, #21
 80038f0:	d8f6      	bhi.n	80038e0 <_printf_i+0x28>
 80038f2:	a101      	add	r1, pc, #4	@ (adr r1, 80038f8 <_printf_i+0x40>)
 80038f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003965 	.word	0x08003965
 8003900:	080038e1 	.word	0x080038e1
 8003904:	080038e1 	.word	0x080038e1
 8003908:	080038e1 	.word	0x080038e1
 800390c:	080038e1 	.word	0x080038e1
 8003910:	08003965 	.word	0x08003965
 8003914:	080038e1 	.word	0x080038e1
 8003918:	080038e1 	.word	0x080038e1
 800391c:	080038e1 	.word	0x080038e1
 8003920:	080038e1 	.word	0x080038e1
 8003924:	08003a67 	.word	0x08003a67
 8003928:	0800398f 	.word	0x0800398f
 800392c:	08003a21 	.word	0x08003a21
 8003930:	080038e1 	.word	0x080038e1
 8003934:	080038e1 	.word	0x080038e1
 8003938:	08003a89 	.word	0x08003a89
 800393c:	080038e1 	.word	0x080038e1
 8003940:	0800398f 	.word	0x0800398f
 8003944:	080038e1 	.word	0x080038e1
 8003948:	080038e1 	.word	0x080038e1
 800394c:	08003a29 	.word	0x08003a29
 8003950:	6833      	ldr	r3, [r6, #0]
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6032      	str	r2, [r6, #0]
 8003958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800395c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003960:	2301      	movs	r3, #1
 8003962:	e09e      	b.n	8003aa2 <_printf_i+0x1ea>
 8003964:	6833      	ldr	r3, [r6, #0]
 8003966:	6820      	ldr	r0, [r4, #0]
 8003968:	1d19      	adds	r1, r3, #4
 800396a:	6031      	str	r1, [r6, #0]
 800396c:	0606      	lsls	r6, r0, #24
 800396e:	d501      	bpl.n	8003974 <_printf_i+0xbc>
 8003970:	681d      	ldr	r5, [r3, #0]
 8003972:	e003      	b.n	800397c <_printf_i+0xc4>
 8003974:	0645      	lsls	r5, r0, #25
 8003976:	d5fb      	bpl.n	8003970 <_printf_i+0xb8>
 8003978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800397c:	2d00      	cmp	r5, #0
 800397e:	da03      	bge.n	8003988 <_printf_i+0xd0>
 8003980:	232d      	movs	r3, #45	@ 0x2d
 8003982:	426d      	negs	r5, r5
 8003984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003988:	230a      	movs	r3, #10
 800398a:	4859      	ldr	r0, [pc, #356]	@ (8003af0 <_printf_i+0x238>)
 800398c:	e011      	b.n	80039b2 <_printf_i+0xfa>
 800398e:	6821      	ldr	r1, [r4, #0]
 8003990:	6833      	ldr	r3, [r6, #0]
 8003992:	0608      	lsls	r0, r1, #24
 8003994:	f853 5b04 	ldr.w	r5, [r3], #4
 8003998:	d402      	bmi.n	80039a0 <_printf_i+0xe8>
 800399a:	0649      	lsls	r1, r1, #25
 800399c:	bf48      	it	mi
 800399e:	b2ad      	uxthmi	r5, r5
 80039a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039a2:	6033      	str	r3, [r6, #0]
 80039a4:	bf14      	ite	ne
 80039a6:	230a      	movne	r3, #10
 80039a8:	2308      	moveq	r3, #8
 80039aa:	4851      	ldr	r0, [pc, #324]	@ (8003af0 <_printf_i+0x238>)
 80039ac:	2100      	movs	r1, #0
 80039ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039b2:	6866      	ldr	r6, [r4, #4]
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	bfa8      	it	ge
 80039b8:	6821      	ldrge	r1, [r4, #0]
 80039ba:	60a6      	str	r6, [r4, #8]
 80039bc:	bfa4      	itt	ge
 80039be:	f021 0104 	bicge.w	r1, r1, #4
 80039c2:	6021      	strge	r1, [r4, #0]
 80039c4:	b90d      	cbnz	r5, 80039ca <_printf_i+0x112>
 80039c6:	2e00      	cmp	r6, #0
 80039c8:	d04b      	beq.n	8003a62 <_printf_i+0x1aa>
 80039ca:	4616      	mov	r6, r2
 80039cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80039d0:	fb03 5711 	mls	r7, r3, r1, r5
 80039d4:	5dc7      	ldrb	r7, [r0, r7]
 80039d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039da:	462f      	mov	r7, r5
 80039dc:	42bb      	cmp	r3, r7
 80039de:	460d      	mov	r5, r1
 80039e0:	d9f4      	bls.n	80039cc <_printf_i+0x114>
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d10b      	bne.n	80039fe <_printf_i+0x146>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	07df      	lsls	r7, r3, #31
 80039ea:	d508      	bpl.n	80039fe <_printf_i+0x146>
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	6861      	ldr	r1, [r4, #4]
 80039f0:	4299      	cmp	r1, r3
 80039f2:	bfde      	ittt	le
 80039f4:	2330      	movle	r3, #48	@ 0x30
 80039f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039fe:	1b92      	subs	r2, r2, r6
 8003a00:	6122      	str	r2, [r4, #16]
 8003a02:	464b      	mov	r3, r9
 8003a04:	4621      	mov	r1, r4
 8003a06:	4640      	mov	r0, r8
 8003a08:	f8cd a000 	str.w	sl, [sp]
 8003a0c:	aa03      	add	r2, sp, #12
 8003a0e:	f7ff fee1 	bl	80037d4 <_printf_common>
 8003a12:	3001      	adds	r0, #1
 8003a14:	d14a      	bne.n	8003aac <_printf_i+0x1f4>
 8003a16:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1a:	b004      	add	sp, #16
 8003a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	f043 0320 	orr.w	r3, r3, #32
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	2778      	movs	r7, #120	@ 0x78
 8003a2a:	4832      	ldr	r0, [pc, #200]	@ (8003af4 <_printf_i+0x23c>)
 8003a2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	6831      	ldr	r1, [r6, #0]
 8003a34:	061f      	lsls	r7, r3, #24
 8003a36:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a3a:	d402      	bmi.n	8003a42 <_printf_i+0x18a>
 8003a3c:	065f      	lsls	r7, r3, #25
 8003a3e:	bf48      	it	mi
 8003a40:	b2ad      	uxthmi	r5, r5
 8003a42:	6031      	str	r1, [r6, #0]
 8003a44:	07d9      	lsls	r1, r3, #31
 8003a46:	bf44      	itt	mi
 8003a48:	f043 0320 	orrmi.w	r3, r3, #32
 8003a4c:	6023      	strmi	r3, [r4, #0]
 8003a4e:	b11d      	cbz	r5, 8003a58 <_printf_i+0x1a0>
 8003a50:	2310      	movs	r3, #16
 8003a52:	e7ab      	b.n	80039ac <_printf_i+0xf4>
 8003a54:	4826      	ldr	r0, [pc, #152]	@ (8003af0 <_printf_i+0x238>)
 8003a56:	e7e9      	b.n	8003a2c <_printf_i+0x174>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	f023 0320 	bic.w	r3, r3, #32
 8003a5e:	6023      	str	r3, [r4, #0]
 8003a60:	e7f6      	b.n	8003a50 <_printf_i+0x198>
 8003a62:	4616      	mov	r6, r2
 8003a64:	e7bd      	b.n	80039e2 <_printf_i+0x12a>
 8003a66:	6833      	ldr	r3, [r6, #0]
 8003a68:	6825      	ldr	r5, [r4, #0]
 8003a6a:	1d18      	adds	r0, r3, #4
 8003a6c:	6961      	ldr	r1, [r4, #20]
 8003a6e:	6030      	str	r0, [r6, #0]
 8003a70:	062e      	lsls	r6, r5, #24
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	d501      	bpl.n	8003a7a <_printf_i+0x1c2>
 8003a76:	6019      	str	r1, [r3, #0]
 8003a78:	e002      	b.n	8003a80 <_printf_i+0x1c8>
 8003a7a:	0668      	lsls	r0, r5, #25
 8003a7c:	d5fb      	bpl.n	8003a76 <_printf_i+0x1be>
 8003a7e:	8019      	strh	r1, [r3, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	4616      	mov	r6, r2
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	e7bc      	b.n	8003a02 <_printf_i+0x14a>
 8003a88:	6833      	ldr	r3, [r6, #0]
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	6032      	str	r2, [r6, #0]
 8003a90:	681e      	ldr	r6, [r3, #0]
 8003a92:	6862      	ldr	r2, [r4, #4]
 8003a94:	4630      	mov	r0, r6
 8003a96:	f000 fbe4 	bl	8004262 <memchr>
 8003a9a:	b108      	cbz	r0, 8003aa0 <_printf_i+0x1e8>
 8003a9c:	1b80      	subs	r0, r0, r6
 8003a9e:	6060      	str	r0, [r4, #4]
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aaa:	e7aa      	b.n	8003a02 <_printf_i+0x14a>
 8003aac:	4632      	mov	r2, r6
 8003aae:	4649      	mov	r1, r9
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	47d0      	blx	sl
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d0ad      	beq.n	8003a16 <_printf_i+0x15e>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	079b      	lsls	r3, r3, #30
 8003abe:	d413      	bmi.n	8003ae8 <_printf_i+0x230>
 8003ac0:	68e0      	ldr	r0, [r4, #12]
 8003ac2:	9b03      	ldr	r3, [sp, #12]
 8003ac4:	4298      	cmp	r0, r3
 8003ac6:	bfb8      	it	lt
 8003ac8:	4618      	movlt	r0, r3
 8003aca:	e7a6      	b.n	8003a1a <_printf_i+0x162>
 8003acc:	2301      	movs	r3, #1
 8003ace:	4632      	mov	r2, r6
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	47d0      	blx	sl
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d09d      	beq.n	8003a16 <_printf_i+0x15e>
 8003ada:	3501      	adds	r5, #1
 8003adc:	68e3      	ldr	r3, [r4, #12]
 8003ade:	9903      	ldr	r1, [sp, #12]
 8003ae0:	1a5b      	subs	r3, r3, r1
 8003ae2:	42ab      	cmp	r3, r5
 8003ae4:	dcf2      	bgt.n	8003acc <_printf_i+0x214>
 8003ae6:	e7eb      	b.n	8003ac0 <_printf_i+0x208>
 8003ae8:	2500      	movs	r5, #0
 8003aea:	f104 0619 	add.w	r6, r4, #25
 8003aee:	e7f5      	b.n	8003adc <_printf_i+0x224>
 8003af0:	08007952 	.word	0x08007952
 8003af4:	08007963 	.word	0x08007963

08003af8 <_scanf_float>:
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	b087      	sub	sp, #28
 8003afe:	9303      	str	r3, [sp, #12]
 8003b00:	688b      	ldr	r3, [r1, #8]
 8003b02:	4617      	mov	r7, r2
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003b0a:	bf82      	ittt	hi
 8003b0c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003b10:	eb03 0b05 	addhi.w	fp, r3, r5
 8003b14:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003b18:	460a      	mov	r2, r1
 8003b1a:	f04f 0500 	mov.w	r5, #0
 8003b1e:	bf88      	it	hi
 8003b20:	608b      	strhi	r3, [r1, #8]
 8003b22:	680b      	ldr	r3, [r1, #0]
 8003b24:	4680      	mov	r8, r0
 8003b26:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003b2a:	f842 3b1c 	str.w	r3, [r2], #28
 8003b2e:	460c      	mov	r4, r1
 8003b30:	bf98      	it	ls
 8003b32:	f04f 0b00 	movls.w	fp, #0
 8003b36:	4616      	mov	r6, r2
 8003b38:	46aa      	mov	sl, r5
 8003b3a:	46a9      	mov	r9, r5
 8003b3c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b40:	9201      	str	r2, [sp, #4]
 8003b42:	9502      	str	r5, [sp, #8]
 8003b44:	68a2      	ldr	r2, [r4, #8]
 8003b46:	b152      	cbz	r2, 8003b5e <_scanf_float+0x66>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b4e:	d865      	bhi.n	8003c1c <_scanf_float+0x124>
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	d83d      	bhi.n	8003bd0 <_scanf_float+0xd8>
 8003b54:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003b58:	b2c8      	uxtb	r0, r1
 8003b5a:	280e      	cmp	r0, #14
 8003b5c:	d93b      	bls.n	8003bd6 <_scanf_float+0xde>
 8003b5e:	f1b9 0f00 	cmp.w	r9, #0
 8003b62:	d003      	beq.n	8003b6c <_scanf_float+0x74>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b70:	f1ba 0f01 	cmp.w	sl, #1
 8003b74:	f200 8118 	bhi.w	8003da8 <_scanf_float+0x2b0>
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	429e      	cmp	r6, r3
 8003b7c:	f200 8109 	bhi.w	8003d92 <_scanf_float+0x29a>
 8003b80:	2001      	movs	r0, #1
 8003b82:	b007      	add	sp, #28
 8003b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b88:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003b8c:	2a0d      	cmp	r2, #13
 8003b8e:	d8e6      	bhi.n	8003b5e <_scanf_float+0x66>
 8003b90:	a101      	add	r1, pc, #4	@ (adr r1, 8003b98 <_scanf_float+0xa0>)
 8003b92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003cdf 	.word	0x08003cdf
 8003b9c:	08003b5f 	.word	0x08003b5f
 8003ba0:	08003b5f 	.word	0x08003b5f
 8003ba4:	08003b5f 	.word	0x08003b5f
 8003ba8:	08003d3f 	.word	0x08003d3f
 8003bac:	08003d17 	.word	0x08003d17
 8003bb0:	08003b5f 	.word	0x08003b5f
 8003bb4:	08003b5f 	.word	0x08003b5f
 8003bb8:	08003ced 	.word	0x08003ced
 8003bbc:	08003b5f 	.word	0x08003b5f
 8003bc0:	08003b5f 	.word	0x08003b5f
 8003bc4:	08003b5f 	.word	0x08003b5f
 8003bc8:	08003b5f 	.word	0x08003b5f
 8003bcc:	08003ca5 	.word	0x08003ca5
 8003bd0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003bd4:	e7da      	b.n	8003b8c <_scanf_float+0x94>
 8003bd6:	290e      	cmp	r1, #14
 8003bd8:	d8c1      	bhi.n	8003b5e <_scanf_float+0x66>
 8003bda:	a001      	add	r0, pc, #4	@ (adr r0, 8003be0 <_scanf_float+0xe8>)
 8003bdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003be0:	08003c95 	.word	0x08003c95
 8003be4:	08003b5f 	.word	0x08003b5f
 8003be8:	08003c95 	.word	0x08003c95
 8003bec:	08003d2b 	.word	0x08003d2b
 8003bf0:	08003b5f 	.word	0x08003b5f
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c7b 	.word	0x08003c7b
 8003bfc:	08003c7b 	.word	0x08003c7b
 8003c00:	08003c7b 	.word	0x08003c7b
 8003c04:	08003c7b 	.word	0x08003c7b
 8003c08:	08003c7b 	.word	0x08003c7b
 8003c0c:	08003c7b 	.word	0x08003c7b
 8003c10:	08003c7b 	.word	0x08003c7b
 8003c14:	08003c7b 	.word	0x08003c7b
 8003c18:	08003c7b 	.word	0x08003c7b
 8003c1c:	2b6e      	cmp	r3, #110	@ 0x6e
 8003c1e:	d809      	bhi.n	8003c34 <_scanf_float+0x13c>
 8003c20:	2b60      	cmp	r3, #96	@ 0x60
 8003c22:	d8b1      	bhi.n	8003b88 <_scanf_float+0x90>
 8003c24:	2b54      	cmp	r3, #84	@ 0x54
 8003c26:	d07b      	beq.n	8003d20 <_scanf_float+0x228>
 8003c28:	2b59      	cmp	r3, #89	@ 0x59
 8003c2a:	d198      	bne.n	8003b5e <_scanf_float+0x66>
 8003c2c:	2d07      	cmp	r5, #7
 8003c2e:	d196      	bne.n	8003b5e <_scanf_float+0x66>
 8003c30:	2508      	movs	r5, #8
 8003c32:	e02c      	b.n	8003c8e <_scanf_float+0x196>
 8003c34:	2b74      	cmp	r3, #116	@ 0x74
 8003c36:	d073      	beq.n	8003d20 <_scanf_float+0x228>
 8003c38:	2b79      	cmp	r3, #121	@ 0x79
 8003c3a:	e7f6      	b.n	8003c2a <_scanf_float+0x132>
 8003c3c:	6821      	ldr	r1, [r4, #0]
 8003c3e:	05c8      	lsls	r0, r1, #23
 8003c40:	d51b      	bpl.n	8003c7a <_scanf_float+0x182>
 8003c42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003c46:	6021      	str	r1, [r4, #0]
 8003c48:	f109 0901 	add.w	r9, r9, #1
 8003c4c:	f1bb 0f00 	cmp.w	fp, #0
 8003c50:	d003      	beq.n	8003c5a <_scanf_float+0x162>
 8003c52:	3201      	adds	r2, #1
 8003c54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c58:	60a2      	str	r2, [r4, #8]
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60a3      	str	r3, [r4, #8]
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	3301      	adds	r3, #1
 8003c64:	6123      	str	r3, [r4, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	f340 8087 	ble.w	8003d80 <_scanf_float+0x288>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	e764      	b.n	8003b44 <_scanf_float+0x4c>
 8003c7a:	eb1a 0105 	adds.w	r1, sl, r5
 8003c7e:	f47f af6e 	bne.w	8003b5e <_scanf_float+0x66>
 8003c82:	460d      	mov	r5, r1
 8003c84:	468a      	mov	sl, r1
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003c8c:	6022      	str	r2, [r4, #0]
 8003c8e:	f806 3b01 	strb.w	r3, [r6], #1
 8003c92:	e7e2      	b.n	8003c5a <_scanf_float+0x162>
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	0610      	lsls	r0, r2, #24
 8003c98:	f57f af61 	bpl.w	8003b5e <_scanf_float+0x66>
 8003c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ca0:	6022      	str	r2, [r4, #0]
 8003ca2:	e7f4      	b.n	8003c8e <_scanf_float+0x196>
 8003ca4:	f1ba 0f00 	cmp.w	sl, #0
 8003ca8:	d10e      	bne.n	8003cc8 <_scanf_float+0x1d0>
 8003caa:	f1b9 0f00 	cmp.w	r9, #0
 8003cae:	d10e      	bne.n	8003cce <_scanf_float+0x1d6>
 8003cb0:	6822      	ldr	r2, [r4, #0]
 8003cb2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003cb6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003cba:	d108      	bne.n	8003cce <_scanf_float+0x1d6>
 8003cbc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003cc0:	f04f 0a01 	mov.w	sl, #1
 8003cc4:	6022      	str	r2, [r4, #0]
 8003cc6:	e7e2      	b.n	8003c8e <_scanf_float+0x196>
 8003cc8:	f1ba 0f02 	cmp.w	sl, #2
 8003ccc:	d055      	beq.n	8003d7a <_scanf_float+0x282>
 8003cce:	2d01      	cmp	r5, #1
 8003cd0:	d002      	beq.n	8003cd8 <_scanf_float+0x1e0>
 8003cd2:	2d04      	cmp	r5, #4
 8003cd4:	f47f af43 	bne.w	8003b5e <_scanf_float+0x66>
 8003cd8:	3501      	adds	r5, #1
 8003cda:	b2ed      	uxtb	r5, r5
 8003cdc:	e7d7      	b.n	8003c8e <_scanf_float+0x196>
 8003cde:	f1ba 0f01 	cmp.w	sl, #1
 8003ce2:	f47f af3c 	bne.w	8003b5e <_scanf_float+0x66>
 8003ce6:	f04f 0a02 	mov.w	sl, #2
 8003cea:	e7d0      	b.n	8003c8e <_scanf_float+0x196>
 8003cec:	b97d      	cbnz	r5, 8003d0e <_scanf_float+0x216>
 8003cee:	f1b9 0f00 	cmp.w	r9, #0
 8003cf2:	f47f af37 	bne.w	8003b64 <_scanf_float+0x6c>
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003cfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003d00:	f040 8103 	bne.w	8003f0a <_scanf_float+0x412>
 8003d04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d08:	2501      	movs	r5, #1
 8003d0a:	6022      	str	r2, [r4, #0]
 8003d0c:	e7bf      	b.n	8003c8e <_scanf_float+0x196>
 8003d0e:	2d03      	cmp	r5, #3
 8003d10:	d0e2      	beq.n	8003cd8 <_scanf_float+0x1e0>
 8003d12:	2d05      	cmp	r5, #5
 8003d14:	e7de      	b.n	8003cd4 <_scanf_float+0x1dc>
 8003d16:	2d02      	cmp	r5, #2
 8003d18:	f47f af21 	bne.w	8003b5e <_scanf_float+0x66>
 8003d1c:	2503      	movs	r5, #3
 8003d1e:	e7b6      	b.n	8003c8e <_scanf_float+0x196>
 8003d20:	2d06      	cmp	r5, #6
 8003d22:	f47f af1c 	bne.w	8003b5e <_scanf_float+0x66>
 8003d26:	2507      	movs	r5, #7
 8003d28:	e7b1      	b.n	8003c8e <_scanf_float+0x196>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	0591      	lsls	r1, r2, #22
 8003d2e:	f57f af16 	bpl.w	8003b5e <_scanf_float+0x66>
 8003d32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003d36:	6022      	str	r2, [r4, #0]
 8003d38:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d3c:	e7a7      	b.n	8003c8e <_scanf_float+0x196>
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003d44:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003d48:	d006      	beq.n	8003d58 <_scanf_float+0x260>
 8003d4a:	0550      	lsls	r0, r2, #21
 8003d4c:	f57f af07 	bpl.w	8003b5e <_scanf_float+0x66>
 8003d50:	f1b9 0f00 	cmp.w	r9, #0
 8003d54:	f000 80d9 	beq.w	8003f0a <_scanf_float+0x412>
 8003d58:	0591      	lsls	r1, r2, #22
 8003d5a:	bf58      	it	pl
 8003d5c:	9902      	ldrpl	r1, [sp, #8]
 8003d5e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d62:	bf58      	it	pl
 8003d64:	eba9 0101 	subpl.w	r1, r9, r1
 8003d68:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003d6c:	f04f 0900 	mov.w	r9, #0
 8003d70:	bf58      	it	pl
 8003d72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d76:	6022      	str	r2, [r4, #0]
 8003d78:	e789      	b.n	8003c8e <_scanf_float+0x196>
 8003d7a:	f04f 0a03 	mov.w	sl, #3
 8003d7e:	e786      	b.n	8003c8e <_scanf_float+0x196>
 8003d80:	4639      	mov	r1, r7
 8003d82:	4640      	mov	r0, r8
 8003d84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003d88:	4798      	blx	r3
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	f43f aeda 	beq.w	8003b44 <_scanf_float+0x4c>
 8003d90:	e6e5      	b.n	8003b5e <_scanf_float+0x66>
 8003d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d96:	463a      	mov	r2, r7
 8003d98:	4640      	mov	r0, r8
 8003d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d9e:	4798      	blx	r3
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	e6e7      	b.n	8003b78 <_scanf_float+0x80>
 8003da8:	1e6b      	subs	r3, r5, #1
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d824      	bhi.n	8003df8 <_scanf_float+0x300>
 8003dae:	2d02      	cmp	r5, #2
 8003db0:	d836      	bhi.n	8003e20 <_scanf_float+0x328>
 8003db2:	9b01      	ldr	r3, [sp, #4]
 8003db4:	429e      	cmp	r6, r3
 8003db6:	f67f aee3 	bls.w	8003b80 <_scanf_float+0x88>
 8003dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dbe:	463a      	mov	r2, r7
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dc6:	4798      	blx	r3
 8003dc8:	6923      	ldr	r3, [r4, #16]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	e7f0      	b.n	8003db2 <_scanf_float+0x2ba>
 8003dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dd4:	463a      	mov	r2, r7
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003ddc:	4798      	blx	r3
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003de8:	fa5f fa8a 	uxtb.w	sl, sl
 8003dec:	f1ba 0f02 	cmp.w	sl, #2
 8003df0:	d1ee      	bne.n	8003dd0 <_scanf_float+0x2d8>
 8003df2:	3d03      	subs	r5, #3
 8003df4:	b2ed      	uxtb	r5, r5
 8003df6:	1b76      	subs	r6, r6, r5
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	05da      	lsls	r2, r3, #23
 8003dfc:	d530      	bpl.n	8003e60 <_scanf_float+0x368>
 8003dfe:	055b      	lsls	r3, r3, #21
 8003e00:	d511      	bpl.n	8003e26 <_scanf_float+0x32e>
 8003e02:	9b01      	ldr	r3, [sp, #4]
 8003e04:	429e      	cmp	r6, r3
 8003e06:	f67f aebb 	bls.w	8003b80 <_scanf_float+0x88>
 8003e0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e0e:	463a      	mov	r2, r7
 8003e10:	4640      	mov	r0, r8
 8003e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e16:	4798      	blx	r3
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6123      	str	r3, [r4, #16]
 8003e1e:	e7f0      	b.n	8003e02 <_scanf_float+0x30a>
 8003e20:	46aa      	mov	sl, r5
 8003e22:	46b3      	mov	fp, r6
 8003e24:	e7de      	b.n	8003de4 <_scanf_float+0x2ec>
 8003e26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e2a:	6923      	ldr	r3, [r4, #16]
 8003e2c:	2965      	cmp	r1, #101	@ 0x65
 8003e2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e32:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e36:	6123      	str	r3, [r4, #16]
 8003e38:	d00c      	beq.n	8003e54 <_scanf_float+0x35c>
 8003e3a:	2945      	cmp	r1, #69	@ 0x45
 8003e3c:	d00a      	beq.n	8003e54 <_scanf_float+0x35c>
 8003e3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e42:	463a      	mov	r2, r7
 8003e44:	4640      	mov	r0, r8
 8003e46:	4798      	blx	r3
 8003e48:	6923      	ldr	r3, [r4, #16]
 8003e4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	1eb5      	subs	r5, r6, #2
 8003e52:	6123      	str	r3, [r4, #16]
 8003e54:	463a      	mov	r2, r7
 8003e56:	4640      	mov	r0, r8
 8003e58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e5c:	4798      	blx	r3
 8003e5e:	462e      	mov	r6, r5
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	f012 0210 	ands.w	r2, r2, #16
 8003e66:	d001      	beq.n	8003e6c <_scanf_float+0x374>
 8003e68:	2000      	movs	r0, #0
 8003e6a:	e68a      	b.n	8003b82 <_scanf_float+0x8a>
 8003e6c:	7032      	strb	r2, [r6, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e78:	d11c      	bne.n	8003eb4 <_scanf_float+0x3bc>
 8003e7a:	9b02      	ldr	r3, [sp, #8]
 8003e7c:	454b      	cmp	r3, r9
 8003e7e:	eba3 0209 	sub.w	r2, r3, r9
 8003e82:	d123      	bne.n	8003ecc <_scanf_float+0x3d4>
 8003e84:	2200      	movs	r2, #0
 8003e86:	4640      	mov	r0, r8
 8003e88:	9901      	ldr	r1, [sp, #4]
 8003e8a:	f002 fbed 	bl	8006668 <_strtod_r>
 8003e8e:	9b03      	ldr	r3, [sp, #12]
 8003e90:	6825      	ldr	r5, [r4, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f015 0f02 	tst.w	r5, #2
 8003e98:	4606      	mov	r6, r0
 8003e9a:	460f      	mov	r7, r1
 8003e9c:	f103 0204 	add.w	r2, r3, #4
 8003ea0:	d01f      	beq.n	8003ee2 <_scanf_float+0x3ea>
 8003ea2:	9903      	ldr	r1, [sp, #12]
 8003ea4:	600a      	str	r2, [r1, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	e9c3 6700 	strd	r6, r7, [r3]
 8003eac:	68e3      	ldr	r3, [r4, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60e3      	str	r3, [r4, #12]
 8003eb2:	e7d9      	b.n	8003e68 <_scanf_float+0x370>
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0e4      	beq.n	8003e84 <_scanf_float+0x38c>
 8003eba:	9905      	ldr	r1, [sp, #20]
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	3101      	adds	r1, #1
 8003ec2:	f002 fc51 	bl	8006768 <_strtol_r>
 8003ec6:	9b04      	ldr	r3, [sp, #16]
 8003ec8:	9e05      	ldr	r6, [sp, #20]
 8003eca:	1ac2      	subs	r2, r0, r3
 8003ecc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003ed0:	429e      	cmp	r6, r3
 8003ed2:	bf28      	it	cs
 8003ed4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003ed8:	4630      	mov	r0, r6
 8003eda:	490d      	ldr	r1, [pc, #52]	@ (8003f10 <_scanf_float+0x418>)
 8003edc:	f000 f8de 	bl	800409c <siprintf>
 8003ee0:	e7d0      	b.n	8003e84 <_scanf_float+0x38c>
 8003ee2:	076d      	lsls	r5, r5, #29
 8003ee4:	d4dd      	bmi.n	8003ea2 <_scanf_float+0x3aa>
 8003ee6:	9d03      	ldr	r5, [sp, #12]
 8003ee8:	602a      	str	r2, [r5, #0]
 8003eea:	681d      	ldr	r5, [r3, #0]
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	f7fc fda4 	bl	8000a3c <__aeabi_dcmpun>
 8003ef4:	b120      	cbz	r0, 8003f00 <_scanf_float+0x408>
 8003ef6:	4807      	ldr	r0, [pc, #28]	@ (8003f14 <_scanf_float+0x41c>)
 8003ef8:	f000 f9c2 	bl	8004280 <nanf>
 8003efc:	6028      	str	r0, [r5, #0]
 8003efe:	e7d5      	b.n	8003eac <_scanf_float+0x3b4>
 8003f00:	4630      	mov	r0, r6
 8003f02:	4639      	mov	r1, r7
 8003f04:	f7fc fdf8 	bl	8000af8 <__aeabi_d2f>
 8003f08:	e7f8      	b.n	8003efc <_scanf_float+0x404>
 8003f0a:	f04f 0900 	mov.w	r9, #0
 8003f0e:	e62d      	b.n	8003b6c <_scanf_float+0x74>
 8003f10:	08007974 	.word	0x08007974
 8003f14:	08007d0d 	.word	0x08007d0d

08003f18 <std>:
 8003f18:	2300      	movs	r3, #0
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f26:	6083      	str	r3, [r0, #8]
 8003f28:	8181      	strh	r1, [r0, #12]
 8003f2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f2c:	81c2      	strh	r2, [r0, #14]
 8003f2e:	6183      	str	r3, [r0, #24]
 8003f30:	4619      	mov	r1, r3
 8003f32:	2208      	movs	r2, #8
 8003f34:	305c      	adds	r0, #92	@ 0x5c
 8003f36:	f000 f914 	bl	8004162 <memset>
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <std+0x58>)
 8003f3c:	6224      	str	r4, [r4, #32]
 8003f3e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <std+0x5c>)
 8003f42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <std+0x60>)
 8003f46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f48:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <std+0x64>)
 8003f4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <std+0x68>)
 8003f4e:	429c      	cmp	r4, r3
 8003f50:	d006      	beq.n	8003f60 <std+0x48>
 8003f52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f56:	4294      	cmp	r4, r2
 8003f58:	d002      	beq.n	8003f60 <std+0x48>
 8003f5a:	33d0      	adds	r3, #208	@ 0xd0
 8003f5c:	429c      	cmp	r4, r3
 8003f5e:	d105      	bne.n	8003f6c <std+0x54>
 8003f60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f68:	f000 b978 	b.w	800425c <__retarget_lock_init_recursive>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	bf00      	nop
 8003f70:	080040dd 	.word	0x080040dd
 8003f74:	080040ff 	.word	0x080040ff
 8003f78:	08004137 	.word	0x08004137
 8003f7c:	0800415b 	.word	0x0800415b
 8003f80:	20000288 	.word	0x20000288

08003f84 <stdio_exit_handler>:
 8003f84:	4a02      	ldr	r2, [pc, #8]	@ (8003f90 <stdio_exit_handler+0xc>)
 8003f86:	4903      	ldr	r1, [pc, #12]	@ (8003f94 <stdio_exit_handler+0x10>)
 8003f88:	4803      	ldr	r0, [pc, #12]	@ (8003f98 <stdio_exit_handler+0x14>)
 8003f8a:	f000 b869 	b.w	8004060 <_fwalk_sglue>
 8003f8e:	bf00      	nop
 8003f90:	2000000c 	.word	0x2000000c
 8003f94:	08006b1d 	.word	0x08006b1d
 8003f98:	2000001c 	.word	0x2000001c

08003f9c <cleanup_stdio>:
 8003f9c:	6841      	ldr	r1, [r0, #4]
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <cleanup_stdio+0x34>)
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	d001      	beq.n	8003fac <cleanup_stdio+0x10>
 8003fa8:	f002 fdb8 	bl	8006b1c <_fflush_r>
 8003fac:	68a1      	ldr	r1, [r4, #8]
 8003fae:	4b09      	ldr	r3, [pc, #36]	@ (8003fd4 <cleanup_stdio+0x38>)
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	d002      	beq.n	8003fba <cleanup_stdio+0x1e>
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f002 fdb1 	bl	8006b1c <_fflush_r>
 8003fba:	68e1      	ldr	r1, [r4, #12]
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <cleanup_stdio+0x3c>)
 8003fbe:	4299      	cmp	r1, r3
 8003fc0:	d004      	beq.n	8003fcc <cleanup_stdio+0x30>
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc8:	f002 bda8 	b.w	8006b1c <_fflush_r>
 8003fcc:	bd10      	pop	{r4, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000288 	.word	0x20000288
 8003fd4:	200002f0 	.word	0x200002f0
 8003fd8:	20000358 	.word	0x20000358

08003fdc <global_stdio_init.part.0>:
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <global_stdio_init.part.0+0x30>)
 8003fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8004010 <global_stdio_init.part.0+0x34>)
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8004014 <global_stdio_init.part.0+0x38>)
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	2104      	movs	r1, #4
 8003fea:	2200      	movs	r2, #0
 8003fec:	f7ff ff94 	bl	8003f18 <std>
 8003ff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2109      	movs	r1, #9
 8003ff8:	f7ff ff8e 	bl	8003f18 <std>
 8003ffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004000:	2202      	movs	r2, #2
 8004002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004006:	2112      	movs	r1, #18
 8004008:	f7ff bf86 	b.w	8003f18 <std>
 800400c:	200003c0 	.word	0x200003c0
 8004010:	20000288 	.word	0x20000288
 8004014:	08003f85 	.word	0x08003f85

08004018 <__sfp_lock_acquire>:
 8004018:	4801      	ldr	r0, [pc, #4]	@ (8004020 <__sfp_lock_acquire+0x8>)
 800401a:	f000 b920 	b.w	800425e <__retarget_lock_acquire_recursive>
 800401e:	bf00      	nop
 8004020:	200003c9 	.word	0x200003c9

08004024 <__sfp_lock_release>:
 8004024:	4801      	ldr	r0, [pc, #4]	@ (800402c <__sfp_lock_release+0x8>)
 8004026:	f000 b91b 	b.w	8004260 <__retarget_lock_release_recursive>
 800402a:	bf00      	nop
 800402c:	200003c9 	.word	0x200003c9

08004030 <__sinit>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4604      	mov	r4, r0
 8004034:	f7ff fff0 	bl	8004018 <__sfp_lock_acquire>
 8004038:	6a23      	ldr	r3, [r4, #32]
 800403a:	b11b      	cbz	r3, 8004044 <__sinit+0x14>
 800403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004040:	f7ff bff0 	b.w	8004024 <__sfp_lock_release>
 8004044:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <__sinit+0x28>)
 8004046:	6223      	str	r3, [r4, #32]
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <__sinit+0x2c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f5      	bne.n	800403c <__sinit+0xc>
 8004050:	f7ff ffc4 	bl	8003fdc <global_stdio_init.part.0>
 8004054:	e7f2      	b.n	800403c <__sinit+0xc>
 8004056:	bf00      	nop
 8004058:	08003f9d 	.word	0x08003f9d
 800405c:	200003c0 	.word	0x200003c0

08004060 <_fwalk_sglue>:
 8004060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004064:	4607      	mov	r7, r0
 8004066:	4688      	mov	r8, r1
 8004068:	4614      	mov	r4, r2
 800406a:	2600      	movs	r6, #0
 800406c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004070:	f1b9 0901 	subs.w	r9, r9, #1
 8004074:	d505      	bpl.n	8004082 <_fwalk_sglue+0x22>
 8004076:	6824      	ldr	r4, [r4, #0]
 8004078:	2c00      	cmp	r4, #0
 800407a:	d1f7      	bne.n	800406c <_fwalk_sglue+0xc>
 800407c:	4630      	mov	r0, r6
 800407e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004082:	89ab      	ldrh	r3, [r5, #12]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d907      	bls.n	8004098 <_fwalk_sglue+0x38>
 8004088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800408c:	3301      	adds	r3, #1
 800408e:	d003      	beq.n	8004098 <_fwalk_sglue+0x38>
 8004090:	4629      	mov	r1, r5
 8004092:	4638      	mov	r0, r7
 8004094:	47c0      	blx	r8
 8004096:	4306      	orrs	r6, r0
 8004098:	3568      	adds	r5, #104	@ 0x68
 800409a:	e7e9      	b.n	8004070 <_fwalk_sglue+0x10>

0800409c <siprintf>:
 800409c:	b40e      	push	{r1, r2, r3}
 800409e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040a2:	b500      	push	{lr}
 80040a4:	b09c      	sub	sp, #112	@ 0x70
 80040a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80040a8:	9002      	str	r0, [sp, #8]
 80040aa:	9006      	str	r0, [sp, #24]
 80040ac:	9107      	str	r1, [sp, #28]
 80040ae:	9104      	str	r1, [sp, #16]
 80040b0:	4808      	ldr	r0, [pc, #32]	@ (80040d4 <siprintf+0x38>)
 80040b2:	4909      	ldr	r1, [pc, #36]	@ (80040d8 <siprintf+0x3c>)
 80040b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b8:	9105      	str	r1, [sp, #20]
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	a902      	add	r1, sp, #8
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	f002 fbb0 	bl	8006824 <_svfiprintf_r>
 80040c4:	2200      	movs	r2, #0
 80040c6:	9b02      	ldr	r3, [sp, #8]
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	b01c      	add	sp, #112	@ 0x70
 80040cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d0:	b003      	add	sp, #12
 80040d2:	4770      	bx	lr
 80040d4:	20000018 	.word	0x20000018
 80040d8:	ffff0208 	.word	0xffff0208

080040dc <__sread>:
 80040dc:	b510      	push	{r4, lr}
 80040de:	460c      	mov	r4, r1
 80040e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e4:	f000 f86c 	bl	80041c0 <_read_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	bfab      	itete	ge
 80040ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040ee:	89a3      	ldrhlt	r3, [r4, #12]
 80040f0:	181b      	addge	r3, r3, r0
 80040f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040f6:	bfac      	ite	ge
 80040f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040fa:	81a3      	strhlt	r3, [r4, #12]
 80040fc:	bd10      	pop	{r4, pc}

080040fe <__swrite>:
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	461f      	mov	r7, r3
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	4605      	mov	r5, r0
 8004108:	05db      	lsls	r3, r3, #23
 800410a:	460c      	mov	r4, r1
 800410c:	4616      	mov	r6, r2
 800410e:	d505      	bpl.n	800411c <__swrite+0x1e>
 8004110:	2302      	movs	r3, #2
 8004112:	2200      	movs	r2, #0
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f840 	bl	800419c <_lseek_r>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	4632      	mov	r2, r6
 8004120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	4628      	mov	r0, r5
 8004128:	463b      	mov	r3, r7
 800412a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	f000 b857 	b.w	80041e4 <_write_r>

08004136 <__sseek>:
 8004136:	b510      	push	{r4, lr}
 8004138:	460c      	mov	r4, r1
 800413a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413e:	f000 f82d 	bl	800419c <_lseek_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	bf15      	itete	ne
 8004148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800414a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800414e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004152:	81a3      	strheq	r3, [r4, #12]
 8004154:	bf18      	it	ne
 8004156:	81a3      	strhne	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__sclose>:
 800415a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800415e:	f000 b80d 	b.w	800417c <_close_r>

08004162 <memset>:
 8004162:	4603      	mov	r3, r0
 8004164:	4402      	add	r2, r0
 8004166:	4293      	cmp	r3, r2
 8004168:	d100      	bne.n	800416c <memset+0xa>
 800416a:	4770      	bx	lr
 800416c:	f803 1b01 	strb.w	r1, [r3], #1
 8004170:	e7f9      	b.n	8004166 <memset+0x4>
	...

08004174 <_localeconv_r>:
 8004174:	4800      	ldr	r0, [pc, #0]	@ (8004178 <_localeconv_r+0x4>)
 8004176:	4770      	bx	lr
 8004178:	20000158 	.word	0x20000158

0800417c <_close_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	2300      	movs	r3, #0
 8004180:	4d05      	ldr	r5, [pc, #20]	@ (8004198 <_close_r+0x1c>)
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fd f8cf 	bl	800132a <_close>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_close_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_close_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	200003c4 	.word	0x200003c4

0800419c <_lseek_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4604      	mov	r4, r0
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	2200      	movs	r2, #0
 80041a6:	4d05      	ldr	r5, [pc, #20]	@ (80041bc <_lseek_r+0x20>)
 80041a8:	602a      	str	r2, [r5, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f7fd f8e1 	bl	8001372 <_lseek>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d102      	bne.n	80041ba <_lseek_r+0x1e>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	b103      	cbz	r3, 80041ba <_lseek_r+0x1e>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	200003c4 	.word	0x200003c4

080041c0 <_read_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4604      	mov	r4, r0
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	2200      	movs	r2, #0
 80041ca:	4d05      	ldr	r5, [pc, #20]	@ (80041e0 <_read_r+0x20>)
 80041cc:	602a      	str	r2, [r5, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7fd f872 	bl	80012b8 <_read>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_read_r+0x1e>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b103      	cbz	r3, 80041de <_read_r+0x1e>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	200003c4 	.word	0x200003c4

080041e4 <_write_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	2200      	movs	r2, #0
 80041ee:	4d05      	ldr	r5, [pc, #20]	@ (8004204 <_write_r+0x20>)
 80041f0:	602a      	str	r2, [r5, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f7fd f87d 	bl	80012f2 <_write>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d102      	bne.n	8004202 <_write_r+0x1e>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	b103      	cbz	r3, 8004202 <_write_r+0x1e>
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	200003c4 	.word	0x200003c4

08004208 <__errno>:
 8004208:	4b01      	ldr	r3, [pc, #4]	@ (8004210 <__errno+0x8>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000018 	.word	0x20000018

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	2600      	movs	r6, #0
 8004218:	4d0c      	ldr	r5, [pc, #48]	@ (800424c <__libc_init_array+0x38>)
 800421a:	4c0d      	ldr	r4, [pc, #52]	@ (8004250 <__libc_init_array+0x3c>)
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	42a6      	cmp	r6, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	f003 fb66 	bl	80078f4 <_init>
 8004228:	2600      	movs	r6, #0
 800422a:	4d0a      	ldr	r5, [pc, #40]	@ (8004254 <__libc_init_array+0x40>)
 800422c:	4c0a      	ldr	r4, [pc, #40]	@ (8004258 <__libc_init_array+0x44>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	42a6      	cmp	r6, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	f855 3b04 	ldr.w	r3, [r5], #4
 800423c:	4798      	blx	r3
 800423e:	3601      	adds	r6, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	f855 3b04 	ldr.w	r3, [r5], #4
 8004246:	4798      	blx	r3
 8004248:	3601      	adds	r6, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	08007d78 	.word	0x08007d78
 8004250:	08007d78 	.word	0x08007d78
 8004254:	08007d78 	.word	0x08007d78
 8004258:	08007d7c 	.word	0x08007d7c

0800425c <__retarget_lock_init_recursive>:
 800425c:	4770      	bx	lr

0800425e <__retarget_lock_acquire_recursive>:
 800425e:	4770      	bx	lr

08004260 <__retarget_lock_release_recursive>:
 8004260:	4770      	bx	lr

08004262 <memchr>:
 8004262:	4603      	mov	r3, r0
 8004264:	b510      	push	{r4, lr}
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	4402      	add	r2, r0
 800426a:	4293      	cmp	r3, r2
 800426c:	4618      	mov	r0, r3
 800426e:	d101      	bne.n	8004274 <memchr+0x12>
 8004270:	2000      	movs	r0, #0
 8004272:	e003      	b.n	800427c <memchr+0x1a>
 8004274:	7804      	ldrb	r4, [r0, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	428c      	cmp	r4, r1
 800427a:	d1f6      	bne.n	800426a <memchr+0x8>
 800427c:	bd10      	pop	{r4, pc}
	...

08004280 <nanf>:
 8004280:	4800      	ldr	r0, [pc, #0]	@ (8004284 <nanf+0x4>)
 8004282:	4770      	bx	lr
 8004284:	7fc00000 	.word	0x7fc00000

08004288 <quorem>:
 8004288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	6903      	ldr	r3, [r0, #16]
 800428e:	690c      	ldr	r4, [r1, #16]
 8004290:	4607      	mov	r7, r0
 8004292:	42a3      	cmp	r3, r4
 8004294:	db7e      	blt.n	8004394 <quorem+0x10c>
 8004296:	3c01      	subs	r4, #1
 8004298:	00a3      	lsls	r3, r4, #2
 800429a:	f100 0514 	add.w	r5, r0, #20
 800429e:	f101 0814 	add.w	r8, r1, #20
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042b2:	3301      	adds	r3, #1
 80042b4:	429a      	cmp	r2, r3
 80042b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80042ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042be:	d32e      	bcc.n	800431e <quorem+0x96>
 80042c0:	f04f 0a00 	mov.w	sl, #0
 80042c4:	46c4      	mov	ip, r8
 80042c6:	46ae      	mov	lr, r5
 80042c8:	46d3      	mov	fp, sl
 80042ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80042ce:	b298      	uxth	r0, r3
 80042d0:	fb06 a000 	mla	r0, r6, r0, sl
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	0c02      	lsrs	r2, r0, #16
 80042d8:	fb06 2303 	mla	r3, r6, r3, r2
 80042dc:	f8de 2000 	ldr.w	r2, [lr]
 80042e0:	b280      	uxth	r0, r0
 80042e2:	b292      	uxth	r2, r2
 80042e4:	1a12      	subs	r2, r2, r0
 80042e6:	445a      	add	r2, fp
 80042e8:	f8de 0000 	ldr.w	r0, [lr]
 80042ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80042f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80042fa:	b292      	uxth	r2, r2
 80042fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004300:	45e1      	cmp	r9, ip
 8004302:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004306:	f84e 2b04 	str.w	r2, [lr], #4
 800430a:	d2de      	bcs.n	80042ca <quorem+0x42>
 800430c:	9b00      	ldr	r3, [sp, #0]
 800430e:	58eb      	ldr	r3, [r5, r3]
 8004310:	b92b      	cbnz	r3, 800431e <quorem+0x96>
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	3b04      	subs	r3, #4
 8004316:	429d      	cmp	r5, r3
 8004318:	461a      	mov	r2, r3
 800431a:	d32f      	bcc.n	800437c <quorem+0xf4>
 800431c:	613c      	str	r4, [r7, #16]
 800431e:	4638      	mov	r0, r7
 8004320:	f001 f9c2 	bl	80056a8 <__mcmp>
 8004324:	2800      	cmp	r0, #0
 8004326:	db25      	blt.n	8004374 <quorem+0xec>
 8004328:	4629      	mov	r1, r5
 800432a:	2000      	movs	r0, #0
 800432c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004330:	f8d1 c000 	ldr.w	ip, [r1]
 8004334:	fa1f fe82 	uxth.w	lr, r2
 8004338:	fa1f f38c 	uxth.w	r3, ip
 800433c:	eba3 030e 	sub.w	r3, r3, lr
 8004340:	4403      	add	r3, r0
 8004342:	0c12      	lsrs	r2, r2, #16
 8004344:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004348:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800434c:	b29b      	uxth	r3, r3
 800434e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004352:	45c1      	cmp	r9, r8
 8004354:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004358:	f841 3b04 	str.w	r3, [r1], #4
 800435c:	d2e6      	bcs.n	800432c <quorem+0xa4>
 800435e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004366:	b922      	cbnz	r2, 8004372 <quorem+0xea>
 8004368:	3b04      	subs	r3, #4
 800436a:	429d      	cmp	r5, r3
 800436c:	461a      	mov	r2, r3
 800436e:	d30b      	bcc.n	8004388 <quorem+0x100>
 8004370:	613c      	str	r4, [r7, #16]
 8004372:	3601      	adds	r6, #1
 8004374:	4630      	mov	r0, r6
 8004376:	b003      	add	sp, #12
 8004378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	3b04      	subs	r3, #4
 8004380:	2a00      	cmp	r2, #0
 8004382:	d1cb      	bne.n	800431c <quorem+0x94>
 8004384:	3c01      	subs	r4, #1
 8004386:	e7c6      	b.n	8004316 <quorem+0x8e>
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	3b04      	subs	r3, #4
 800438c:	2a00      	cmp	r2, #0
 800438e:	d1ef      	bne.n	8004370 <quorem+0xe8>
 8004390:	3c01      	subs	r4, #1
 8004392:	e7ea      	b.n	800436a <quorem+0xe2>
 8004394:	2000      	movs	r0, #0
 8004396:	e7ee      	b.n	8004376 <quorem+0xee>

08004398 <_dtoa_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	4614      	mov	r4, r2
 800439e:	461d      	mov	r5, r3
 80043a0:	69c7      	ldr	r7, [r0, #28]
 80043a2:	b097      	sub	sp, #92	@ 0x5c
 80043a4:	4683      	mov	fp, r0
 80043a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80043aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80043ac:	b97f      	cbnz	r7, 80043ce <_dtoa_r+0x36>
 80043ae:	2010      	movs	r0, #16
 80043b0:	f000 fe02 	bl	8004fb8 <malloc>
 80043b4:	4602      	mov	r2, r0
 80043b6:	f8cb 001c 	str.w	r0, [fp, #28]
 80043ba:	b920      	cbnz	r0, 80043c6 <_dtoa_r+0x2e>
 80043bc:	21ef      	movs	r1, #239	@ 0xef
 80043be:	4ba8      	ldr	r3, [pc, #672]	@ (8004660 <_dtoa_r+0x2c8>)
 80043c0:	48a8      	ldr	r0, [pc, #672]	@ (8004664 <_dtoa_r+0x2cc>)
 80043c2:	f002 fc23 	bl	8006c0c <__assert_func>
 80043c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80043ca:	6007      	str	r7, [r0, #0]
 80043cc:	60c7      	str	r7, [r0, #12]
 80043ce:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	b159      	cbz	r1, 80043ee <_dtoa_r+0x56>
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	2301      	movs	r3, #1
 80043da:	4093      	lsls	r3, r2
 80043dc:	604a      	str	r2, [r1, #4]
 80043de:	608b      	str	r3, [r1, #8]
 80043e0:	4658      	mov	r0, fp
 80043e2:	f000 fedf 	bl	80051a4 <_Bfree>
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	1e2b      	subs	r3, r5, #0
 80043f0:	bfaf      	iteee	ge
 80043f2:	2300      	movge	r3, #0
 80043f4:	2201      	movlt	r2, #1
 80043f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80043fa:	9303      	strlt	r3, [sp, #12]
 80043fc:	bfa8      	it	ge
 80043fe:	6033      	strge	r3, [r6, #0]
 8004400:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004404:	4b98      	ldr	r3, [pc, #608]	@ (8004668 <_dtoa_r+0x2d0>)
 8004406:	bfb8      	it	lt
 8004408:	6032      	strlt	r2, [r6, #0]
 800440a:	ea33 0308 	bics.w	r3, r3, r8
 800440e:	d112      	bne.n	8004436 <_dtoa_r+0x9e>
 8004410:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004414:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800441c:	4323      	orrs	r3, r4
 800441e:	f000 8550 	beq.w	8004ec2 <_dtoa_r+0xb2a>
 8004422:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004424:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800466c <_dtoa_r+0x2d4>
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8552 	beq.w	8004ed2 <_dtoa_r+0xb3a>
 800442e:	f10a 0303 	add.w	r3, sl, #3
 8004432:	f000 bd4c 	b.w	8004ece <_dtoa_r+0xb36>
 8004436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800443a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800443e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	f7fc fac7 	bl	80009d8 <__aeabi_dcmpeq>
 800444a:	4607      	mov	r7, r0
 800444c:	b158      	cbz	r0, 8004466 <_dtoa_r+0xce>
 800444e:	2301      	movs	r3, #1
 8004450:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004456:	b113      	cbz	r3, 800445e <_dtoa_r+0xc6>
 8004458:	4b85      	ldr	r3, [pc, #532]	@ (8004670 <_dtoa_r+0x2d8>)
 800445a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004674 <_dtoa_r+0x2dc>
 8004462:	f000 bd36 	b.w	8004ed2 <_dtoa_r+0xb3a>
 8004466:	ab14      	add	r3, sp, #80	@ 0x50
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	ab15      	add	r3, sp, #84	@ 0x54
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4658      	mov	r0, fp
 8004470:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004474:	f001 fa30 	bl	80058d8 <__d2b>
 8004478:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800447c:	4681      	mov	r9, r0
 800447e:	2e00      	cmp	r6, #0
 8004480:	d077      	beq.n	8004572 <_dtoa_r+0x1da>
 8004482:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004488:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800448c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004490:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004494:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004498:	9712      	str	r7, [sp, #72]	@ 0x48
 800449a:	4619      	mov	r1, r3
 800449c:	2200      	movs	r2, #0
 800449e:	4b76      	ldr	r3, [pc, #472]	@ (8004678 <_dtoa_r+0x2e0>)
 80044a0:	f7fb fe7a 	bl	8000198 <__aeabi_dsub>
 80044a4:	a368      	add	r3, pc, #416	@ (adr r3, 8004648 <_dtoa_r+0x2b0>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f7fc f82d 	bl	8000508 <__aeabi_dmul>
 80044ae:	a368      	add	r3, pc, #416	@ (adr r3, 8004650 <_dtoa_r+0x2b8>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f7fb fe72 	bl	800019c <__adddf3>
 80044b8:	4604      	mov	r4, r0
 80044ba:	4630      	mov	r0, r6
 80044bc:	460d      	mov	r5, r1
 80044be:	f7fb ffb9 	bl	8000434 <__aeabi_i2d>
 80044c2:	a365      	add	r3, pc, #404	@ (adr r3, 8004658 <_dtoa_r+0x2c0>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fc f81e 	bl	8000508 <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4620      	mov	r0, r4
 80044d2:	4629      	mov	r1, r5
 80044d4:	f7fb fe62 	bl	800019c <__adddf3>
 80044d8:	4604      	mov	r4, r0
 80044da:	460d      	mov	r5, r1
 80044dc:	f7fc fac4 	bl	8000a68 <__aeabi_d2iz>
 80044e0:	2200      	movs	r2, #0
 80044e2:	4607      	mov	r7, r0
 80044e4:	2300      	movs	r3, #0
 80044e6:	4620      	mov	r0, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	f7fc fa7f 	bl	80009ec <__aeabi_dcmplt>
 80044ee:	b140      	cbz	r0, 8004502 <_dtoa_r+0x16a>
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7fb ff9f 	bl	8000434 <__aeabi_i2d>
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	f7fc fa6d 	bl	80009d8 <__aeabi_dcmpeq>
 80044fe:	b900      	cbnz	r0, 8004502 <_dtoa_r+0x16a>
 8004500:	3f01      	subs	r7, #1
 8004502:	2f16      	cmp	r7, #22
 8004504:	d853      	bhi.n	80045ae <_dtoa_r+0x216>
 8004506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800450a:	4b5c      	ldr	r3, [pc, #368]	@ (800467c <_dtoa_r+0x2e4>)
 800450c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc fa6a 	bl	80009ec <__aeabi_dcmplt>
 8004518:	2800      	cmp	r0, #0
 800451a:	d04a      	beq.n	80045b2 <_dtoa_r+0x21a>
 800451c:	2300      	movs	r3, #0
 800451e:	3f01      	subs	r7, #1
 8004520:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004522:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004524:	1b9b      	subs	r3, r3, r6
 8004526:	1e5a      	subs	r2, r3, #1
 8004528:	bf46      	itte	mi
 800452a:	f1c3 0801 	rsbmi	r8, r3, #1
 800452e:	2300      	movmi	r3, #0
 8004530:	f04f 0800 	movpl.w	r8, #0
 8004534:	9209      	str	r2, [sp, #36]	@ 0x24
 8004536:	bf48      	it	mi
 8004538:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800453a:	2f00      	cmp	r7, #0
 800453c:	db3b      	blt.n	80045b6 <_dtoa_r+0x21e>
 800453e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004540:	970e      	str	r7, [sp, #56]	@ 0x38
 8004542:	443b      	add	r3, r7
 8004544:	9309      	str	r3, [sp, #36]	@ 0x24
 8004546:	2300      	movs	r3, #0
 8004548:	930a      	str	r3, [sp, #40]	@ 0x28
 800454a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800454c:	2b09      	cmp	r3, #9
 800454e:	d866      	bhi.n	800461e <_dtoa_r+0x286>
 8004550:	2b05      	cmp	r3, #5
 8004552:	bfc4      	itt	gt
 8004554:	3b04      	subgt	r3, #4
 8004556:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004558:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800455a:	bfc8      	it	gt
 800455c:	2400      	movgt	r4, #0
 800455e:	f1a3 0302 	sub.w	r3, r3, #2
 8004562:	bfd8      	it	le
 8004564:	2401      	movle	r4, #1
 8004566:	2b03      	cmp	r3, #3
 8004568:	d864      	bhi.n	8004634 <_dtoa_r+0x29c>
 800456a:	e8df f003 	tbb	[pc, r3]
 800456e:	382b      	.short	0x382b
 8004570:	5636      	.short	0x5636
 8004572:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004576:	441e      	add	r6, r3
 8004578:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800457c:	2b20      	cmp	r3, #32
 800457e:	bfc1      	itttt	gt
 8004580:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004584:	fa08 f803 	lslgt.w	r8, r8, r3
 8004588:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800458c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004590:	bfd6      	itet	le
 8004592:	f1c3 0320 	rsble	r3, r3, #32
 8004596:	ea48 0003 	orrgt.w	r0, r8, r3
 800459a:	fa04 f003 	lslle.w	r0, r4, r3
 800459e:	f7fb ff39 	bl	8000414 <__aeabi_ui2d>
 80045a2:	2201      	movs	r2, #1
 80045a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80045a8:	3e01      	subs	r6, #1
 80045aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80045ac:	e775      	b.n	800449a <_dtoa_r+0x102>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7b6      	b.n	8004520 <_dtoa_r+0x188>
 80045b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80045b4:	e7b5      	b.n	8004522 <_dtoa_r+0x18a>
 80045b6:	427b      	negs	r3, r7
 80045b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80045ba:	2300      	movs	r3, #0
 80045bc:	eba8 0807 	sub.w	r8, r8, r7
 80045c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80045c2:	e7c2      	b.n	800454a <_dtoa_r+0x1b2>
 80045c4:	2300      	movs	r3, #0
 80045c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	dc35      	bgt.n	800463a <_dtoa_r+0x2a2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	461a      	mov	r2, r3
 80045d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80045d8:	e00b      	b.n	80045f2 <_dtoa_r+0x25a>
 80045da:	2301      	movs	r3, #1
 80045dc:	e7f3      	b.n	80045c6 <_dtoa_r+0x22e>
 80045de:	2300      	movs	r3, #0
 80045e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	9308      	str	r3, [sp, #32]
 80045e8:	3301      	adds	r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	9307      	str	r3, [sp, #28]
 80045ee:	bfb8      	it	lt
 80045f0:	2301      	movlt	r3, #1
 80045f2:	2100      	movs	r1, #0
 80045f4:	2204      	movs	r2, #4
 80045f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80045fa:	f102 0514 	add.w	r5, r2, #20
 80045fe:	429d      	cmp	r5, r3
 8004600:	d91f      	bls.n	8004642 <_dtoa_r+0x2aa>
 8004602:	6041      	str	r1, [r0, #4]
 8004604:	4658      	mov	r0, fp
 8004606:	f000 fd8d 	bl	8005124 <_Balloc>
 800460a:	4682      	mov	sl, r0
 800460c:	2800      	cmp	r0, #0
 800460e:	d139      	bne.n	8004684 <_dtoa_r+0x2ec>
 8004610:	4602      	mov	r2, r0
 8004612:	f240 11af 	movw	r1, #431	@ 0x1af
 8004616:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <_dtoa_r+0x2e8>)
 8004618:	e6d2      	b.n	80043c0 <_dtoa_r+0x28>
 800461a:	2301      	movs	r3, #1
 800461c:	e7e0      	b.n	80045e0 <_dtoa_r+0x248>
 800461e:	2401      	movs	r4, #1
 8004620:	2300      	movs	r3, #0
 8004622:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004624:	9320      	str	r3, [sp, #128]	@ 0x80
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	2200      	movs	r2, #0
 800462c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004630:	2312      	movs	r3, #18
 8004632:	e7d0      	b.n	80045d6 <_dtoa_r+0x23e>
 8004634:	2301      	movs	r3, #1
 8004636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004638:	e7f5      	b.n	8004626 <_dtoa_r+0x28e>
 800463a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800463c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004640:	e7d7      	b.n	80045f2 <_dtoa_r+0x25a>
 8004642:	3101      	adds	r1, #1
 8004644:	0052      	lsls	r2, r2, #1
 8004646:	e7d8      	b.n	80045fa <_dtoa_r+0x262>
 8004648:	636f4361 	.word	0x636f4361
 800464c:	3fd287a7 	.word	0x3fd287a7
 8004650:	8b60c8b3 	.word	0x8b60c8b3
 8004654:	3fc68a28 	.word	0x3fc68a28
 8004658:	509f79fb 	.word	0x509f79fb
 800465c:	3fd34413 	.word	0x3fd34413
 8004660:	08007986 	.word	0x08007986
 8004664:	0800799d 	.word	0x0800799d
 8004668:	7ff00000 	.word	0x7ff00000
 800466c:	08007982 	.word	0x08007982
 8004670:	08007951 	.word	0x08007951
 8004674:	08007950 	.word	0x08007950
 8004678:	3ff80000 	.word	0x3ff80000
 800467c:	08007a98 	.word	0x08007a98
 8004680:	080079f5 	.word	0x080079f5
 8004684:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004688:	6018      	str	r0, [r3, #0]
 800468a:	9b07      	ldr	r3, [sp, #28]
 800468c:	2b0e      	cmp	r3, #14
 800468e:	f200 80a4 	bhi.w	80047da <_dtoa_r+0x442>
 8004692:	2c00      	cmp	r4, #0
 8004694:	f000 80a1 	beq.w	80047da <_dtoa_r+0x442>
 8004698:	2f00      	cmp	r7, #0
 800469a:	dd33      	ble.n	8004704 <_dtoa_r+0x36c>
 800469c:	4b86      	ldr	r3, [pc, #536]	@ (80048b8 <_dtoa_r+0x520>)
 800469e:	f007 020f 	and.w	r2, r7, #15
 80046a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046a6:	05f8      	lsls	r0, r7, #23
 80046a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80046b4:	d516      	bpl.n	80046e4 <_dtoa_r+0x34c>
 80046b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046ba:	4b80      	ldr	r3, [pc, #512]	@ (80048bc <_dtoa_r+0x524>)
 80046bc:	2603      	movs	r6, #3
 80046be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046c2:	f7fc f84b 	bl	800075c <__aeabi_ddiv>
 80046c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ca:	f004 040f 	and.w	r4, r4, #15
 80046ce:	4d7b      	ldr	r5, [pc, #492]	@ (80048bc <_dtoa_r+0x524>)
 80046d0:	b954      	cbnz	r4, 80046e8 <_dtoa_r+0x350>
 80046d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046da:	f7fc f83f 	bl	800075c <__aeabi_ddiv>
 80046de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046e2:	e028      	b.n	8004736 <_dtoa_r+0x39e>
 80046e4:	2602      	movs	r6, #2
 80046e6:	e7f2      	b.n	80046ce <_dtoa_r+0x336>
 80046e8:	07e1      	lsls	r1, r4, #31
 80046ea:	d508      	bpl.n	80046fe <_dtoa_r+0x366>
 80046ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046f4:	f7fb ff08 	bl	8000508 <__aeabi_dmul>
 80046f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046fc:	3601      	adds	r6, #1
 80046fe:	1064      	asrs	r4, r4, #1
 8004700:	3508      	adds	r5, #8
 8004702:	e7e5      	b.n	80046d0 <_dtoa_r+0x338>
 8004704:	f000 80d2 	beq.w	80048ac <_dtoa_r+0x514>
 8004708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800470c:	427c      	negs	r4, r7
 800470e:	4b6a      	ldr	r3, [pc, #424]	@ (80048b8 <_dtoa_r+0x520>)
 8004710:	f004 020f 	and.w	r2, r4, #15
 8004714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f7fb fef4 	bl	8000508 <__aeabi_dmul>
 8004720:	2602      	movs	r6, #2
 8004722:	2300      	movs	r3, #0
 8004724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004728:	4d64      	ldr	r5, [pc, #400]	@ (80048bc <_dtoa_r+0x524>)
 800472a:	1124      	asrs	r4, r4, #4
 800472c:	2c00      	cmp	r4, #0
 800472e:	f040 80b2 	bne.w	8004896 <_dtoa_r+0x4fe>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1d3      	bne.n	80046de <_dtoa_r+0x346>
 8004736:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800473a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80b7 	beq.w	80048b0 <_dtoa_r+0x518>
 8004742:	2200      	movs	r2, #0
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	4b5d      	ldr	r3, [pc, #372]	@ (80048c0 <_dtoa_r+0x528>)
 800474a:	f7fc f94f 	bl	80009ec <__aeabi_dcmplt>
 800474e:	2800      	cmp	r0, #0
 8004750:	f000 80ae 	beq.w	80048b0 <_dtoa_r+0x518>
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80aa 	beq.w	80048b0 <_dtoa_r+0x518>
 800475c:	9b08      	ldr	r3, [sp, #32]
 800475e:	2b00      	cmp	r3, #0
 8004760:	dd37      	ble.n	80047d2 <_dtoa_r+0x43a>
 8004762:	1e7b      	subs	r3, r7, #1
 8004764:	4620      	mov	r0, r4
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	2200      	movs	r2, #0
 800476a:	4629      	mov	r1, r5
 800476c:	4b55      	ldr	r3, [pc, #340]	@ (80048c4 <_dtoa_r+0x52c>)
 800476e:	f7fb fecb 	bl	8000508 <__aeabi_dmul>
 8004772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004776:	9c08      	ldr	r4, [sp, #32]
 8004778:	3601      	adds	r6, #1
 800477a:	4630      	mov	r0, r6
 800477c:	f7fb fe5a 	bl	8000434 <__aeabi_i2d>
 8004780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004784:	f7fb fec0 	bl	8000508 <__aeabi_dmul>
 8004788:	2200      	movs	r2, #0
 800478a:	4b4f      	ldr	r3, [pc, #316]	@ (80048c8 <_dtoa_r+0x530>)
 800478c:	f7fb fd06 	bl	800019c <__adddf3>
 8004790:	4605      	mov	r5, r0
 8004792:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004796:	2c00      	cmp	r4, #0
 8004798:	f040 809a 	bne.w	80048d0 <_dtoa_r+0x538>
 800479c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <_dtoa_r+0x534>)
 80047a4:	f7fb fcf8 	bl	8000198 <__aeabi_dsub>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047b0:	462a      	mov	r2, r5
 80047b2:	4633      	mov	r3, r6
 80047b4:	f7fc f938 	bl	8000a28 <__aeabi_dcmpgt>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f040 828e 	bne.w	8004cda <_dtoa_r+0x942>
 80047be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047c2:	462a      	mov	r2, r5
 80047c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80047c8:	f7fc f910 	bl	80009ec <__aeabi_dcmplt>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f040 8127 	bne.w	8004a20 <_dtoa_r+0x688>
 80047d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80047d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f2c0 8163 	blt.w	8004aa8 <_dtoa_r+0x710>
 80047e2:	2f0e      	cmp	r7, #14
 80047e4:	f300 8160 	bgt.w	8004aa8 <_dtoa_r+0x710>
 80047e8:	4b33      	ldr	r3, [pc, #204]	@ (80048b8 <_dtoa_r+0x520>)
 80047ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	da03      	bge.n	8004804 <_dtoa_r+0x46c>
 80047fc:	9b07      	ldr	r3, [sp, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f340 8100 	ble.w	8004a04 <_dtoa_r+0x66c>
 8004804:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004808:	4656      	mov	r6, sl
 800480a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f7fb ffa3 	bl	800075c <__aeabi_ddiv>
 8004816:	f7fc f927 	bl	8000a68 <__aeabi_d2iz>
 800481a:	4680      	mov	r8, r0
 800481c:	f7fb fe0a 	bl	8000434 <__aeabi_i2d>
 8004820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004824:	f7fb fe70 	bl	8000508 <__aeabi_dmul>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4620      	mov	r0, r4
 800482e:	4629      	mov	r1, r5
 8004830:	f7fb fcb2 	bl	8000198 <__aeabi_dsub>
 8004834:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004838:	9d07      	ldr	r5, [sp, #28]
 800483a:	f806 4b01 	strb.w	r4, [r6], #1
 800483e:	eba6 040a 	sub.w	r4, r6, sl
 8004842:	42a5      	cmp	r5, r4
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	f040 8116 	bne.w	8004a78 <_dtoa_r+0x6e0>
 800484c:	f7fb fca6 	bl	800019c <__adddf3>
 8004850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004854:	4604      	mov	r4, r0
 8004856:	460d      	mov	r5, r1
 8004858:	f7fc f8e6 	bl	8000a28 <__aeabi_dcmpgt>
 800485c:	2800      	cmp	r0, #0
 800485e:	f040 80f8 	bne.w	8004a52 <_dtoa_r+0x6ba>
 8004862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004866:	4620      	mov	r0, r4
 8004868:	4629      	mov	r1, r5
 800486a:	f7fc f8b5 	bl	80009d8 <__aeabi_dcmpeq>
 800486e:	b118      	cbz	r0, 8004878 <_dtoa_r+0x4e0>
 8004870:	f018 0f01 	tst.w	r8, #1
 8004874:	f040 80ed 	bne.w	8004a52 <_dtoa_r+0x6ba>
 8004878:	4649      	mov	r1, r9
 800487a:	4658      	mov	r0, fp
 800487c:	f000 fc92 	bl	80051a4 <_Bfree>
 8004880:	2300      	movs	r3, #0
 8004882:	7033      	strb	r3, [r6, #0]
 8004884:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004886:	3701      	adds	r7, #1
 8004888:	601f      	str	r7, [r3, #0]
 800488a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8320 	beq.w	8004ed2 <_dtoa_r+0xb3a>
 8004892:	601e      	str	r6, [r3, #0]
 8004894:	e31d      	b.n	8004ed2 <_dtoa_r+0xb3a>
 8004896:	07e2      	lsls	r2, r4, #31
 8004898:	d505      	bpl.n	80048a6 <_dtoa_r+0x50e>
 800489a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800489e:	f7fb fe33 	bl	8000508 <__aeabi_dmul>
 80048a2:	2301      	movs	r3, #1
 80048a4:	3601      	adds	r6, #1
 80048a6:	1064      	asrs	r4, r4, #1
 80048a8:	3508      	adds	r5, #8
 80048aa:	e73f      	b.n	800472c <_dtoa_r+0x394>
 80048ac:	2602      	movs	r6, #2
 80048ae:	e742      	b.n	8004736 <_dtoa_r+0x39e>
 80048b0:	9c07      	ldr	r4, [sp, #28]
 80048b2:	9704      	str	r7, [sp, #16]
 80048b4:	e761      	b.n	800477a <_dtoa_r+0x3e2>
 80048b6:	bf00      	nop
 80048b8:	08007a98 	.word	0x08007a98
 80048bc:	08007a70 	.word	0x08007a70
 80048c0:	3ff00000 	.word	0x3ff00000
 80048c4:	40240000 	.word	0x40240000
 80048c8:	401c0000 	.word	0x401c0000
 80048cc:	40140000 	.word	0x40140000
 80048d0:	4b70      	ldr	r3, [pc, #448]	@ (8004a94 <_dtoa_r+0x6fc>)
 80048d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048dc:	4454      	add	r4, sl
 80048de:	2900      	cmp	r1, #0
 80048e0:	d045      	beq.n	800496e <_dtoa_r+0x5d6>
 80048e2:	2000      	movs	r0, #0
 80048e4:	496c      	ldr	r1, [pc, #432]	@ (8004a98 <_dtoa_r+0x700>)
 80048e6:	f7fb ff39 	bl	800075c <__aeabi_ddiv>
 80048ea:	4633      	mov	r3, r6
 80048ec:	462a      	mov	r2, r5
 80048ee:	f7fb fc53 	bl	8000198 <__aeabi_dsub>
 80048f2:	4656      	mov	r6, sl
 80048f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fc:	f7fc f8b4 	bl	8000a68 <__aeabi_d2iz>
 8004900:	4605      	mov	r5, r0
 8004902:	f7fb fd97 	bl	8000434 <__aeabi_i2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800490e:	f7fb fc43 	bl	8000198 <__aeabi_dsub>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	3530      	adds	r5, #48	@ 0x30
 8004918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800491c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004920:	f806 5b01 	strb.w	r5, [r6], #1
 8004924:	f7fc f862 	bl	80009ec <__aeabi_dcmplt>
 8004928:	2800      	cmp	r0, #0
 800492a:	d163      	bne.n	80049f4 <_dtoa_r+0x65c>
 800492c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004930:	2000      	movs	r0, #0
 8004932:	495a      	ldr	r1, [pc, #360]	@ (8004a9c <_dtoa_r+0x704>)
 8004934:	f7fb fc30 	bl	8000198 <__aeabi_dsub>
 8004938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800493c:	f7fc f856 	bl	80009ec <__aeabi_dcmplt>
 8004940:	2800      	cmp	r0, #0
 8004942:	f040 8087 	bne.w	8004a54 <_dtoa_r+0x6bc>
 8004946:	42a6      	cmp	r6, r4
 8004948:	f43f af43 	beq.w	80047d2 <_dtoa_r+0x43a>
 800494c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004950:	2200      	movs	r2, #0
 8004952:	4b53      	ldr	r3, [pc, #332]	@ (8004aa0 <_dtoa_r+0x708>)
 8004954:	f7fb fdd8 	bl	8000508 <__aeabi_dmul>
 8004958:	2200      	movs	r2, #0
 800495a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800495e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004962:	4b4f      	ldr	r3, [pc, #316]	@ (8004aa0 <_dtoa_r+0x708>)
 8004964:	f7fb fdd0 	bl	8000508 <__aeabi_dmul>
 8004968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800496c:	e7c4      	b.n	80048f8 <_dtoa_r+0x560>
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	f7fb fdc9 	bl	8000508 <__aeabi_dmul>
 8004976:	4656      	mov	r6, sl
 8004978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800497c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800497e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004982:	f7fc f871 	bl	8000a68 <__aeabi_d2iz>
 8004986:	4605      	mov	r5, r0
 8004988:	f7fb fd54 	bl	8000434 <__aeabi_i2d>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004994:	f7fb fc00 	bl	8000198 <__aeabi_dsub>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	3530      	adds	r5, #48	@ 0x30
 800499e:	f806 5b01 	strb.w	r5, [r6], #1
 80049a2:	42a6      	cmp	r6, r4
 80049a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	d124      	bne.n	80049f8 <_dtoa_r+0x660>
 80049ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80049b2:	4b39      	ldr	r3, [pc, #228]	@ (8004a98 <_dtoa_r+0x700>)
 80049b4:	f7fb fbf2 	bl	800019c <__adddf3>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c0:	f7fc f832 	bl	8000a28 <__aeabi_dcmpgt>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d145      	bne.n	8004a54 <_dtoa_r+0x6bc>
 80049c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80049cc:	2000      	movs	r0, #0
 80049ce:	4932      	ldr	r1, [pc, #200]	@ (8004a98 <_dtoa_r+0x700>)
 80049d0:	f7fb fbe2 	bl	8000198 <__aeabi_dsub>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049dc:	f7fc f806 	bl	80009ec <__aeabi_dcmplt>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f43f aef6 	beq.w	80047d2 <_dtoa_r+0x43a>
 80049e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80049e8:	1e73      	subs	r3, r6, #1
 80049ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80049ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80049f0:	2b30      	cmp	r3, #48	@ 0x30
 80049f2:	d0f8      	beq.n	80049e6 <_dtoa_r+0x64e>
 80049f4:	9f04      	ldr	r7, [sp, #16]
 80049f6:	e73f      	b.n	8004878 <_dtoa_r+0x4e0>
 80049f8:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <_dtoa_r+0x708>)
 80049fa:	f7fb fd85 	bl	8000508 <__aeabi_dmul>
 80049fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a02:	e7bc      	b.n	800497e <_dtoa_r+0x5e6>
 8004a04:	d10c      	bne.n	8004a20 <_dtoa_r+0x688>
 8004a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <_dtoa_r+0x70c>)
 8004a0e:	f7fb fd7b 	bl	8000508 <__aeabi_dmul>
 8004a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a16:	f7fb fffd 	bl	8000a14 <__aeabi_dcmpge>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f000 815b 	beq.w	8004cd6 <_dtoa_r+0x93e>
 8004a20:	2400      	movs	r4, #0
 8004a22:	4625      	mov	r5, r4
 8004a24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a26:	4656      	mov	r6, sl
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	9304      	str	r3, [sp, #16]
 8004a2c:	2700      	movs	r7, #0
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4658      	mov	r0, fp
 8004a32:	f000 fbb7 	bl	80051a4 <_Bfree>
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	d0dc      	beq.n	80049f4 <_dtoa_r+0x65c>
 8004a3a:	b12f      	cbz	r7, 8004a48 <_dtoa_r+0x6b0>
 8004a3c:	42af      	cmp	r7, r5
 8004a3e:	d003      	beq.n	8004a48 <_dtoa_r+0x6b0>
 8004a40:	4639      	mov	r1, r7
 8004a42:	4658      	mov	r0, fp
 8004a44:	f000 fbae 	bl	80051a4 <_Bfree>
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4658      	mov	r0, fp
 8004a4c:	f000 fbaa 	bl	80051a4 <_Bfree>
 8004a50:	e7d0      	b.n	80049f4 <_dtoa_r+0x65c>
 8004a52:	9704      	str	r7, [sp, #16]
 8004a54:	4633      	mov	r3, r6
 8004a56:	461e      	mov	r6, r3
 8004a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a5c:	2a39      	cmp	r2, #57	@ 0x39
 8004a5e:	d107      	bne.n	8004a70 <_dtoa_r+0x6d8>
 8004a60:	459a      	cmp	sl, r3
 8004a62:	d1f8      	bne.n	8004a56 <_dtoa_r+0x6be>
 8004a64:	9a04      	ldr	r2, [sp, #16]
 8004a66:	3201      	adds	r2, #1
 8004a68:	9204      	str	r2, [sp, #16]
 8004a6a:	2230      	movs	r2, #48	@ 0x30
 8004a6c:	f88a 2000 	strb.w	r2, [sl]
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	3201      	adds	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e7bd      	b.n	80049f4 <_dtoa_r+0x65c>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <_dtoa_r+0x708>)
 8004a7c:	f7fb fd44 	bl	8000508 <__aeabi_dmul>
 8004a80:	2200      	movs	r2, #0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4604      	mov	r4, r0
 8004a86:	460d      	mov	r5, r1
 8004a88:	f7fb ffa6 	bl	80009d8 <__aeabi_dcmpeq>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	f43f aebc 	beq.w	800480a <_dtoa_r+0x472>
 8004a92:	e6f1      	b.n	8004878 <_dtoa_r+0x4e0>
 8004a94:	08007a98 	.word	0x08007a98
 8004a98:	3fe00000 	.word	0x3fe00000
 8004a9c:	3ff00000 	.word	0x3ff00000
 8004aa0:	40240000 	.word	0x40240000
 8004aa4:	40140000 	.word	0x40140000
 8004aa8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	f000 80db 	beq.w	8004c66 <_dtoa_r+0x8ce>
 8004ab0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ab2:	2a01      	cmp	r2, #1
 8004ab4:	f300 80bf 	bgt.w	8004c36 <_dtoa_r+0x89e>
 8004ab8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	f000 80b7 	beq.w	8004c2e <_dtoa_r+0x896>
 8004ac0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004ac4:	4646      	mov	r6, r8
 8004ac6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aca:	2101      	movs	r1, #1
 8004acc:	441a      	add	r2, r3
 8004ace:	4658      	mov	r0, fp
 8004ad0:	4498      	add	r8, r3
 8004ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ad4:	f000 fc64 	bl	80053a0 <__i2b>
 8004ad8:	4605      	mov	r5, r0
 8004ada:	b15e      	cbz	r6, 8004af4 <_dtoa_r+0x75c>
 8004adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dd08      	ble.n	8004af4 <_dtoa_r+0x75c>
 8004ae2:	42b3      	cmp	r3, r6
 8004ae4:	bfa8      	it	ge
 8004ae6:	4633      	movge	r3, r6
 8004ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aea:	eba8 0803 	sub.w	r8, r8, r3
 8004aee:	1af6      	subs	r6, r6, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004af6:	b1f3      	cbz	r3, 8004b36 <_dtoa_r+0x79e>
 8004af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80b7 	beq.w	8004c6e <_dtoa_r+0x8d6>
 8004b00:	b18c      	cbz	r4, 8004b26 <_dtoa_r+0x78e>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4622      	mov	r2, r4
 8004b06:	4658      	mov	r0, fp
 8004b08:	f000 fd08 	bl	800551c <__pow5mult>
 8004b0c:	464a      	mov	r2, r9
 8004b0e:	4601      	mov	r1, r0
 8004b10:	4605      	mov	r5, r0
 8004b12:	4658      	mov	r0, fp
 8004b14:	f000 fc5a 	bl	80053cc <__multiply>
 8004b18:	4649      	mov	r1, r9
 8004b1a:	9004      	str	r0, [sp, #16]
 8004b1c:	4658      	mov	r0, fp
 8004b1e:	f000 fb41 	bl	80051a4 <_Bfree>
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	4699      	mov	r9, r3
 8004b26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b28:	1b1a      	subs	r2, r3, r4
 8004b2a:	d004      	beq.n	8004b36 <_dtoa_r+0x79e>
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	4658      	mov	r0, fp
 8004b30:	f000 fcf4 	bl	800551c <__pow5mult>
 8004b34:	4681      	mov	r9, r0
 8004b36:	2101      	movs	r1, #1
 8004b38:	4658      	mov	r0, fp
 8004b3a:	f000 fc31 	bl	80053a0 <__i2b>
 8004b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b40:	4604      	mov	r4, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 81c9 	beq.w	8004eda <_dtoa_r+0xb42>
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	4658      	mov	r0, fp
 8004b4e:	f000 fce5 	bl	800551c <__pow5mult>
 8004b52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b54:	4604      	mov	r4, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	f300 808f 	bgt.w	8004c7a <_dtoa_r+0x8e2>
 8004b5c:	9b02      	ldr	r3, [sp, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 8087 	bne.w	8004c72 <_dtoa_r+0x8da>
 8004b64:	9b03      	ldr	r3, [sp, #12]
 8004b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 8083 	bne.w	8004c76 <_dtoa_r+0x8de>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b76:	0d1b      	lsrs	r3, r3, #20
 8004b78:	051b      	lsls	r3, r3, #20
 8004b7a:	b12b      	cbz	r3, 8004b88 <_dtoa_r+0x7f0>
 8004b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b7e:	f108 0801 	add.w	r8, r8, #1
 8004b82:	3301      	adds	r3, #1
 8004b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b86:	2301      	movs	r3, #1
 8004b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 81aa 	beq.w	8004ee6 <_dtoa_r+0xb4e>
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b98:	6918      	ldr	r0, [r3, #16]
 8004b9a:	f000 fbb5 	bl	8005308 <__hi0bits>
 8004b9e:	f1c0 0020 	rsb	r0, r0, #32
 8004ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba4:	4418      	add	r0, r3
 8004ba6:	f010 001f 	ands.w	r0, r0, #31
 8004baa:	d071      	beq.n	8004c90 <_dtoa_r+0x8f8>
 8004bac:	f1c0 0320 	rsb	r3, r0, #32
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	dd65      	ble.n	8004c80 <_dtoa_r+0x8e8>
 8004bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bb6:	f1c0 001c 	rsb	r0, r0, #28
 8004bba:	4403      	add	r3, r0
 8004bbc:	4480      	add	r8, r0
 8004bbe:	4406      	add	r6, r0
 8004bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bc2:	f1b8 0f00 	cmp.w	r8, #0
 8004bc6:	dd05      	ble.n	8004bd4 <_dtoa_r+0x83c>
 8004bc8:	4649      	mov	r1, r9
 8004bca:	4642      	mov	r2, r8
 8004bcc:	4658      	mov	r0, fp
 8004bce:	f000 fcff 	bl	80055d0 <__lshift>
 8004bd2:	4681      	mov	r9, r0
 8004bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dd05      	ble.n	8004be6 <_dtoa_r+0x84e>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4658      	mov	r0, fp
 8004be0:	f000 fcf6 	bl	80055d0 <__lshift>
 8004be4:	4604      	mov	r4, r0
 8004be6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d053      	beq.n	8004c94 <_dtoa_r+0x8fc>
 8004bec:	4621      	mov	r1, r4
 8004bee:	4648      	mov	r0, r9
 8004bf0:	f000 fd5a 	bl	80056a8 <__mcmp>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	da4d      	bge.n	8004c94 <_dtoa_r+0x8fc>
 8004bf8:	1e7b      	subs	r3, r7, #1
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	220a      	movs	r2, #10
 8004c00:	2300      	movs	r3, #0
 8004c02:	4658      	mov	r0, fp
 8004c04:	f000 faf0 	bl	80051e8 <__multadd>
 8004c08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c0a:	4681      	mov	r9, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 816c 	beq.w	8004eea <_dtoa_r+0xb52>
 8004c12:	2300      	movs	r3, #0
 8004c14:	4629      	mov	r1, r5
 8004c16:	220a      	movs	r2, #10
 8004c18:	4658      	mov	r0, fp
 8004c1a:	f000 fae5 	bl	80051e8 <__multadd>
 8004c1e:	9b08      	ldr	r3, [sp, #32]
 8004c20:	4605      	mov	r5, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dc61      	bgt.n	8004cea <_dtoa_r+0x952>
 8004c26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	dc3b      	bgt.n	8004ca4 <_dtoa_r+0x90c>
 8004c2c:	e05d      	b.n	8004cea <_dtoa_r+0x952>
 8004c2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c30:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004c34:	e746      	b.n	8004ac4 <_dtoa_r+0x72c>
 8004c36:	9b07      	ldr	r3, [sp, #28]
 8004c38:	1e5c      	subs	r4, r3, #1
 8004c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	bfbf      	itttt	lt
 8004c40:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004c42:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004c44:	1ae3      	sublt	r3, r4, r3
 8004c46:	18d2      	addlt	r2, r2, r3
 8004c48:	bfa8      	it	ge
 8004c4a:	1b1c      	subge	r4, r3, r4
 8004c4c:	9b07      	ldr	r3, [sp, #28]
 8004c4e:	bfbe      	ittt	lt
 8004c50:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004c52:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004c54:	2400      	movlt	r4, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfb5      	itete	lt
 8004c5a:	eba8 0603 	sublt.w	r6, r8, r3
 8004c5e:	4646      	movge	r6, r8
 8004c60:	2300      	movlt	r3, #0
 8004c62:	9b07      	ldrge	r3, [sp, #28]
 8004c64:	e730      	b.n	8004ac8 <_dtoa_r+0x730>
 8004c66:	4646      	mov	r6, r8
 8004c68:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004c6c:	e735      	b.n	8004ada <_dtoa_r+0x742>
 8004c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c70:	e75c      	b.n	8004b2c <_dtoa_r+0x794>
 8004c72:	2300      	movs	r3, #0
 8004c74:	e788      	b.n	8004b88 <_dtoa_r+0x7f0>
 8004c76:	9b02      	ldr	r3, [sp, #8]
 8004c78:	e786      	b.n	8004b88 <_dtoa_r+0x7f0>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c7e:	e788      	b.n	8004b92 <_dtoa_r+0x7fa>
 8004c80:	d09f      	beq.n	8004bc2 <_dtoa_r+0x82a>
 8004c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c84:	331c      	adds	r3, #28
 8004c86:	441a      	add	r2, r3
 8004c88:	4498      	add	r8, r3
 8004c8a:	441e      	add	r6, r3
 8004c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c8e:	e798      	b.n	8004bc2 <_dtoa_r+0x82a>
 8004c90:	4603      	mov	r3, r0
 8004c92:	e7f6      	b.n	8004c82 <_dtoa_r+0x8ea>
 8004c94:	9b07      	ldr	r3, [sp, #28]
 8004c96:	9704      	str	r7, [sp, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	dc20      	bgt.n	8004cde <_dtoa_r+0x946>
 8004c9c:	9308      	str	r3, [sp, #32]
 8004c9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	dd1e      	ble.n	8004ce2 <_dtoa_r+0x94a>
 8004ca4:	9b08      	ldr	r3, [sp, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f47f aebc 	bne.w	8004a24 <_dtoa_r+0x68c>
 8004cac:	4621      	mov	r1, r4
 8004cae:	2205      	movs	r2, #5
 8004cb0:	4658      	mov	r0, fp
 8004cb2:	f000 fa99 	bl	80051e8 <__multadd>
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	4604      	mov	r4, r0
 8004cba:	4648      	mov	r0, r9
 8004cbc:	f000 fcf4 	bl	80056a8 <__mcmp>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f77f aeaf 	ble.w	8004a24 <_dtoa_r+0x68c>
 8004cc6:	2331      	movs	r3, #49	@ 0x31
 8004cc8:	4656      	mov	r6, sl
 8004cca:	f806 3b01 	strb.w	r3, [r6], #1
 8004cce:	9b04      	ldr	r3, [sp, #16]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	9304      	str	r3, [sp, #16]
 8004cd4:	e6aa      	b.n	8004a2c <_dtoa_r+0x694>
 8004cd6:	9c07      	ldr	r4, [sp, #28]
 8004cd8:	9704      	str	r7, [sp, #16]
 8004cda:	4625      	mov	r5, r4
 8004cdc:	e7f3      	b.n	8004cc6 <_dtoa_r+0x92e>
 8004cde:	9b07      	ldr	r3, [sp, #28]
 8004ce0:	9308      	str	r3, [sp, #32]
 8004ce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8104 	beq.w	8004ef2 <_dtoa_r+0xb5a>
 8004cea:	2e00      	cmp	r6, #0
 8004cec:	dd05      	ble.n	8004cfa <_dtoa_r+0x962>
 8004cee:	4629      	mov	r1, r5
 8004cf0:	4632      	mov	r2, r6
 8004cf2:	4658      	mov	r0, fp
 8004cf4:	f000 fc6c 	bl	80055d0 <__lshift>
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d05a      	beq.n	8004db6 <_dtoa_r+0xa1e>
 8004d00:	4658      	mov	r0, fp
 8004d02:	6869      	ldr	r1, [r5, #4]
 8004d04:	f000 fa0e 	bl	8005124 <_Balloc>
 8004d08:	4606      	mov	r6, r0
 8004d0a:	b928      	cbnz	r0, 8004d18 <_dtoa_r+0x980>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004d12:	4b83      	ldr	r3, [pc, #524]	@ (8004f20 <_dtoa_r+0xb88>)
 8004d14:	f7ff bb54 	b.w	80043c0 <_dtoa_r+0x28>
 8004d18:	692a      	ldr	r2, [r5, #16]
 8004d1a:	f105 010c 	add.w	r1, r5, #12
 8004d1e:	3202      	adds	r2, #2
 8004d20:	0092      	lsls	r2, r2, #2
 8004d22:	300c      	adds	r0, #12
 8004d24:	f001 ff5e 	bl	8006be4 <memcpy>
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4658      	mov	r0, fp
 8004d2e:	f000 fc4f 	bl	80055d0 <__lshift>
 8004d32:	462f      	mov	r7, r5
 8004d34:	4605      	mov	r5, r0
 8004d36:	f10a 0301 	add.w	r3, sl, #1
 8004d3a:	9307      	str	r3, [sp, #28]
 8004d3c:	9b08      	ldr	r3, [sp, #32]
 8004d3e:	4453      	add	r3, sl
 8004d40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d42:	9b02      	ldr	r3, [sp, #8]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d4a:	9b07      	ldr	r3, [sp, #28]
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	4648      	mov	r0, r9
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	f7ff fa98 	bl	8004288 <quorem>
 8004d58:	4639      	mov	r1, r7
 8004d5a:	9008      	str	r0, [sp, #32]
 8004d5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d60:	4648      	mov	r0, r9
 8004d62:	f000 fca1 	bl	80056a8 <__mcmp>
 8004d66:	462a      	mov	r2, r5
 8004d68:	9009      	str	r0, [sp, #36]	@ 0x24
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4658      	mov	r0, fp
 8004d6e:	f000 fcb7 	bl	80056e0 <__mdiff>
 8004d72:	68c2      	ldr	r2, [r0, #12]
 8004d74:	4606      	mov	r6, r0
 8004d76:	bb02      	cbnz	r2, 8004dba <_dtoa_r+0xa22>
 8004d78:	4601      	mov	r1, r0
 8004d7a:	4648      	mov	r0, r9
 8004d7c:	f000 fc94 	bl	80056a8 <__mcmp>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4631      	mov	r1, r6
 8004d84:	4658      	mov	r0, fp
 8004d86:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d88:	f000 fa0c 	bl	80051a4 <_Bfree>
 8004d8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004d90:	9e07      	ldr	r6, [sp, #28]
 8004d92:	ea43 0102 	orr.w	r1, r3, r2
 8004d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d98:	4319      	orrs	r1, r3
 8004d9a:	d110      	bne.n	8004dbe <_dtoa_r+0xa26>
 8004d9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004da0:	d029      	beq.n	8004df6 <_dtoa_r+0xa5e>
 8004da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dd02      	ble.n	8004dae <_dtoa_r+0xa16>
 8004da8:	9b08      	ldr	r3, [sp, #32]
 8004daa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004dae:	9b02      	ldr	r3, [sp, #8]
 8004db0:	f883 8000 	strb.w	r8, [r3]
 8004db4:	e63b      	b.n	8004a2e <_dtoa_r+0x696>
 8004db6:	4628      	mov	r0, r5
 8004db8:	e7bb      	b.n	8004d32 <_dtoa_r+0x99a>
 8004dba:	2201      	movs	r2, #1
 8004dbc:	e7e1      	b.n	8004d82 <_dtoa_r+0x9ea>
 8004dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db04      	blt.n	8004dce <_dtoa_r+0xa36>
 8004dc4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	d120      	bne.n	8004e10 <_dtoa_r+0xa78>
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	dded      	ble.n	8004dae <_dtoa_r+0xa16>
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	4658      	mov	r0, fp
 8004dd8:	f000 fbfa 	bl	80055d0 <__lshift>
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4681      	mov	r9, r0
 8004de0:	f000 fc62 	bl	80056a8 <__mcmp>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	dc03      	bgt.n	8004df0 <_dtoa_r+0xa58>
 8004de8:	d1e1      	bne.n	8004dae <_dtoa_r+0xa16>
 8004dea:	f018 0f01 	tst.w	r8, #1
 8004dee:	d0de      	beq.n	8004dae <_dtoa_r+0xa16>
 8004df0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004df4:	d1d8      	bne.n	8004da8 <_dtoa_r+0xa10>
 8004df6:	2339      	movs	r3, #57	@ 0x39
 8004df8:	9a02      	ldr	r2, [sp, #8]
 8004dfa:	7013      	strb	r3, [r2, #0]
 8004dfc:	4633      	mov	r3, r6
 8004dfe:	461e      	mov	r6, r3
 8004e00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	2a39      	cmp	r2, #57	@ 0x39
 8004e08:	d052      	beq.n	8004eb0 <_dtoa_r+0xb18>
 8004e0a:	3201      	adds	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e60e      	b.n	8004a2e <_dtoa_r+0x696>
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	dd07      	ble.n	8004e24 <_dtoa_r+0xa8c>
 8004e14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e18:	d0ed      	beq.n	8004df6 <_dtoa_r+0xa5e>
 8004e1a:	9a02      	ldr	r2, [sp, #8]
 8004e1c:	f108 0301 	add.w	r3, r8, #1
 8004e20:	7013      	strb	r3, [r2, #0]
 8004e22:	e604      	b.n	8004a2e <_dtoa_r+0x696>
 8004e24:	9b07      	ldr	r3, [sp, #28]
 8004e26:	9a07      	ldr	r2, [sp, #28]
 8004e28:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004e2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d028      	beq.n	8004e84 <_dtoa_r+0xaec>
 8004e32:	4649      	mov	r1, r9
 8004e34:	2300      	movs	r3, #0
 8004e36:	220a      	movs	r2, #10
 8004e38:	4658      	mov	r0, fp
 8004e3a:	f000 f9d5 	bl	80051e8 <__multadd>
 8004e3e:	42af      	cmp	r7, r5
 8004e40:	4681      	mov	r9, r0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	f04f 020a 	mov.w	r2, #10
 8004e4a:	4639      	mov	r1, r7
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	d107      	bne.n	8004e60 <_dtoa_r+0xac8>
 8004e50:	f000 f9ca 	bl	80051e8 <__multadd>
 8004e54:	4607      	mov	r7, r0
 8004e56:	4605      	mov	r5, r0
 8004e58:	9b07      	ldr	r3, [sp, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	9307      	str	r3, [sp, #28]
 8004e5e:	e774      	b.n	8004d4a <_dtoa_r+0x9b2>
 8004e60:	f000 f9c2 	bl	80051e8 <__multadd>
 8004e64:	4629      	mov	r1, r5
 8004e66:	4607      	mov	r7, r0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	220a      	movs	r2, #10
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	f000 f9bb 	bl	80051e8 <__multadd>
 8004e72:	4605      	mov	r5, r0
 8004e74:	e7f0      	b.n	8004e58 <_dtoa_r+0xac0>
 8004e76:	9b08      	ldr	r3, [sp, #32]
 8004e78:	2700      	movs	r7, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfcc      	ite	gt
 8004e7e:	461e      	movgt	r6, r3
 8004e80:	2601      	movle	r6, #1
 8004e82:	4456      	add	r6, sl
 8004e84:	4649      	mov	r1, r9
 8004e86:	2201      	movs	r2, #1
 8004e88:	4658      	mov	r0, fp
 8004e8a:	f000 fba1 	bl	80055d0 <__lshift>
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4681      	mov	r9, r0
 8004e92:	f000 fc09 	bl	80056a8 <__mcmp>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	dcb0      	bgt.n	8004dfc <_dtoa_r+0xa64>
 8004e9a:	d102      	bne.n	8004ea2 <_dtoa_r+0xb0a>
 8004e9c:	f018 0f01 	tst.w	r8, #1
 8004ea0:	d1ac      	bne.n	8004dfc <_dtoa_r+0xa64>
 8004ea2:	4633      	mov	r3, r6
 8004ea4:	461e      	mov	r6, r3
 8004ea6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eaa:	2a30      	cmp	r2, #48	@ 0x30
 8004eac:	d0fa      	beq.n	8004ea4 <_dtoa_r+0xb0c>
 8004eae:	e5be      	b.n	8004a2e <_dtoa_r+0x696>
 8004eb0:	459a      	cmp	sl, r3
 8004eb2:	d1a4      	bne.n	8004dfe <_dtoa_r+0xa66>
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	9304      	str	r3, [sp, #16]
 8004eba:	2331      	movs	r3, #49	@ 0x31
 8004ebc:	f88a 3000 	strb.w	r3, [sl]
 8004ec0:	e5b5      	b.n	8004a2e <_dtoa_r+0x696>
 8004ec2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ec4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004f24 <_dtoa_r+0xb8c>
 8004ec8:	b11b      	cbz	r3, 8004ed2 <_dtoa_r+0xb3a>
 8004eca:	f10a 0308 	add.w	r3, sl, #8
 8004ece:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4650      	mov	r0, sl
 8004ed4:	b017      	add	sp, #92	@ 0x5c
 8004ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f77f ae3d 	ble.w	8004b5c <_dtoa_r+0x7c4>
 8004ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ee4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	e65b      	b.n	8004ba2 <_dtoa_r+0x80a>
 8004eea:	9b08      	ldr	r3, [sp, #32]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f77f aed6 	ble.w	8004c9e <_dtoa_r+0x906>
 8004ef2:	4656      	mov	r6, sl
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4648      	mov	r0, r9
 8004ef8:	f7ff f9c6 	bl	8004288 <quorem>
 8004efc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f00:	9b08      	ldr	r3, [sp, #32]
 8004f02:	f806 8b01 	strb.w	r8, [r6], #1
 8004f06:	eba6 020a 	sub.w	r2, r6, sl
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	ddb3      	ble.n	8004e76 <_dtoa_r+0xade>
 8004f0e:	4649      	mov	r1, r9
 8004f10:	2300      	movs	r3, #0
 8004f12:	220a      	movs	r2, #10
 8004f14:	4658      	mov	r0, fp
 8004f16:	f000 f967 	bl	80051e8 <__multadd>
 8004f1a:	4681      	mov	r9, r0
 8004f1c:	e7ea      	b.n	8004ef4 <_dtoa_r+0xb5c>
 8004f1e:	bf00      	nop
 8004f20:	080079f5 	.word	0x080079f5
 8004f24:	08007979 	.word	0x08007979

08004f28 <_free_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d040      	beq.n	8004fb2 <_free_r+0x8a>
 8004f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f34:	1f0c      	subs	r4, r1, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bfb8      	it	lt
 8004f3a:	18e4      	addlt	r4, r4, r3
 8004f3c:	f000 f8e6 	bl	800510c <__malloc_lock>
 8004f40:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <_free_r+0x8c>)
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	b933      	cbnz	r3, 8004f54 <_free_r+0x2c>
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	6014      	str	r4, [r2, #0]
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f50:	f000 b8e2 	b.w	8005118 <__malloc_unlock>
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	d908      	bls.n	8004f6a <_free_r+0x42>
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	1821      	adds	r1, r4, r0
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	bf01      	itttt	eq
 8004f60:	6819      	ldreq	r1, [r3, #0]
 8004f62:	685b      	ldreq	r3, [r3, #4]
 8004f64:	1809      	addeq	r1, r1, r0
 8004f66:	6021      	streq	r1, [r4, #0]
 8004f68:	e7ed      	b.n	8004f46 <_free_r+0x1e>
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	b10b      	cbz	r3, 8004f74 <_free_r+0x4c>
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	d9fa      	bls.n	8004f6a <_free_r+0x42>
 8004f74:	6811      	ldr	r1, [r2, #0]
 8004f76:	1850      	adds	r0, r2, r1
 8004f78:	42a0      	cmp	r0, r4
 8004f7a:	d10b      	bne.n	8004f94 <_free_r+0x6c>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	4401      	add	r1, r0
 8004f80:	1850      	adds	r0, r2, r1
 8004f82:	4283      	cmp	r3, r0
 8004f84:	6011      	str	r1, [r2, #0]
 8004f86:	d1e0      	bne.n	8004f4a <_free_r+0x22>
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4408      	add	r0, r1
 8004f8e:	6010      	str	r0, [r2, #0]
 8004f90:	6053      	str	r3, [r2, #4]
 8004f92:	e7da      	b.n	8004f4a <_free_r+0x22>
 8004f94:	d902      	bls.n	8004f9c <_free_r+0x74>
 8004f96:	230c      	movs	r3, #12
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	e7d6      	b.n	8004f4a <_free_r+0x22>
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	1821      	adds	r1, r4, r0
 8004fa0:	428b      	cmp	r3, r1
 8004fa2:	bf01      	itttt	eq
 8004fa4:	6819      	ldreq	r1, [r3, #0]
 8004fa6:	685b      	ldreq	r3, [r3, #4]
 8004fa8:	1809      	addeq	r1, r1, r0
 8004faa:	6021      	streq	r1, [r4, #0]
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	6054      	str	r4, [r2, #4]
 8004fb0:	e7cb      	b.n	8004f4a <_free_r+0x22>
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	200003d0 	.word	0x200003d0

08004fb8 <malloc>:
 8004fb8:	4b02      	ldr	r3, [pc, #8]	@ (8004fc4 <malloc+0xc>)
 8004fba:	4601      	mov	r1, r0
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	f000 b825 	b.w	800500c <_malloc_r>
 8004fc2:	bf00      	nop
 8004fc4:	20000018 	.word	0x20000018

08004fc8 <sbrk_aligned>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	4e0f      	ldr	r6, [pc, #60]	@ (8005008 <sbrk_aligned+0x40>)
 8004fcc:	460c      	mov	r4, r1
 8004fce:	6831      	ldr	r1, [r6, #0]
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	b911      	cbnz	r1, 8004fda <sbrk_aligned+0x12>
 8004fd4:	f001 fdf6 	bl	8006bc4 <_sbrk_r>
 8004fd8:	6030      	str	r0, [r6, #0]
 8004fda:	4621      	mov	r1, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f001 fdf1 	bl	8006bc4 <_sbrk_r>
 8004fe2:	1c43      	adds	r3, r0, #1
 8004fe4:	d103      	bne.n	8004fee <sbrk_aligned+0x26>
 8004fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8004fea:	4620      	mov	r0, r4
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
 8004fee:	1cc4      	adds	r4, r0, #3
 8004ff0:	f024 0403 	bic.w	r4, r4, #3
 8004ff4:	42a0      	cmp	r0, r4
 8004ff6:	d0f8      	beq.n	8004fea <sbrk_aligned+0x22>
 8004ff8:	1a21      	subs	r1, r4, r0
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f001 fde2 	bl	8006bc4 <_sbrk_r>
 8005000:	3001      	adds	r0, #1
 8005002:	d1f2      	bne.n	8004fea <sbrk_aligned+0x22>
 8005004:	e7ef      	b.n	8004fe6 <sbrk_aligned+0x1e>
 8005006:	bf00      	nop
 8005008:	200003cc 	.word	0x200003cc

0800500c <_malloc_r>:
 800500c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005010:	1ccd      	adds	r5, r1, #3
 8005012:	f025 0503 	bic.w	r5, r5, #3
 8005016:	3508      	adds	r5, #8
 8005018:	2d0c      	cmp	r5, #12
 800501a:	bf38      	it	cc
 800501c:	250c      	movcc	r5, #12
 800501e:	2d00      	cmp	r5, #0
 8005020:	4606      	mov	r6, r0
 8005022:	db01      	blt.n	8005028 <_malloc_r+0x1c>
 8005024:	42a9      	cmp	r1, r5
 8005026:	d904      	bls.n	8005032 <_malloc_r+0x26>
 8005028:	230c      	movs	r3, #12
 800502a:	6033      	str	r3, [r6, #0]
 800502c:	2000      	movs	r0, #0
 800502e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005108 <_malloc_r+0xfc>
 8005036:	f000 f869 	bl	800510c <__malloc_lock>
 800503a:	f8d8 3000 	ldr.w	r3, [r8]
 800503e:	461c      	mov	r4, r3
 8005040:	bb44      	cbnz	r4, 8005094 <_malloc_r+0x88>
 8005042:	4629      	mov	r1, r5
 8005044:	4630      	mov	r0, r6
 8005046:	f7ff ffbf 	bl	8004fc8 <sbrk_aligned>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	4604      	mov	r4, r0
 800504e:	d158      	bne.n	8005102 <_malloc_r+0xf6>
 8005050:	f8d8 4000 	ldr.w	r4, [r8]
 8005054:	4627      	mov	r7, r4
 8005056:	2f00      	cmp	r7, #0
 8005058:	d143      	bne.n	80050e2 <_malloc_r+0xd6>
 800505a:	2c00      	cmp	r4, #0
 800505c:	d04b      	beq.n	80050f6 <_malloc_r+0xea>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	4639      	mov	r1, r7
 8005062:	4630      	mov	r0, r6
 8005064:	eb04 0903 	add.w	r9, r4, r3
 8005068:	f001 fdac 	bl	8006bc4 <_sbrk_r>
 800506c:	4581      	cmp	r9, r0
 800506e:	d142      	bne.n	80050f6 <_malloc_r+0xea>
 8005070:	6821      	ldr	r1, [r4, #0]
 8005072:	4630      	mov	r0, r6
 8005074:	1a6d      	subs	r5, r5, r1
 8005076:	4629      	mov	r1, r5
 8005078:	f7ff ffa6 	bl	8004fc8 <sbrk_aligned>
 800507c:	3001      	adds	r0, #1
 800507e:	d03a      	beq.n	80050f6 <_malloc_r+0xea>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	442b      	add	r3, r5
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	f8d8 3000 	ldr.w	r3, [r8]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	bb62      	cbnz	r2, 80050e8 <_malloc_r+0xdc>
 800508e:	f8c8 7000 	str.w	r7, [r8]
 8005092:	e00f      	b.n	80050b4 <_malloc_r+0xa8>
 8005094:	6822      	ldr	r2, [r4, #0]
 8005096:	1b52      	subs	r2, r2, r5
 8005098:	d420      	bmi.n	80050dc <_malloc_r+0xd0>
 800509a:	2a0b      	cmp	r2, #11
 800509c:	d917      	bls.n	80050ce <_malloc_r+0xc2>
 800509e:	1961      	adds	r1, r4, r5
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	6025      	str	r5, [r4, #0]
 80050a4:	bf18      	it	ne
 80050a6:	6059      	strne	r1, [r3, #4]
 80050a8:	6863      	ldr	r3, [r4, #4]
 80050aa:	bf08      	it	eq
 80050ac:	f8c8 1000 	streq.w	r1, [r8]
 80050b0:	5162      	str	r2, [r4, r5]
 80050b2:	604b      	str	r3, [r1, #4]
 80050b4:	4630      	mov	r0, r6
 80050b6:	f000 f82f 	bl	8005118 <__malloc_unlock>
 80050ba:	f104 000b 	add.w	r0, r4, #11
 80050be:	1d23      	adds	r3, r4, #4
 80050c0:	f020 0007 	bic.w	r0, r0, #7
 80050c4:	1ac2      	subs	r2, r0, r3
 80050c6:	bf1c      	itt	ne
 80050c8:	1a1b      	subne	r3, r3, r0
 80050ca:	50a3      	strne	r3, [r4, r2]
 80050cc:	e7af      	b.n	800502e <_malloc_r+0x22>
 80050ce:	6862      	ldr	r2, [r4, #4]
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	bf0c      	ite	eq
 80050d4:	f8c8 2000 	streq.w	r2, [r8]
 80050d8:	605a      	strne	r2, [r3, #4]
 80050da:	e7eb      	b.n	80050b4 <_malloc_r+0xa8>
 80050dc:	4623      	mov	r3, r4
 80050de:	6864      	ldr	r4, [r4, #4]
 80050e0:	e7ae      	b.n	8005040 <_malloc_r+0x34>
 80050e2:	463c      	mov	r4, r7
 80050e4:	687f      	ldr	r7, [r7, #4]
 80050e6:	e7b6      	b.n	8005056 <_malloc_r+0x4a>
 80050e8:	461a      	mov	r2, r3
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d1fb      	bne.n	80050e8 <_malloc_r+0xdc>
 80050f0:	2300      	movs	r3, #0
 80050f2:	6053      	str	r3, [r2, #4]
 80050f4:	e7de      	b.n	80050b4 <_malloc_r+0xa8>
 80050f6:	230c      	movs	r3, #12
 80050f8:	4630      	mov	r0, r6
 80050fa:	6033      	str	r3, [r6, #0]
 80050fc:	f000 f80c 	bl	8005118 <__malloc_unlock>
 8005100:	e794      	b.n	800502c <_malloc_r+0x20>
 8005102:	6005      	str	r5, [r0, #0]
 8005104:	e7d6      	b.n	80050b4 <_malloc_r+0xa8>
 8005106:	bf00      	nop
 8005108:	200003d0 	.word	0x200003d0

0800510c <__malloc_lock>:
 800510c:	4801      	ldr	r0, [pc, #4]	@ (8005114 <__malloc_lock+0x8>)
 800510e:	f7ff b8a6 	b.w	800425e <__retarget_lock_acquire_recursive>
 8005112:	bf00      	nop
 8005114:	200003c8 	.word	0x200003c8

08005118 <__malloc_unlock>:
 8005118:	4801      	ldr	r0, [pc, #4]	@ (8005120 <__malloc_unlock+0x8>)
 800511a:	f7ff b8a1 	b.w	8004260 <__retarget_lock_release_recursive>
 800511e:	bf00      	nop
 8005120:	200003c8 	.word	0x200003c8

08005124 <_Balloc>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	69c6      	ldr	r6, [r0, #28]
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
 800512c:	b976      	cbnz	r6, 800514c <_Balloc+0x28>
 800512e:	2010      	movs	r0, #16
 8005130:	f7ff ff42 	bl	8004fb8 <malloc>
 8005134:	4602      	mov	r2, r0
 8005136:	61e0      	str	r0, [r4, #28]
 8005138:	b920      	cbnz	r0, 8005144 <_Balloc+0x20>
 800513a:	216b      	movs	r1, #107	@ 0x6b
 800513c:	4b17      	ldr	r3, [pc, #92]	@ (800519c <_Balloc+0x78>)
 800513e:	4818      	ldr	r0, [pc, #96]	@ (80051a0 <_Balloc+0x7c>)
 8005140:	f001 fd64 	bl	8006c0c <__assert_func>
 8005144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005148:	6006      	str	r6, [r0, #0]
 800514a:	60c6      	str	r6, [r0, #12]
 800514c:	69e6      	ldr	r6, [r4, #28]
 800514e:	68f3      	ldr	r3, [r6, #12]
 8005150:	b183      	cbz	r3, 8005174 <_Balloc+0x50>
 8005152:	69e3      	ldr	r3, [r4, #28]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800515a:	b9b8      	cbnz	r0, 800518c <_Balloc+0x68>
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f605 	lsl.w	r6, r1, r5
 8005162:	1d72      	adds	r2, r6, #5
 8005164:	4620      	mov	r0, r4
 8005166:	0092      	lsls	r2, r2, #2
 8005168:	f001 fd6e 	bl	8006c48 <_calloc_r>
 800516c:	b160      	cbz	r0, 8005188 <_Balloc+0x64>
 800516e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005172:	e00e      	b.n	8005192 <_Balloc+0x6e>
 8005174:	2221      	movs	r2, #33	@ 0x21
 8005176:	2104      	movs	r1, #4
 8005178:	4620      	mov	r0, r4
 800517a:	f001 fd65 	bl	8006c48 <_calloc_r>
 800517e:	69e3      	ldr	r3, [r4, #28]
 8005180:	60f0      	str	r0, [r6, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e4      	bne.n	8005152 <_Balloc+0x2e>
 8005188:	2000      	movs	r0, #0
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	6802      	ldr	r2, [r0, #0]
 800518e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005192:	2300      	movs	r3, #0
 8005194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005198:	e7f7      	b.n	800518a <_Balloc+0x66>
 800519a:	bf00      	nop
 800519c:	08007986 	.word	0x08007986
 80051a0:	08007a06 	.word	0x08007a06

080051a4 <_Bfree>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	69c6      	ldr	r6, [r0, #28]
 80051a8:	4605      	mov	r5, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b976      	cbnz	r6, 80051cc <_Bfree+0x28>
 80051ae:	2010      	movs	r0, #16
 80051b0:	f7ff ff02 	bl	8004fb8 <malloc>
 80051b4:	4602      	mov	r2, r0
 80051b6:	61e8      	str	r0, [r5, #28]
 80051b8:	b920      	cbnz	r0, 80051c4 <_Bfree+0x20>
 80051ba:	218f      	movs	r1, #143	@ 0x8f
 80051bc:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <_Bfree+0x3c>)
 80051be:	4809      	ldr	r0, [pc, #36]	@ (80051e4 <_Bfree+0x40>)
 80051c0:	f001 fd24 	bl	8006c0c <__assert_func>
 80051c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c8:	6006      	str	r6, [r0, #0]
 80051ca:	60c6      	str	r6, [r0, #12]
 80051cc:	b13c      	cbz	r4, 80051de <_Bfree+0x3a>
 80051ce:	69eb      	ldr	r3, [r5, #28]
 80051d0:	6862      	ldr	r2, [r4, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d8:	6021      	str	r1, [r4, #0]
 80051da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	08007986 	.word	0x08007986
 80051e4:	08007a06 	.word	0x08007a06

080051e8 <__multadd>:
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	4607      	mov	r7, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	461e      	mov	r6, r3
 80051f2:	2000      	movs	r0, #0
 80051f4:	690d      	ldr	r5, [r1, #16]
 80051f6:	f101 0c14 	add.w	ip, r1, #20
 80051fa:	f8dc 3000 	ldr.w	r3, [ip]
 80051fe:	3001      	adds	r0, #1
 8005200:	b299      	uxth	r1, r3
 8005202:	fb02 6101 	mla	r1, r2, r1, r6
 8005206:	0c1e      	lsrs	r6, r3, #16
 8005208:	0c0b      	lsrs	r3, r1, #16
 800520a:	fb02 3306 	mla	r3, r2, r6, r3
 800520e:	b289      	uxth	r1, r1
 8005210:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005214:	4285      	cmp	r5, r0
 8005216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800521a:	f84c 1b04 	str.w	r1, [ip], #4
 800521e:	dcec      	bgt.n	80051fa <__multadd+0x12>
 8005220:	b30e      	cbz	r6, 8005266 <__multadd+0x7e>
 8005222:	68a3      	ldr	r3, [r4, #8]
 8005224:	42ab      	cmp	r3, r5
 8005226:	dc19      	bgt.n	800525c <__multadd+0x74>
 8005228:	6861      	ldr	r1, [r4, #4]
 800522a:	4638      	mov	r0, r7
 800522c:	3101      	adds	r1, #1
 800522e:	f7ff ff79 	bl	8005124 <_Balloc>
 8005232:	4680      	mov	r8, r0
 8005234:	b928      	cbnz	r0, 8005242 <__multadd+0x5a>
 8005236:	4602      	mov	r2, r0
 8005238:	21ba      	movs	r1, #186	@ 0xba
 800523a:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <__multadd+0x84>)
 800523c:	480c      	ldr	r0, [pc, #48]	@ (8005270 <__multadd+0x88>)
 800523e:	f001 fce5 	bl	8006c0c <__assert_func>
 8005242:	6922      	ldr	r2, [r4, #16]
 8005244:	f104 010c 	add.w	r1, r4, #12
 8005248:	3202      	adds	r2, #2
 800524a:	0092      	lsls	r2, r2, #2
 800524c:	300c      	adds	r0, #12
 800524e:	f001 fcc9 	bl	8006be4 <memcpy>
 8005252:	4621      	mov	r1, r4
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff ffa5 	bl	80051a4 <_Bfree>
 800525a:	4644      	mov	r4, r8
 800525c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005260:	3501      	adds	r5, #1
 8005262:	615e      	str	r6, [r3, #20]
 8005264:	6125      	str	r5, [r4, #16]
 8005266:	4620      	mov	r0, r4
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	080079f5 	.word	0x080079f5
 8005270:	08007a06 	.word	0x08007a06

08005274 <__s2b>:
 8005274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005278:	4615      	mov	r5, r2
 800527a:	2209      	movs	r2, #9
 800527c:	461f      	mov	r7, r3
 800527e:	3308      	adds	r3, #8
 8005280:	460c      	mov	r4, r1
 8005282:	fb93 f3f2 	sdiv	r3, r3, r2
 8005286:	4606      	mov	r6, r0
 8005288:	2201      	movs	r2, #1
 800528a:	2100      	movs	r1, #0
 800528c:	429a      	cmp	r2, r3
 800528e:	db09      	blt.n	80052a4 <__s2b+0x30>
 8005290:	4630      	mov	r0, r6
 8005292:	f7ff ff47 	bl	8005124 <_Balloc>
 8005296:	b940      	cbnz	r0, 80052aa <__s2b+0x36>
 8005298:	4602      	mov	r2, r0
 800529a:	21d3      	movs	r1, #211	@ 0xd3
 800529c:	4b18      	ldr	r3, [pc, #96]	@ (8005300 <__s2b+0x8c>)
 800529e:	4819      	ldr	r0, [pc, #100]	@ (8005304 <__s2b+0x90>)
 80052a0:	f001 fcb4 	bl	8006c0c <__assert_func>
 80052a4:	0052      	lsls	r2, r2, #1
 80052a6:	3101      	adds	r1, #1
 80052a8:	e7f0      	b.n	800528c <__s2b+0x18>
 80052aa:	9b08      	ldr	r3, [sp, #32]
 80052ac:	2d09      	cmp	r5, #9
 80052ae:	6143      	str	r3, [r0, #20]
 80052b0:	f04f 0301 	mov.w	r3, #1
 80052b4:	6103      	str	r3, [r0, #16]
 80052b6:	dd16      	ble.n	80052e6 <__s2b+0x72>
 80052b8:	f104 0909 	add.w	r9, r4, #9
 80052bc:	46c8      	mov	r8, r9
 80052be:	442c      	add	r4, r5
 80052c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80052c4:	4601      	mov	r1, r0
 80052c6:	220a      	movs	r2, #10
 80052c8:	4630      	mov	r0, r6
 80052ca:	3b30      	subs	r3, #48	@ 0x30
 80052cc:	f7ff ff8c 	bl	80051e8 <__multadd>
 80052d0:	45a0      	cmp	r8, r4
 80052d2:	d1f5      	bne.n	80052c0 <__s2b+0x4c>
 80052d4:	f1a5 0408 	sub.w	r4, r5, #8
 80052d8:	444c      	add	r4, r9
 80052da:	1b2d      	subs	r5, r5, r4
 80052dc:	1963      	adds	r3, r4, r5
 80052de:	42bb      	cmp	r3, r7
 80052e0:	db04      	blt.n	80052ec <__s2b+0x78>
 80052e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e6:	2509      	movs	r5, #9
 80052e8:	340a      	adds	r4, #10
 80052ea:	e7f6      	b.n	80052da <__s2b+0x66>
 80052ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052f0:	4601      	mov	r1, r0
 80052f2:	220a      	movs	r2, #10
 80052f4:	4630      	mov	r0, r6
 80052f6:	3b30      	subs	r3, #48	@ 0x30
 80052f8:	f7ff ff76 	bl	80051e8 <__multadd>
 80052fc:	e7ee      	b.n	80052dc <__s2b+0x68>
 80052fe:	bf00      	nop
 8005300:	080079f5 	.word	0x080079f5
 8005304:	08007a06 	.word	0x08007a06

08005308 <__hi0bits>:
 8005308:	4603      	mov	r3, r0
 800530a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800530e:	bf3a      	itte	cc
 8005310:	0403      	lslcc	r3, r0, #16
 8005312:	2010      	movcc	r0, #16
 8005314:	2000      	movcs	r0, #0
 8005316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800531a:	bf3c      	itt	cc
 800531c:	021b      	lslcc	r3, r3, #8
 800531e:	3008      	addcc	r0, #8
 8005320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005324:	bf3c      	itt	cc
 8005326:	011b      	lslcc	r3, r3, #4
 8005328:	3004      	addcc	r0, #4
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532e:	bf3c      	itt	cc
 8005330:	009b      	lslcc	r3, r3, #2
 8005332:	3002      	addcc	r0, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	db05      	blt.n	8005344 <__hi0bits+0x3c>
 8005338:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800533c:	f100 0001 	add.w	r0, r0, #1
 8005340:	bf08      	it	eq
 8005342:	2020      	moveq	r0, #32
 8005344:	4770      	bx	lr

08005346 <__lo0bits>:
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	4602      	mov	r2, r0
 800534a:	f013 0007 	ands.w	r0, r3, #7
 800534e:	d00b      	beq.n	8005368 <__lo0bits+0x22>
 8005350:	07d9      	lsls	r1, r3, #31
 8005352:	d421      	bmi.n	8005398 <__lo0bits+0x52>
 8005354:	0798      	lsls	r0, r3, #30
 8005356:	bf49      	itett	mi
 8005358:	085b      	lsrmi	r3, r3, #1
 800535a:	089b      	lsrpl	r3, r3, #2
 800535c:	2001      	movmi	r0, #1
 800535e:	6013      	strmi	r3, [r2, #0]
 8005360:	bf5c      	itt	pl
 8005362:	2002      	movpl	r0, #2
 8005364:	6013      	strpl	r3, [r2, #0]
 8005366:	4770      	bx	lr
 8005368:	b299      	uxth	r1, r3
 800536a:	b909      	cbnz	r1, 8005370 <__lo0bits+0x2a>
 800536c:	2010      	movs	r0, #16
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	b2d9      	uxtb	r1, r3
 8005372:	b909      	cbnz	r1, 8005378 <__lo0bits+0x32>
 8005374:	3008      	adds	r0, #8
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	0719      	lsls	r1, r3, #28
 800537a:	bf04      	itt	eq
 800537c:	091b      	lsreq	r3, r3, #4
 800537e:	3004      	addeq	r0, #4
 8005380:	0799      	lsls	r1, r3, #30
 8005382:	bf04      	itt	eq
 8005384:	089b      	lsreq	r3, r3, #2
 8005386:	3002      	addeq	r0, #2
 8005388:	07d9      	lsls	r1, r3, #31
 800538a:	d403      	bmi.n	8005394 <__lo0bits+0x4e>
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	f100 0001 	add.w	r0, r0, #1
 8005392:	d003      	beq.n	800539c <__lo0bits+0x56>
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4770      	bx	lr
 8005398:	2000      	movs	r0, #0
 800539a:	4770      	bx	lr
 800539c:	2020      	movs	r0, #32
 800539e:	4770      	bx	lr

080053a0 <__i2b>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	460c      	mov	r4, r1
 80053a4:	2101      	movs	r1, #1
 80053a6:	f7ff febd 	bl	8005124 <_Balloc>
 80053aa:	4602      	mov	r2, r0
 80053ac:	b928      	cbnz	r0, 80053ba <__i2b+0x1a>
 80053ae:	f240 1145 	movw	r1, #325	@ 0x145
 80053b2:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <__i2b+0x24>)
 80053b4:	4804      	ldr	r0, [pc, #16]	@ (80053c8 <__i2b+0x28>)
 80053b6:	f001 fc29 	bl	8006c0c <__assert_func>
 80053ba:	2301      	movs	r3, #1
 80053bc:	6144      	str	r4, [r0, #20]
 80053be:	6103      	str	r3, [r0, #16]
 80053c0:	bd10      	pop	{r4, pc}
 80053c2:	bf00      	nop
 80053c4:	080079f5 	.word	0x080079f5
 80053c8:	08007a06 	.word	0x08007a06

080053cc <__multiply>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	4614      	mov	r4, r2
 80053d2:	690a      	ldr	r2, [r1, #16]
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	460f      	mov	r7, r1
 80053d8:	429a      	cmp	r2, r3
 80053da:	bfa2      	ittt	ge
 80053dc:	4623      	movge	r3, r4
 80053de:	460c      	movge	r4, r1
 80053e0:	461f      	movge	r7, r3
 80053e2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053e6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80053ea:	68a3      	ldr	r3, [r4, #8]
 80053ec:	6861      	ldr	r1, [r4, #4]
 80053ee:	eb0a 0609 	add.w	r6, sl, r9
 80053f2:	42b3      	cmp	r3, r6
 80053f4:	b085      	sub	sp, #20
 80053f6:	bfb8      	it	lt
 80053f8:	3101      	addlt	r1, #1
 80053fa:	f7ff fe93 	bl	8005124 <_Balloc>
 80053fe:	b930      	cbnz	r0, 800540e <__multiply+0x42>
 8005400:	4602      	mov	r2, r0
 8005402:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005406:	4b43      	ldr	r3, [pc, #268]	@ (8005514 <__multiply+0x148>)
 8005408:	4843      	ldr	r0, [pc, #268]	@ (8005518 <__multiply+0x14c>)
 800540a:	f001 fbff 	bl	8006c0c <__assert_func>
 800540e:	f100 0514 	add.w	r5, r0, #20
 8005412:	462b      	mov	r3, r5
 8005414:	2200      	movs	r2, #0
 8005416:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800541a:	4543      	cmp	r3, r8
 800541c:	d321      	bcc.n	8005462 <__multiply+0x96>
 800541e:	f107 0114 	add.w	r1, r7, #20
 8005422:	f104 0214 	add.w	r2, r4, #20
 8005426:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800542a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800542e:	9302      	str	r3, [sp, #8]
 8005430:	1b13      	subs	r3, r2, r4
 8005432:	3b15      	subs	r3, #21
 8005434:	f023 0303 	bic.w	r3, r3, #3
 8005438:	3304      	adds	r3, #4
 800543a:	f104 0715 	add.w	r7, r4, #21
 800543e:	42ba      	cmp	r2, r7
 8005440:	bf38      	it	cc
 8005442:	2304      	movcc	r3, #4
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	9b02      	ldr	r3, [sp, #8]
 8005448:	9103      	str	r1, [sp, #12]
 800544a:	428b      	cmp	r3, r1
 800544c:	d80c      	bhi.n	8005468 <__multiply+0x9c>
 800544e:	2e00      	cmp	r6, #0
 8005450:	dd03      	ble.n	800545a <__multiply+0x8e>
 8005452:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005456:	2b00      	cmp	r3, #0
 8005458:	d05a      	beq.n	8005510 <__multiply+0x144>
 800545a:	6106      	str	r6, [r0, #16]
 800545c:	b005      	add	sp, #20
 800545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005462:	f843 2b04 	str.w	r2, [r3], #4
 8005466:	e7d8      	b.n	800541a <__multiply+0x4e>
 8005468:	f8b1 a000 	ldrh.w	sl, [r1]
 800546c:	f1ba 0f00 	cmp.w	sl, #0
 8005470:	d023      	beq.n	80054ba <__multiply+0xee>
 8005472:	46a9      	mov	r9, r5
 8005474:	f04f 0c00 	mov.w	ip, #0
 8005478:	f104 0e14 	add.w	lr, r4, #20
 800547c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005480:	f8d9 3000 	ldr.w	r3, [r9]
 8005484:	fa1f fb87 	uxth.w	fp, r7
 8005488:	b29b      	uxth	r3, r3
 800548a:	fb0a 330b 	mla	r3, sl, fp, r3
 800548e:	4463      	add	r3, ip
 8005490:	f8d9 c000 	ldr.w	ip, [r9]
 8005494:	0c3f      	lsrs	r7, r7, #16
 8005496:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800549a:	fb0a c707 	mla	r7, sl, r7, ip
 800549e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054a8:	4572      	cmp	r2, lr
 80054aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80054ae:	f849 3b04 	str.w	r3, [r9], #4
 80054b2:	d8e3      	bhi.n	800547c <__multiply+0xb0>
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	f845 c003 	str.w	ip, [r5, r3]
 80054ba:	9b03      	ldr	r3, [sp, #12]
 80054bc:	3104      	adds	r1, #4
 80054be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80054c2:	f1b9 0f00 	cmp.w	r9, #0
 80054c6:	d021      	beq.n	800550c <__multiply+0x140>
 80054c8:	46ae      	mov	lr, r5
 80054ca:	f04f 0a00 	mov.w	sl, #0
 80054ce:	682b      	ldr	r3, [r5, #0]
 80054d0:	f104 0c14 	add.w	ip, r4, #20
 80054d4:	f8bc b000 	ldrh.w	fp, [ip]
 80054d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	fb09 770b 	mla	r7, r9, fp, r7
 80054e2:	4457      	add	r7, sl
 80054e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054e8:	f84e 3b04 	str.w	r3, [lr], #4
 80054ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054f4:	f8be 3000 	ldrh.w	r3, [lr]
 80054f8:	4562      	cmp	r2, ip
 80054fa:	fb09 330a 	mla	r3, r9, sl, r3
 80054fe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005502:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005506:	d8e5      	bhi.n	80054d4 <__multiply+0x108>
 8005508:	9f01      	ldr	r7, [sp, #4]
 800550a:	51eb      	str	r3, [r5, r7]
 800550c:	3504      	adds	r5, #4
 800550e:	e79a      	b.n	8005446 <__multiply+0x7a>
 8005510:	3e01      	subs	r6, #1
 8005512:	e79c      	b.n	800544e <__multiply+0x82>
 8005514:	080079f5 	.word	0x080079f5
 8005518:	08007a06 	.word	0x08007a06

0800551c <__pow5mult>:
 800551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005520:	4615      	mov	r5, r2
 8005522:	f012 0203 	ands.w	r2, r2, #3
 8005526:	4607      	mov	r7, r0
 8005528:	460e      	mov	r6, r1
 800552a:	d007      	beq.n	800553c <__pow5mult+0x20>
 800552c:	4c25      	ldr	r4, [pc, #148]	@ (80055c4 <__pow5mult+0xa8>)
 800552e:	3a01      	subs	r2, #1
 8005530:	2300      	movs	r3, #0
 8005532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005536:	f7ff fe57 	bl	80051e8 <__multadd>
 800553a:	4606      	mov	r6, r0
 800553c:	10ad      	asrs	r5, r5, #2
 800553e:	d03d      	beq.n	80055bc <__pow5mult+0xa0>
 8005540:	69fc      	ldr	r4, [r7, #28]
 8005542:	b97c      	cbnz	r4, 8005564 <__pow5mult+0x48>
 8005544:	2010      	movs	r0, #16
 8005546:	f7ff fd37 	bl	8004fb8 <malloc>
 800554a:	4602      	mov	r2, r0
 800554c:	61f8      	str	r0, [r7, #28]
 800554e:	b928      	cbnz	r0, 800555c <__pow5mult+0x40>
 8005550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005554:	4b1c      	ldr	r3, [pc, #112]	@ (80055c8 <__pow5mult+0xac>)
 8005556:	481d      	ldr	r0, [pc, #116]	@ (80055cc <__pow5mult+0xb0>)
 8005558:	f001 fb58 	bl	8006c0c <__assert_func>
 800555c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005560:	6004      	str	r4, [r0, #0]
 8005562:	60c4      	str	r4, [r0, #12]
 8005564:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800556c:	b94c      	cbnz	r4, 8005582 <__pow5mult+0x66>
 800556e:	f240 2171 	movw	r1, #625	@ 0x271
 8005572:	4638      	mov	r0, r7
 8005574:	f7ff ff14 	bl	80053a0 <__i2b>
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005580:	6003      	str	r3, [r0, #0]
 8005582:	f04f 0900 	mov.w	r9, #0
 8005586:	07eb      	lsls	r3, r5, #31
 8005588:	d50a      	bpl.n	80055a0 <__pow5mult+0x84>
 800558a:	4631      	mov	r1, r6
 800558c:	4622      	mov	r2, r4
 800558e:	4638      	mov	r0, r7
 8005590:	f7ff ff1c 	bl	80053cc <__multiply>
 8005594:	4680      	mov	r8, r0
 8005596:	4631      	mov	r1, r6
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff fe03 	bl	80051a4 <_Bfree>
 800559e:	4646      	mov	r6, r8
 80055a0:	106d      	asrs	r5, r5, #1
 80055a2:	d00b      	beq.n	80055bc <__pow5mult+0xa0>
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	b938      	cbnz	r0, 80055b8 <__pow5mult+0x9c>
 80055a8:	4622      	mov	r2, r4
 80055aa:	4621      	mov	r1, r4
 80055ac:	4638      	mov	r0, r7
 80055ae:	f7ff ff0d 	bl	80053cc <__multiply>
 80055b2:	6020      	str	r0, [r4, #0]
 80055b4:	f8c0 9000 	str.w	r9, [r0]
 80055b8:	4604      	mov	r4, r0
 80055ba:	e7e4      	b.n	8005586 <__pow5mult+0x6a>
 80055bc:	4630      	mov	r0, r6
 80055be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c2:	bf00      	nop
 80055c4:	08007a60 	.word	0x08007a60
 80055c8:	08007986 	.word	0x08007986
 80055cc:	08007a06 	.word	0x08007a06

080055d0 <__lshift>:
 80055d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	460c      	mov	r4, r1
 80055d6:	4607      	mov	r7, r0
 80055d8:	4691      	mov	r9, r2
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6849      	ldr	r1, [r1, #4]
 80055de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055e2:	68a3      	ldr	r3, [r4, #8]
 80055e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055e8:	f108 0601 	add.w	r6, r8, #1
 80055ec:	42b3      	cmp	r3, r6
 80055ee:	db0b      	blt.n	8005608 <__lshift+0x38>
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff fd97 	bl	8005124 <_Balloc>
 80055f6:	4605      	mov	r5, r0
 80055f8:	b948      	cbnz	r0, 800560e <__lshift+0x3e>
 80055fa:	4602      	mov	r2, r0
 80055fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005600:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <__lshift+0xd0>)
 8005602:	4828      	ldr	r0, [pc, #160]	@ (80056a4 <__lshift+0xd4>)
 8005604:	f001 fb02 	bl	8006c0c <__assert_func>
 8005608:	3101      	adds	r1, #1
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	e7ee      	b.n	80055ec <__lshift+0x1c>
 800560e:	2300      	movs	r3, #0
 8005610:	f100 0114 	add.w	r1, r0, #20
 8005614:	f100 0210 	add.w	r2, r0, #16
 8005618:	4618      	mov	r0, r3
 800561a:	4553      	cmp	r3, sl
 800561c:	db33      	blt.n	8005686 <__lshift+0xb6>
 800561e:	6920      	ldr	r0, [r4, #16]
 8005620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005624:	f104 0314 	add.w	r3, r4, #20
 8005628:	f019 091f 	ands.w	r9, r9, #31
 800562c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005630:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005634:	d02b      	beq.n	800568e <__lshift+0xbe>
 8005636:	468a      	mov	sl, r1
 8005638:	2200      	movs	r2, #0
 800563a:	f1c9 0e20 	rsb	lr, r9, #32
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	fa00 f009 	lsl.w	r0, r0, r9
 8005644:	4310      	orrs	r0, r2
 8005646:	f84a 0b04 	str.w	r0, [sl], #4
 800564a:	f853 2b04 	ldr.w	r2, [r3], #4
 800564e:	459c      	cmp	ip, r3
 8005650:	fa22 f20e 	lsr.w	r2, r2, lr
 8005654:	d8f3      	bhi.n	800563e <__lshift+0x6e>
 8005656:	ebac 0304 	sub.w	r3, ip, r4
 800565a:	3b15      	subs	r3, #21
 800565c:	f023 0303 	bic.w	r3, r3, #3
 8005660:	3304      	adds	r3, #4
 8005662:	f104 0015 	add.w	r0, r4, #21
 8005666:	4584      	cmp	ip, r0
 8005668:	bf38      	it	cc
 800566a:	2304      	movcc	r3, #4
 800566c:	50ca      	str	r2, [r1, r3]
 800566e:	b10a      	cbz	r2, 8005674 <__lshift+0xa4>
 8005670:	f108 0602 	add.w	r6, r8, #2
 8005674:	3e01      	subs	r6, #1
 8005676:	4638      	mov	r0, r7
 8005678:	4621      	mov	r1, r4
 800567a:	612e      	str	r6, [r5, #16]
 800567c:	f7ff fd92 	bl	80051a4 <_Bfree>
 8005680:	4628      	mov	r0, r5
 8005682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005686:	f842 0f04 	str.w	r0, [r2, #4]!
 800568a:	3301      	adds	r3, #1
 800568c:	e7c5      	b.n	800561a <__lshift+0x4a>
 800568e:	3904      	subs	r1, #4
 8005690:	f853 2b04 	ldr.w	r2, [r3], #4
 8005694:	459c      	cmp	ip, r3
 8005696:	f841 2f04 	str.w	r2, [r1, #4]!
 800569a:	d8f9      	bhi.n	8005690 <__lshift+0xc0>
 800569c:	e7ea      	b.n	8005674 <__lshift+0xa4>
 800569e:	bf00      	nop
 80056a0:	080079f5 	.word	0x080079f5
 80056a4:	08007a06 	.word	0x08007a06

080056a8 <__mcmp>:
 80056a8:	4603      	mov	r3, r0
 80056aa:	690a      	ldr	r2, [r1, #16]
 80056ac:	6900      	ldr	r0, [r0, #16]
 80056ae:	b530      	push	{r4, r5, lr}
 80056b0:	1a80      	subs	r0, r0, r2
 80056b2:	d10e      	bne.n	80056d2 <__mcmp+0x2a>
 80056b4:	3314      	adds	r3, #20
 80056b6:	3114      	adds	r1, #20
 80056b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80056bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80056c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056c8:	4295      	cmp	r5, r2
 80056ca:	d003      	beq.n	80056d4 <__mcmp+0x2c>
 80056cc:	d205      	bcs.n	80056da <__mcmp+0x32>
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	bd30      	pop	{r4, r5, pc}
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d3f3      	bcc.n	80056c0 <__mcmp+0x18>
 80056d8:	e7fb      	b.n	80056d2 <__mcmp+0x2a>
 80056da:	2001      	movs	r0, #1
 80056dc:	e7f9      	b.n	80056d2 <__mcmp+0x2a>
	...

080056e0 <__mdiff>:
 80056e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	4689      	mov	r9, r1
 80056e6:	4606      	mov	r6, r0
 80056e8:	4611      	mov	r1, r2
 80056ea:	4648      	mov	r0, r9
 80056ec:	4614      	mov	r4, r2
 80056ee:	f7ff ffdb 	bl	80056a8 <__mcmp>
 80056f2:	1e05      	subs	r5, r0, #0
 80056f4:	d112      	bne.n	800571c <__mdiff+0x3c>
 80056f6:	4629      	mov	r1, r5
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7ff fd13 	bl	8005124 <_Balloc>
 80056fe:	4602      	mov	r2, r0
 8005700:	b928      	cbnz	r0, 800570e <__mdiff+0x2e>
 8005702:	f240 2137 	movw	r1, #567	@ 0x237
 8005706:	4b3e      	ldr	r3, [pc, #248]	@ (8005800 <__mdiff+0x120>)
 8005708:	483e      	ldr	r0, [pc, #248]	@ (8005804 <__mdiff+0x124>)
 800570a:	f001 fa7f 	bl	8006c0c <__assert_func>
 800570e:	2301      	movs	r3, #1
 8005710:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005714:	4610      	mov	r0, r2
 8005716:	b003      	add	sp, #12
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	bfbc      	itt	lt
 800571e:	464b      	movlt	r3, r9
 8005720:	46a1      	movlt	r9, r4
 8005722:	4630      	mov	r0, r6
 8005724:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005728:	bfba      	itte	lt
 800572a:	461c      	movlt	r4, r3
 800572c:	2501      	movlt	r5, #1
 800572e:	2500      	movge	r5, #0
 8005730:	f7ff fcf8 	bl	8005124 <_Balloc>
 8005734:	4602      	mov	r2, r0
 8005736:	b918      	cbnz	r0, 8005740 <__mdiff+0x60>
 8005738:	f240 2145 	movw	r1, #581	@ 0x245
 800573c:	4b30      	ldr	r3, [pc, #192]	@ (8005800 <__mdiff+0x120>)
 800573e:	e7e3      	b.n	8005708 <__mdiff+0x28>
 8005740:	f100 0b14 	add.w	fp, r0, #20
 8005744:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005748:	f109 0310 	add.w	r3, r9, #16
 800574c:	60c5      	str	r5, [r0, #12]
 800574e:	f04f 0c00 	mov.w	ip, #0
 8005752:	f109 0514 	add.w	r5, r9, #20
 8005756:	46d9      	mov	r9, fp
 8005758:	6926      	ldr	r6, [r4, #16]
 800575a:	f104 0e14 	add.w	lr, r4, #20
 800575e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005762:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800576e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005772:	b281      	uxth	r1, r0
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	fa1f f38a 	uxth.w	r3, sl
 800577a:	1a5b      	subs	r3, r3, r1
 800577c:	0c00      	lsrs	r0, r0, #16
 800577e:	4463      	add	r3, ip
 8005780:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005784:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800578e:	4576      	cmp	r6, lr
 8005790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005794:	f849 3b04 	str.w	r3, [r9], #4
 8005798:	d8e6      	bhi.n	8005768 <__mdiff+0x88>
 800579a:	1b33      	subs	r3, r6, r4
 800579c:	3b15      	subs	r3, #21
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	3415      	adds	r4, #21
 80057a4:	3304      	adds	r3, #4
 80057a6:	42a6      	cmp	r6, r4
 80057a8:	bf38      	it	cc
 80057aa:	2304      	movcc	r3, #4
 80057ac:	441d      	add	r5, r3
 80057ae:	445b      	add	r3, fp
 80057b0:	461e      	mov	r6, r3
 80057b2:	462c      	mov	r4, r5
 80057b4:	4544      	cmp	r4, r8
 80057b6:	d30e      	bcc.n	80057d6 <__mdiff+0xf6>
 80057b8:	f108 0103 	add.w	r1, r8, #3
 80057bc:	1b49      	subs	r1, r1, r5
 80057be:	f021 0103 	bic.w	r1, r1, #3
 80057c2:	3d03      	subs	r5, #3
 80057c4:	45a8      	cmp	r8, r5
 80057c6:	bf38      	it	cc
 80057c8:	2100      	movcc	r1, #0
 80057ca:	440b      	add	r3, r1
 80057cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057d0:	b199      	cbz	r1, 80057fa <__mdiff+0x11a>
 80057d2:	6117      	str	r7, [r2, #16]
 80057d4:	e79e      	b.n	8005714 <__mdiff+0x34>
 80057d6:	46e6      	mov	lr, ip
 80057d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80057dc:	fa1f fc81 	uxth.w	ip, r1
 80057e0:	44f4      	add	ip, lr
 80057e2:	0c08      	lsrs	r0, r1, #16
 80057e4:	4471      	add	r1, lr
 80057e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057ea:	b289      	uxth	r1, r1
 80057ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057f4:	f846 1b04 	str.w	r1, [r6], #4
 80057f8:	e7dc      	b.n	80057b4 <__mdiff+0xd4>
 80057fa:	3f01      	subs	r7, #1
 80057fc:	e7e6      	b.n	80057cc <__mdiff+0xec>
 80057fe:	bf00      	nop
 8005800:	080079f5 	.word	0x080079f5
 8005804:	08007a06 	.word	0x08007a06

08005808 <__ulp>:
 8005808:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <__ulp+0x3c>)
 800580a:	400b      	ands	r3, r1
 800580c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc08      	bgt.n	8005826 <__ulp+0x1e>
 8005814:	425b      	negs	r3, r3
 8005816:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800581a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800581e:	da04      	bge.n	800582a <__ulp+0x22>
 8005820:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005824:	4113      	asrs	r3, r2
 8005826:	2200      	movs	r2, #0
 8005828:	e008      	b.n	800583c <__ulp+0x34>
 800582a:	f1a2 0314 	sub.w	r3, r2, #20
 800582e:	2b1e      	cmp	r3, #30
 8005830:	bfd6      	itet	le
 8005832:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005836:	2201      	movgt	r2, #1
 8005838:	40da      	lsrle	r2, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	7ff00000 	.word	0x7ff00000

08005848 <__b2d>:
 8005848:	6902      	ldr	r2, [r0, #16]
 800584a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584c:	f100 0614 	add.w	r6, r0, #20
 8005850:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005854:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005858:	4f1e      	ldr	r7, [pc, #120]	@ (80058d4 <__b2d+0x8c>)
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff fd54 	bl	8005308 <__hi0bits>
 8005860:	4603      	mov	r3, r0
 8005862:	f1c0 0020 	rsb	r0, r0, #32
 8005866:	2b0a      	cmp	r3, #10
 8005868:	f1a2 0504 	sub.w	r5, r2, #4
 800586c:	6008      	str	r0, [r1, #0]
 800586e:	dc12      	bgt.n	8005896 <__b2d+0x4e>
 8005870:	42ae      	cmp	r6, r5
 8005872:	bf2c      	ite	cs
 8005874:	2200      	movcs	r2, #0
 8005876:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800587a:	f1c3 0c0b 	rsb	ip, r3, #11
 800587e:	3315      	adds	r3, #21
 8005880:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005884:	fa04 f303 	lsl.w	r3, r4, r3
 8005888:	fa22 f20c 	lsr.w	r2, r2, ip
 800588c:	ea4e 0107 	orr.w	r1, lr, r7
 8005890:	431a      	orrs	r2, r3
 8005892:	4610      	mov	r0, r2
 8005894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005896:	42ae      	cmp	r6, r5
 8005898:	bf36      	itet	cc
 800589a:	f1a2 0508 	subcc.w	r5, r2, #8
 800589e:	2200      	movcs	r2, #0
 80058a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80058a4:	3b0b      	subs	r3, #11
 80058a6:	d012      	beq.n	80058ce <__b2d+0x86>
 80058a8:	f1c3 0720 	rsb	r7, r3, #32
 80058ac:	fa22 f107 	lsr.w	r1, r2, r7
 80058b0:	409c      	lsls	r4, r3
 80058b2:	430c      	orrs	r4, r1
 80058b4:	42b5      	cmp	r5, r6
 80058b6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80058ba:	bf94      	ite	ls
 80058bc:	2400      	movls	r4, #0
 80058be:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80058c2:	409a      	lsls	r2, r3
 80058c4:	40fc      	lsrs	r4, r7
 80058c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80058ca:	4322      	orrs	r2, r4
 80058cc:	e7e1      	b.n	8005892 <__b2d+0x4a>
 80058ce:	ea44 0107 	orr.w	r1, r4, r7
 80058d2:	e7de      	b.n	8005892 <__b2d+0x4a>
 80058d4:	3ff00000 	.word	0x3ff00000

080058d8 <__d2b>:
 80058d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80058dc:	2101      	movs	r1, #1
 80058de:	4690      	mov	r8, r2
 80058e0:	4699      	mov	r9, r3
 80058e2:	9e08      	ldr	r6, [sp, #32]
 80058e4:	f7ff fc1e 	bl	8005124 <_Balloc>
 80058e8:	4604      	mov	r4, r0
 80058ea:	b930      	cbnz	r0, 80058fa <__d2b+0x22>
 80058ec:	4602      	mov	r2, r0
 80058ee:	f240 310f 	movw	r1, #783	@ 0x30f
 80058f2:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <__d2b+0xa8>)
 80058f4:	4823      	ldr	r0, [pc, #140]	@ (8005984 <__d2b+0xac>)
 80058f6:	f001 f989 	bl	8006c0c <__assert_func>
 80058fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005902:	b10d      	cbz	r5, 8005908 <__d2b+0x30>
 8005904:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	f1b8 0300 	subs.w	r3, r8, #0
 800590e:	d024      	beq.n	800595a <__d2b+0x82>
 8005910:	4668      	mov	r0, sp
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	f7ff fd17 	bl	8005346 <__lo0bits>
 8005918:	e9dd 1200 	ldrd	r1, r2, [sp]
 800591c:	b1d8      	cbz	r0, 8005956 <__d2b+0x7e>
 800591e:	f1c0 0320 	rsb	r3, r0, #32
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	430b      	orrs	r3, r1
 8005928:	40c2      	lsrs	r2, r0
 800592a:	6163      	str	r3, [r4, #20]
 800592c:	9201      	str	r2, [sp, #4]
 800592e:	9b01      	ldr	r3, [sp, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2201      	moveq	r2, #1
 8005936:	2202      	movne	r2, #2
 8005938:	61a3      	str	r3, [r4, #24]
 800593a:	6122      	str	r2, [r4, #16]
 800593c:	b1ad      	cbz	r5, 800596a <__d2b+0x92>
 800593e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005942:	4405      	add	r5, r0
 8005944:	6035      	str	r5, [r6, #0]
 8005946:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800594a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800594c:	6018      	str	r0, [r3, #0]
 800594e:	4620      	mov	r0, r4
 8005950:	b002      	add	sp, #8
 8005952:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005956:	6161      	str	r1, [r4, #20]
 8005958:	e7e9      	b.n	800592e <__d2b+0x56>
 800595a:	a801      	add	r0, sp, #4
 800595c:	f7ff fcf3 	bl	8005346 <__lo0bits>
 8005960:	9b01      	ldr	r3, [sp, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	6163      	str	r3, [r4, #20]
 8005966:	3020      	adds	r0, #32
 8005968:	e7e7      	b.n	800593a <__d2b+0x62>
 800596a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800596e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005972:	6030      	str	r0, [r6, #0]
 8005974:	6918      	ldr	r0, [r3, #16]
 8005976:	f7ff fcc7 	bl	8005308 <__hi0bits>
 800597a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800597e:	e7e4      	b.n	800594a <__d2b+0x72>
 8005980:	080079f5 	.word	0x080079f5
 8005984:	08007a06 	.word	0x08007a06

08005988 <__ratio>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	b085      	sub	sp, #20
 800598e:	e9cd 1000 	strd	r1, r0, [sp]
 8005992:	a902      	add	r1, sp, #8
 8005994:	f7ff ff58 	bl	8005848 <__b2d>
 8005998:	468b      	mov	fp, r1
 800599a:	4606      	mov	r6, r0
 800599c:	460f      	mov	r7, r1
 800599e:	9800      	ldr	r0, [sp, #0]
 80059a0:	a903      	add	r1, sp, #12
 80059a2:	f7ff ff51 	bl	8005848 <__b2d>
 80059a6:	460d      	mov	r5, r1
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	4689      	mov	r9, r1
 80059ac:	6919      	ldr	r1, [r3, #16]
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	4604      	mov	r4, r0
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	4630      	mov	r0, r6
 80059b6:	1ac9      	subs	r1, r1, r3
 80059b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bfcd      	iteet	gt
 80059c6:	463a      	movgt	r2, r7
 80059c8:	462a      	movle	r2, r5
 80059ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80059ce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80059d2:	bfd8      	it	le
 80059d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80059d8:	464b      	mov	r3, r9
 80059da:	4622      	mov	r2, r4
 80059dc:	4659      	mov	r1, fp
 80059de:	f7fa febd 	bl	800075c <__aeabi_ddiv>
 80059e2:	b005      	add	sp, #20
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059e8 <__copybits>:
 80059e8:	3901      	subs	r1, #1
 80059ea:	b570      	push	{r4, r5, r6, lr}
 80059ec:	1149      	asrs	r1, r1, #5
 80059ee:	6914      	ldr	r4, [r2, #16]
 80059f0:	3101      	adds	r1, #1
 80059f2:	f102 0314 	add.w	r3, r2, #20
 80059f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059fe:	1f05      	subs	r5, r0, #4
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d30c      	bcc.n	8005a1e <__copybits+0x36>
 8005a04:	1aa3      	subs	r3, r4, r2
 8005a06:	3b11      	subs	r3, #17
 8005a08:	f023 0303 	bic.w	r3, r3, #3
 8005a0c:	3211      	adds	r2, #17
 8005a0e:	42a2      	cmp	r2, r4
 8005a10:	bf88      	it	hi
 8005a12:	2300      	movhi	r3, #0
 8005a14:	4418      	add	r0, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	4288      	cmp	r0, r1
 8005a1a:	d305      	bcc.n	8005a28 <__copybits+0x40>
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005a22:	f845 6f04 	str.w	r6, [r5, #4]!
 8005a26:	e7eb      	b.n	8005a00 <__copybits+0x18>
 8005a28:	f840 3b04 	str.w	r3, [r0], #4
 8005a2c:	e7f4      	b.n	8005a18 <__copybits+0x30>

08005a2e <__any_on>:
 8005a2e:	f100 0214 	add.w	r2, r0, #20
 8005a32:	6900      	ldr	r0, [r0, #16]
 8005a34:	114b      	asrs	r3, r1, #5
 8005a36:	4298      	cmp	r0, r3
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	db11      	blt.n	8005a60 <__any_on+0x32>
 8005a3c:	dd0a      	ble.n	8005a54 <__any_on+0x26>
 8005a3e:	f011 011f 	ands.w	r1, r1, #31
 8005a42:	d007      	beq.n	8005a54 <__any_on+0x26>
 8005a44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a48:	fa24 f001 	lsr.w	r0, r4, r1
 8005a4c:	fa00 f101 	lsl.w	r1, r0, r1
 8005a50:	428c      	cmp	r4, r1
 8005a52:	d10b      	bne.n	8005a6c <__any_on+0x3e>
 8005a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d803      	bhi.n	8005a64 <__any_on+0x36>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	bd10      	pop	{r4, pc}
 8005a60:	4603      	mov	r3, r0
 8005a62:	e7f7      	b.n	8005a54 <__any_on+0x26>
 8005a64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d0f5      	beq.n	8005a58 <__any_on+0x2a>
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	e7f6      	b.n	8005a5e <__any_on+0x30>

08005a70 <sulp>:
 8005a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a74:	460f      	mov	r7, r1
 8005a76:	4690      	mov	r8, r2
 8005a78:	f7ff fec6 	bl	8005808 <__ulp>
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	460d      	mov	r5, r1
 8005a80:	f1b8 0f00 	cmp.w	r8, #0
 8005a84:	d011      	beq.n	8005aaa <sulp+0x3a>
 8005a86:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dd0b      	ble.n	8005aaa <sulp+0x3a>
 8005a92:	2400      	movs	r4, #0
 8005a94:	051b      	lsls	r3, r3, #20
 8005a96:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a9a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	f7fa fd31 	bl	8000508 <__aeabi_dmul>
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab2:	0000      	movs	r0, r0
 8005ab4:	0000      	movs	r0, r0
	...

08005ab8 <_strtod_l>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	b09f      	sub	sp, #124	@ 0x7c
 8005abe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005ac6:	f04f 0a00 	mov.w	sl, #0
 8005aca:	f04f 0b00 	mov.w	fp, #0
 8005ace:	460a      	mov	r2, r1
 8005ad0:	9005      	str	r0, [sp, #20]
 8005ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ad4:	7811      	ldrb	r1, [r2, #0]
 8005ad6:	292b      	cmp	r1, #43	@ 0x2b
 8005ad8:	d048      	beq.n	8005b6c <_strtod_l+0xb4>
 8005ada:	d836      	bhi.n	8005b4a <_strtod_l+0x92>
 8005adc:	290d      	cmp	r1, #13
 8005ade:	d830      	bhi.n	8005b42 <_strtod_l+0x8a>
 8005ae0:	2908      	cmp	r1, #8
 8005ae2:	d830      	bhi.n	8005b46 <_strtod_l+0x8e>
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	d039      	beq.n	8005b5c <_strtod_l+0xa4>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005aec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005aee:	782a      	ldrb	r2, [r5, #0]
 8005af0:	2a30      	cmp	r2, #48	@ 0x30
 8005af2:	f040 80b1 	bne.w	8005c58 <_strtod_l+0x1a0>
 8005af6:	786a      	ldrb	r2, [r5, #1]
 8005af8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005afc:	2a58      	cmp	r2, #88	@ 0x58
 8005afe:	d16c      	bne.n	8005bda <_strtod_l+0x122>
 8005b00:	9302      	str	r3, [sp, #8]
 8005b02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b04:	4a8e      	ldr	r2, [pc, #568]	@ (8005d40 <_strtod_l+0x288>)
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	ab1a      	add	r3, sp, #104	@ 0x68
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	9805      	ldr	r0, [sp, #20]
 8005b0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005b10:	a919      	add	r1, sp, #100	@ 0x64
 8005b12:	f001 f915 	bl	8006d40 <__gethex>
 8005b16:	f010 060f 	ands.w	r6, r0, #15
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	d005      	beq.n	8005b2a <_strtod_l+0x72>
 8005b1e:	2e06      	cmp	r6, #6
 8005b20:	d126      	bne.n	8005b70 <_strtod_l+0xb8>
 8005b22:	2300      	movs	r3, #0
 8005b24:	3501      	adds	r5, #1
 8005b26:	9519      	str	r5, [sp, #100]	@ 0x64
 8005b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f040 8584 	bne.w	800663a <_strtod_l+0xb82>
 8005b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b34:	b1bb      	cbz	r3, 8005b66 <_strtod_l+0xae>
 8005b36:	4650      	mov	r0, sl
 8005b38:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005b3c:	b01f      	add	sp, #124	@ 0x7c
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b42:	2920      	cmp	r1, #32
 8005b44:	d1d0      	bne.n	8005ae8 <_strtod_l+0x30>
 8005b46:	3201      	adds	r2, #1
 8005b48:	e7c3      	b.n	8005ad2 <_strtod_l+0x1a>
 8005b4a:	292d      	cmp	r1, #45	@ 0x2d
 8005b4c:	d1cc      	bne.n	8005ae8 <_strtod_l+0x30>
 8005b4e:	2101      	movs	r1, #1
 8005b50:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b52:	1c51      	adds	r1, r2, #1
 8005b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b56:	7852      	ldrb	r2, [r2, #1]
 8005b58:	2a00      	cmp	r2, #0
 8005b5a:	d1c7      	bne.n	8005aec <_strtod_l+0x34>
 8005b5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b5e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 8568 	bne.w	8006636 <_strtod_l+0xb7e>
 8005b66:	4650      	mov	r0, sl
 8005b68:	4659      	mov	r1, fp
 8005b6a:	e7e7      	b.n	8005b3c <_strtod_l+0x84>
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	e7ef      	b.n	8005b50 <_strtod_l+0x98>
 8005b70:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b72:	b13a      	cbz	r2, 8005b84 <_strtod_l+0xcc>
 8005b74:	2135      	movs	r1, #53	@ 0x35
 8005b76:	a81c      	add	r0, sp, #112	@ 0x70
 8005b78:	f7ff ff36 	bl	80059e8 <__copybits>
 8005b7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b7e:	9805      	ldr	r0, [sp, #20]
 8005b80:	f7ff fb10 	bl	80051a4 <_Bfree>
 8005b84:	3e01      	subs	r6, #1
 8005b86:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b88:	2e04      	cmp	r6, #4
 8005b8a:	d806      	bhi.n	8005b9a <_strtod_l+0xe2>
 8005b8c:	e8df f006 	tbb	[pc, r6]
 8005b90:	201d0314 	.word	0x201d0314
 8005b94:	14          	.byte	0x14
 8005b95:	00          	.byte	0x00
 8005b96:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b9a:	05e1      	lsls	r1, r4, #23
 8005b9c:	bf48      	it	mi
 8005b9e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005ba2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ba6:	0d1b      	lsrs	r3, r3, #20
 8005ba8:	051b      	lsls	r3, r3, #20
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1bd      	bne.n	8005b2a <_strtod_l+0x72>
 8005bae:	f7fe fb2b 	bl	8004208 <__errno>
 8005bb2:	2322      	movs	r3, #34	@ 0x22
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	e7b8      	b.n	8005b2a <_strtod_l+0x72>
 8005bb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005bbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005bc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005bc4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005bc8:	e7e7      	b.n	8005b9a <_strtod_l+0xe2>
 8005bca:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005d44 <_strtod_l+0x28c>
 8005bce:	e7e4      	b.n	8005b9a <_strtod_l+0xe2>
 8005bd0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005bd4:	f04f 3aff 	mov.w	sl, #4294967295
 8005bd8:	e7df      	b.n	8005b9a <_strtod_l+0xe2>
 8005bda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	9219      	str	r2, [sp, #100]	@ 0x64
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b30      	cmp	r3, #48	@ 0x30
 8005be4:	d0f9      	beq.n	8005bda <_strtod_l+0x122>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d09f      	beq.n	8005b2a <_strtod_l+0x72>
 8005bea:	2301      	movs	r3, #1
 8005bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bf0:	220a      	movs	r2, #10
 8005bf2:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bfc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005bfe:	7805      	ldrb	r5, [r0, #0]
 8005c00:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005c04:	b2d9      	uxtb	r1, r3
 8005c06:	2909      	cmp	r1, #9
 8005c08:	d928      	bls.n	8005c5c <_strtod_l+0x1a4>
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	494e      	ldr	r1, [pc, #312]	@ (8005d48 <_strtod_l+0x290>)
 8005c0e:	f000 ffc7 	bl	8006ba0 <strncmp>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d032      	beq.n	8005c7c <_strtod_l+0x1c4>
 8005c16:	2000      	movs	r0, #0
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4681      	mov	r9, r0
 8005c1c:	463d      	mov	r5, r7
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2a65      	cmp	r2, #101	@ 0x65
 8005c22:	d001      	beq.n	8005c28 <_strtod_l+0x170>
 8005c24:	2a45      	cmp	r2, #69	@ 0x45
 8005c26:	d114      	bne.n	8005c52 <_strtod_l+0x19a>
 8005c28:	b91d      	cbnz	r5, 8005c32 <_strtod_l+0x17a>
 8005c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c2c:	4302      	orrs	r2, r0
 8005c2e:	d095      	beq.n	8005b5c <_strtod_l+0xa4>
 8005c30:	2500      	movs	r5, #0
 8005c32:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005c34:	1c62      	adds	r2, r4, #1
 8005c36:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c38:	7862      	ldrb	r2, [r4, #1]
 8005c3a:	2a2b      	cmp	r2, #43	@ 0x2b
 8005c3c:	d077      	beq.n	8005d2e <_strtod_l+0x276>
 8005c3e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005c40:	d07b      	beq.n	8005d3a <_strtod_l+0x282>
 8005c42:	f04f 0c00 	mov.w	ip, #0
 8005c46:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005c4a:	2909      	cmp	r1, #9
 8005c4c:	f240 8082 	bls.w	8005d54 <_strtod_l+0x29c>
 8005c50:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	e0a2      	b.n	8005d9e <_strtod_l+0x2e6>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e7c7      	b.n	8005bec <_strtod_l+0x134>
 8005c5c:	2f08      	cmp	r7, #8
 8005c5e:	bfd5      	itete	le
 8005c60:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005c62:	9908      	ldrgt	r1, [sp, #32]
 8005c64:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c68:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005c6c:	f100 0001 	add.w	r0, r0, #1
 8005c70:	bfd4      	ite	le
 8005c72:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005c74:	9308      	strgt	r3, [sp, #32]
 8005c76:	3701      	adds	r7, #1
 8005c78:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c7a:	e7bf      	b.n	8005bfc <_strtod_l+0x144>
 8005c7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c82:	785a      	ldrb	r2, [r3, #1]
 8005c84:	b37f      	cbz	r7, 8005ce6 <_strtod_l+0x22e>
 8005c86:	4681      	mov	r9, r0
 8005c88:	463d      	mov	r5, r7
 8005c8a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c8e:	2b09      	cmp	r3, #9
 8005c90:	d912      	bls.n	8005cb8 <_strtod_l+0x200>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e7c4      	b.n	8005c20 <_strtod_l+0x168>
 8005c96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c98:	3001      	adds	r0, #1
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c9e:	785a      	ldrb	r2, [r3, #1]
 8005ca0:	2a30      	cmp	r2, #48	@ 0x30
 8005ca2:	d0f8      	beq.n	8005c96 <_strtod_l+0x1de>
 8005ca4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	f200 84cb 	bhi.w	8006644 <_strtod_l+0xb8c>
 8005cae:	4681      	mov	r9, r0
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8005cb8:	3a30      	subs	r2, #48	@ 0x30
 8005cba:	f100 0301 	add.w	r3, r0, #1
 8005cbe:	d02a      	beq.n	8005d16 <_strtod_l+0x25e>
 8005cc0:	4499      	add	r9, r3
 8005cc2:	210a      	movs	r1, #10
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	eb00 0c05 	add.w	ip, r0, r5
 8005cca:	4563      	cmp	r3, ip
 8005ccc:	d10d      	bne.n	8005cea <_strtod_l+0x232>
 8005cce:	1c69      	adds	r1, r5, #1
 8005cd0:	4401      	add	r1, r0
 8005cd2:	4428      	add	r0, r5
 8005cd4:	2808      	cmp	r0, #8
 8005cd6:	dc16      	bgt.n	8005d06 <_strtod_l+0x24e>
 8005cd8:	230a      	movs	r3, #10
 8005cda:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005cdc:	fb03 2300 	mla	r3, r3, r0, r2
 8005ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e018      	b.n	8005d18 <_strtod_l+0x260>
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	e7da      	b.n	8005ca0 <_strtod_l+0x1e8>
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	f103 0301 	add.w	r3, r3, #1
 8005cf0:	dc03      	bgt.n	8005cfa <_strtod_l+0x242>
 8005cf2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005cf4:	434e      	muls	r6, r1
 8005cf6:	960a      	str	r6, [sp, #40]	@ 0x28
 8005cf8:	e7e7      	b.n	8005cca <_strtod_l+0x212>
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	bfde      	ittt	le
 8005cfe:	9e08      	ldrle	r6, [sp, #32]
 8005d00:	434e      	mulle	r6, r1
 8005d02:	9608      	strle	r6, [sp, #32]
 8005d04:	e7e1      	b.n	8005cca <_strtod_l+0x212>
 8005d06:	280f      	cmp	r0, #15
 8005d08:	dceb      	bgt.n	8005ce2 <_strtod_l+0x22a>
 8005d0a:	230a      	movs	r3, #10
 8005d0c:	9808      	ldr	r0, [sp, #32]
 8005d0e:	fb03 2300 	mla	r3, r3, r0, r2
 8005d12:	9308      	str	r3, [sp, #32]
 8005d14:	e7e5      	b.n	8005ce2 <_strtod_l+0x22a>
 8005d16:	4629      	mov	r1, r5
 8005d18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	1c50      	adds	r0, r2, #1
 8005d1e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d20:	7852      	ldrb	r2, [r2, #1]
 8005d22:	4618      	mov	r0, r3
 8005d24:	e7b1      	b.n	8005c8a <_strtod_l+0x1d2>
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e77d      	b.n	8005c2a <_strtod_l+0x172>
 8005d2e:	f04f 0c00 	mov.w	ip, #0
 8005d32:	1ca2      	adds	r2, r4, #2
 8005d34:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d36:	78a2      	ldrb	r2, [r4, #2]
 8005d38:	e785      	b.n	8005c46 <_strtod_l+0x18e>
 8005d3a:	f04f 0c01 	mov.w	ip, #1
 8005d3e:	e7f8      	b.n	8005d32 <_strtod_l+0x27a>
 8005d40:	08007b78 	.word	0x08007b78
 8005d44:	7ff00000 	.word	0x7ff00000
 8005d48:	08007b60 	.word	0x08007b60
 8005d4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d4e:	1c51      	adds	r1, r2, #1
 8005d50:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d52:	7852      	ldrb	r2, [r2, #1]
 8005d54:	2a30      	cmp	r2, #48	@ 0x30
 8005d56:	d0f9      	beq.n	8005d4c <_strtod_l+0x294>
 8005d58:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005d5c:	2908      	cmp	r1, #8
 8005d5e:	f63f af78 	bhi.w	8005c52 <_strtod_l+0x19a>
 8005d62:	f04f 080a 	mov.w	r8, #10
 8005d66:	3a30      	subs	r2, #48	@ 0x30
 8005d68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005d6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d70:	1c56      	adds	r6, r2, #1
 8005d72:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d74:	7852      	ldrb	r2, [r2, #1]
 8005d76:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d7a:	f1be 0f09 	cmp.w	lr, #9
 8005d7e:	d939      	bls.n	8005df4 <_strtod_l+0x33c>
 8005d80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d86:	1a76      	subs	r6, r6, r1
 8005d88:	2e08      	cmp	r6, #8
 8005d8a:	dc03      	bgt.n	8005d94 <_strtod_l+0x2dc>
 8005d8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d8e:	4588      	cmp	r8, r1
 8005d90:	bfa8      	it	ge
 8005d92:	4688      	movge	r8, r1
 8005d94:	f1bc 0f00 	cmp.w	ip, #0
 8005d98:	d001      	beq.n	8005d9e <_strtod_l+0x2e6>
 8005d9a:	f1c8 0800 	rsb	r8, r8, #0
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	d14e      	bne.n	8005e40 <_strtod_l+0x388>
 8005da2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005da4:	4308      	orrs	r0, r1
 8005da6:	f47f aec0 	bne.w	8005b2a <_strtod_l+0x72>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f47f aed6 	bne.w	8005b5c <_strtod_l+0xa4>
 8005db0:	2a69      	cmp	r2, #105	@ 0x69
 8005db2:	d028      	beq.n	8005e06 <_strtod_l+0x34e>
 8005db4:	dc25      	bgt.n	8005e02 <_strtod_l+0x34a>
 8005db6:	2a49      	cmp	r2, #73	@ 0x49
 8005db8:	d025      	beq.n	8005e06 <_strtod_l+0x34e>
 8005dba:	2a4e      	cmp	r2, #78	@ 0x4e
 8005dbc:	f47f aece 	bne.w	8005b5c <_strtod_l+0xa4>
 8005dc0:	499a      	ldr	r1, [pc, #616]	@ (800602c <_strtod_l+0x574>)
 8005dc2:	a819      	add	r0, sp, #100	@ 0x64
 8005dc4:	f001 f9de 	bl	8007184 <__match>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	f43f aec7 	beq.w	8005b5c <_strtod_l+0xa4>
 8005dce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b28      	cmp	r3, #40	@ 0x28
 8005dd4:	d12e      	bne.n	8005e34 <_strtod_l+0x37c>
 8005dd6:	4996      	ldr	r1, [pc, #600]	@ (8006030 <_strtod_l+0x578>)
 8005dd8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005dda:	a819      	add	r0, sp, #100	@ 0x64
 8005ddc:	f001 f9e6 	bl	80071ac <__hexnan>
 8005de0:	2805      	cmp	r0, #5
 8005de2:	d127      	bne.n	8005e34 <_strtod_l+0x37c>
 8005de4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005de6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005dea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005dee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005df2:	e69a      	b.n	8005b2a <_strtod_l+0x72>
 8005df4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005df6:	fb08 2101 	mla	r1, r8, r1, r2
 8005dfa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005dfe:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e00:	e7b5      	b.n	8005d6e <_strtod_l+0x2b6>
 8005e02:	2a6e      	cmp	r2, #110	@ 0x6e
 8005e04:	e7da      	b.n	8005dbc <_strtod_l+0x304>
 8005e06:	498b      	ldr	r1, [pc, #556]	@ (8006034 <_strtod_l+0x57c>)
 8005e08:	a819      	add	r0, sp, #100	@ 0x64
 8005e0a:	f001 f9bb 	bl	8007184 <__match>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f43f aea4 	beq.w	8005b5c <_strtod_l+0xa4>
 8005e14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e16:	4988      	ldr	r1, [pc, #544]	@ (8006038 <_strtod_l+0x580>)
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	a819      	add	r0, sp, #100	@ 0x64
 8005e1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e1e:	f001 f9b1 	bl	8007184 <__match>
 8005e22:	b910      	cbnz	r0, 8005e2a <_strtod_l+0x372>
 8005e24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e26:	3301      	adds	r3, #1
 8005e28:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e2a:	f04f 0a00 	mov.w	sl, #0
 8005e2e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800603c <_strtod_l+0x584>
 8005e32:	e67a      	b.n	8005b2a <_strtod_l+0x72>
 8005e34:	4882      	ldr	r0, [pc, #520]	@ (8006040 <_strtod_l+0x588>)
 8005e36:	f000 fee3 	bl	8006c00 <nan>
 8005e3a:	4682      	mov	sl, r0
 8005e3c:	468b      	mov	fp, r1
 8005e3e:	e674      	b.n	8005b2a <_strtod_l+0x72>
 8005e40:	eba8 0309 	sub.w	r3, r8, r9
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	bf08      	it	eq
 8005e48:	462f      	moveq	r7, r5
 8005e4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e4c:	2d10      	cmp	r5, #16
 8005e4e:	462c      	mov	r4, r5
 8005e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e52:	bfa8      	it	ge
 8005e54:	2410      	movge	r4, #16
 8005e56:	f7fa fadd 	bl	8000414 <__aeabi_ui2d>
 8005e5a:	2d09      	cmp	r5, #9
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	468b      	mov	fp, r1
 8005e60:	dc11      	bgt.n	8005e86 <_strtod_l+0x3ce>
 8005e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f43f ae60 	beq.w	8005b2a <_strtod_l+0x72>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6c:	dd76      	ble.n	8005f5c <_strtod_l+0x4a4>
 8005e6e:	2b16      	cmp	r3, #22
 8005e70:	dc5d      	bgt.n	8005f2e <_strtod_l+0x476>
 8005e72:	4974      	ldr	r1, [pc, #464]	@ (8006044 <_strtod_l+0x58c>)
 8005e74:	4652      	mov	r2, sl
 8005e76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e80:	f7fa fb42 	bl	8000508 <__aeabi_dmul>
 8005e84:	e7d9      	b.n	8005e3a <_strtod_l+0x382>
 8005e86:	4b6f      	ldr	r3, [pc, #444]	@ (8006044 <_strtod_l+0x58c>)
 8005e88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e90:	f7fa fb3a 	bl	8000508 <__aeabi_dmul>
 8005e94:	4682      	mov	sl, r0
 8005e96:	9808      	ldr	r0, [sp, #32]
 8005e98:	468b      	mov	fp, r1
 8005e9a:	f7fa fabb 	bl	8000414 <__aeabi_ui2d>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4650      	mov	r0, sl
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	f7fa f979 	bl	800019c <__adddf3>
 8005eaa:	2d0f      	cmp	r5, #15
 8005eac:	4682      	mov	sl, r0
 8005eae:	468b      	mov	fp, r1
 8005eb0:	ddd7      	ble.n	8005e62 <_strtod_l+0x3aa>
 8005eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb4:	1b2c      	subs	r4, r5, r4
 8005eb6:	441c      	add	r4, r3
 8005eb8:	2c00      	cmp	r4, #0
 8005eba:	f340 8096 	ble.w	8005fea <_strtod_l+0x532>
 8005ebe:	f014 030f 	ands.w	r3, r4, #15
 8005ec2:	d00a      	beq.n	8005eda <_strtod_l+0x422>
 8005ec4:	495f      	ldr	r1, [pc, #380]	@ (8006044 <_strtod_l+0x58c>)
 8005ec6:	4652      	mov	r2, sl
 8005ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed0:	465b      	mov	r3, fp
 8005ed2:	f7fa fb19 	bl	8000508 <__aeabi_dmul>
 8005ed6:	4682      	mov	sl, r0
 8005ed8:	468b      	mov	fp, r1
 8005eda:	f034 040f 	bics.w	r4, r4, #15
 8005ede:	d073      	beq.n	8005fc8 <_strtod_l+0x510>
 8005ee0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005ee4:	dd48      	ble.n	8005f78 <_strtod_l+0x4c0>
 8005ee6:	2400      	movs	r4, #0
 8005ee8:	46a0      	mov	r8, r4
 8005eea:	46a1      	mov	r9, r4
 8005eec:	940a      	str	r4, [sp, #40]	@ 0x28
 8005eee:	2322      	movs	r3, #34	@ 0x22
 8005ef0:	f04f 0a00 	mov.w	sl, #0
 8005ef4:	9a05      	ldr	r2, [sp, #20]
 8005ef6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800603c <_strtod_l+0x584>
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f43f ae13 	beq.w	8005b2a <_strtod_l+0x72>
 8005f04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f06:	9805      	ldr	r0, [sp, #20]
 8005f08:	f7ff f94c 	bl	80051a4 <_Bfree>
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	f7ff f948 	bl	80051a4 <_Bfree>
 8005f14:	4641      	mov	r1, r8
 8005f16:	9805      	ldr	r0, [sp, #20]
 8005f18:	f7ff f944 	bl	80051a4 <_Bfree>
 8005f1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f1e:	9805      	ldr	r0, [sp, #20]
 8005f20:	f7ff f940 	bl	80051a4 <_Bfree>
 8005f24:	4621      	mov	r1, r4
 8005f26:	9805      	ldr	r0, [sp, #20]
 8005f28:	f7ff f93c 	bl	80051a4 <_Bfree>
 8005f2c:	e5fd      	b.n	8005b2a <_strtod_l+0x72>
 8005f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005f34:	4293      	cmp	r3, r2
 8005f36:	dbbc      	blt.n	8005eb2 <_strtod_l+0x3fa>
 8005f38:	4c42      	ldr	r4, [pc, #264]	@ (8006044 <_strtod_l+0x58c>)
 8005f3a:	f1c5 050f 	rsb	r5, r5, #15
 8005f3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f42:	4652      	mov	r2, sl
 8005f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f48:	465b      	mov	r3, fp
 8005f4a:	f7fa fadd 	bl	8000508 <__aeabi_dmul>
 8005f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f50:	1b5d      	subs	r5, r3, r5
 8005f52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f5a:	e791      	b.n	8005e80 <_strtod_l+0x3c8>
 8005f5c:	3316      	adds	r3, #22
 8005f5e:	dba8      	blt.n	8005eb2 <_strtod_l+0x3fa>
 8005f60:	4b38      	ldr	r3, [pc, #224]	@ (8006044 <_strtod_l+0x58c>)
 8005f62:	eba9 0808 	sub.w	r8, r9, r8
 8005f66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f70:	4659      	mov	r1, fp
 8005f72:	f7fa fbf3 	bl	800075c <__aeabi_ddiv>
 8005f76:	e760      	b.n	8005e3a <_strtod_l+0x382>
 8005f78:	4b33      	ldr	r3, [pc, #204]	@ (8006048 <_strtod_l+0x590>)
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	9308      	str	r3, [sp, #32]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4659      	mov	r1, fp
 8005f82:	461e      	mov	r6, r3
 8005f84:	1124      	asrs	r4, r4, #4
 8005f86:	2c01      	cmp	r4, #1
 8005f88:	dc21      	bgt.n	8005fce <_strtod_l+0x516>
 8005f8a:	b10b      	cbz	r3, 8005f90 <_strtod_l+0x4d8>
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	468b      	mov	fp, r1
 8005f90:	492d      	ldr	r1, [pc, #180]	@ (8006048 <_strtod_l+0x590>)
 8005f92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f9a:	4652      	mov	r2, sl
 8005f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa0:	465b      	mov	r3, fp
 8005fa2:	f7fa fab1 	bl	8000508 <__aeabi_dmul>
 8005fa6:	4b25      	ldr	r3, [pc, #148]	@ (800603c <_strtod_l+0x584>)
 8005fa8:	460a      	mov	r2, r1
 8005faa:	400b      	ands	r3, r1
 8005fac:	4927      	ldr	r1, [pc, #156]	@ (800604c <_strtod_l+0x594>)
 8005fae:	4682      	mov	sl, r0
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	d898      	bhi.n	8005ee6 <_strtod_l+0x42e>
 8005fb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005fb8:	428b      	cmp	r3, r1
 8005fba:	bf86      	itte	hi
 8005fbc:	f04f 3aff 	movhi.w	sl, #4294967295
 8005fc0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006050 <_strtod_l+0x598>
 8005fc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9308      	str	r3, [sp, #32]
 8005fcc:	e07a      	b.n	80060c4 <_strtod_l+0x60c>
 8005fce:	07e2      	lsls	r2, r4, #31
 8005fd0:	d505      	bpl.n	8005fde <_strtod_l+0x526>
 8005fd2:	9b08      	ldr	r3, [sp, #32]
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f7fa fa96 	bl	8000508 <__aeabi_dmul>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	9a08      	ldr	r2, [sp, #32]
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	3208      	adds	r2, #8
 8005fe4:	1064      	asrs	r4, r4, #1
 8005fe6:	9208      	str	r2, [sp, #32]
 8005fe8:	e7cd      	b.n	8005f86 <_strtod_l+0x4ce>
 8005fea:	d0ed      	beq.n	8005fc8 <_strtod_l+0x510>
 8005fec:	4264      	negs	r4, r4
 8005fee:	f014 020f 	ands.w	r2, r4, #15
 8005ff2:	d00a      	beq.n	800600a <_strtod_l+0x552>
 8005ff4:	4b13      	ldr	r3, [pc, #76]	@ (8006044 <_strtod_l+0x58c>)
 8005ff6:	4650      	mov	r0, sl
 8005ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f7fa fbab 	bl	800075c <__aeabi_ddiv>
 8006006:	4682      	mov	sl, r0
 8006008:	468b      	mov	fp, r1
 800600a:	1124      	asrs	r4, r4, #4
 800600c:	d0dc      	beq.n	8005fc8 <_strtod_l+0x510>
 800600e:	2c1f      	cmp	r4, #31
 8006010:	dd20      	ble.n	8006054 <_strtod_l+0x59c>
 8006012:	2400      	movs	r4, #0
 8006014:	46a0      	mov	r8, r4
 8006016:	46a1      	mov	r9, r4
 8006018:	940a      	str	r4, [sp, #40]	@ 0x28
 800601a:	2322      	movs	r3, #34	@ 0x22
 800601c:	9a05      	ldr	r2, [sp, #20]
 800601e:	f04f 0a00 	mov.w	sl, #0
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	e768      	b.n	8005efc <_strtod_l+0x444>
 800602a:	bf00      	nop
 800602c:	0800794d 	.word	0x0800794d
 8006030:	08007b64 	.word	0x08007b64
 8006034:	08007945 	.word	0x08007945
 8006038:	0800797c 	.word	0x0800797c
 800603c:	7ff00000 	.word	0x7ff00000
 8006040:	08007d0d 	.word	0x08007d0d
 8006044:	08007a98 	.word	0x08007a98
 8006048:	08007a70 	.word	0x08007a70
 800604c:	7ca00000 	.word	0x7ca00000
 8006050:	7fefffff 	.word	0x7fefffff
 8006054:	f014 0310 	ands.w	r3, r4, #16
 8006058:	bf18      	it	ne
 800605a:	236a      	movne	r3, #106	@ 0x6a
 800605c:	4650      	mov	r0, sl
 800605e:	9308      	str	r3, [sp, #32]
 8006060:	4659      	mov	r1, fp
 8006062:	2300      	movs	r3, #0
 8006064:	4ea9      	ldr	r6, [pc, #676]	@ (800630c <_strtod_l+0x854>)
 8006066:	07e2      	lsls	r2, r4, #31
 8006068:	d504      	bpl.n	8006074 <_strtod_l+0x5bc>
 800606a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800606e:	f7fa fa4b 	bl	8000508 <__aeabi_dmul>
 8006072:	2301      	movs	r3, #1
 8006074:	1064      	asrs	r4, r4, #1
 8006076:	f106 0608 	add.w	r6, r6, #8
 800607a:	d1f4      	bne.n	8006066 <_strtod_l+0x5ae>
 800607c:	b10b      	cbz	r3, 8006082 <_strtod_l+0x5ca>
 800607e:	4682      	mov	sl, r0
 8006080:	468b      	mov	fp, r1
 8006082:	9b08      	ldr	r3, [sp, #32]
 8006084:	b1b3      	cbz	r3, 80060b4 <_strtod_l+0x5fc>
 8006086:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800608a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800608e:	2b00      	cmp	r3, #0
 8006090:	4659      	mov	r1, fp
 8006092:	dd0f      	ble.n	80060b4 <_strtod_l+0x5fc>
 8006094:	2b1f      	cmp	r3, #31
 8006096:	dd57      	ble.n	8006148 <_strtod_l+0x690>
 8006098:	2b34      	cmp	r3, #52	@ 0x34
 800609a:	bfd8      	it	le
 800609c:	f04f 33ff 	movle.w	r3, #4294967295
 80060a0:	f04f 0a00 	mov.w	sl, #0
 80060a4:	bfcf      	iteee	gt
 80060a6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80060aa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80060ae:	4093      	lslle	r3, r2
 80060b0:	ea03 0b01 	andle.w	fp, r3, r1
 80060b4:	2200      	movs	r2, #0
 80060b6:	2300      	movs	r3, #0
 80060b8:	4650      	mov	r0, sl
 80060ba:	4659      	mov	r1, fp
 80060bc:	f7fa fc8c 	bl	80009d8 <__aeabi_dcmpeq>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d1a6      	bne.n	8006012 <_strtod_l+0x55a>
 80060c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060c6:	463a      	mov	r2, r7
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80060cc:	462b      	mov	r3, r5
 80060ce:	9805      	ldr	r0, [sp, #20]
 80060d0:	f7ff f8d0 	bl	8005274 <__s2b>
 80060d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80060d6:	2800      	cmp	r0, #0
 80060d8:	f43f af05 	beq.w	8005ee6 <_strtod_l+0x42e>
 80060dc:	2400      	movs	r4, #0
 80060de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060e0:	eba9 0308 	sub.w	r3, r9, r8
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	bfa8      	it	ge
 80060e8:	2300      	movge	r3, #0
 80060ea:	46a0      	mov	r8, r4
 80060ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80060ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80060f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80060f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f6:	9805      	ldr	r0, [sp, #20]
 80060f8:	6859      	ldr	r1, [r3, #4]
 80060fa:	f7ff f813 	bl	8005124 <_Balloc>
 80060fe:	4681      	mov	r9, r0
 8006100:	2800      	cmp	r0, #0
 8006102:	f43f aef4 	beq.w	8005eee <_strtod_l+0x436>
 8006106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006108:	300c      	adds	r0, #12
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	f103 010c 	add.w	r1, r3, #12
 8006110:	3202      	adds	r2, #2
 8006112:	0092      	lsls	r2, r2, #2
 8006114:	f000 fd66 	bl	8006be4 <memcpy>
 8006118:	ab1c      	add	r3, sp, #112	@ 0x70
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4652      	mov	r2, sl
 8006122:	465b      	mov	r3, fp
 8006124:	9805      	ldr	r0, [sp, #20]
 8006126:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800612a:	f7ff fbd5 	bl	80058d8 <__d2b>
 800612e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006130:	2800      	cmp	r0, #0
 8006132:	f43f aedc 	beq.w	8005eee <_strtod_l+0x436>
 8006136:	2101      	movs	r1, #1
 8006138:	9805      	ldr	r0, [sp, #20]
 800613a:	f7ff f931 	bl	80053a0 <__i2b>
 800613e:	4680      	mov	r8, r0
 8006140:	b948      	cbnz	r0, 8006156 <_strtod_l+0x69e>
 8006142:	f04f 0800 	mov.w	r8, #0
 8006146:	e6d2      	b.n	8005eee <_strtod_l+0x436>
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	ea03 0a0a 	and.w	sl, r3, sl
 8006154:	e7ae      	b.n	80060b4 <_strtod_l+0x5fc>
 8006156:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006158:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800615a:	2d00      	cmp	r5, #0
 800615c:	bfab      	itete	ge
 800615e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006160:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006162:	18ef      	addge	r7, r5, r3
 8006164:	1b5e      	sublt	r6, r3, r5
 8006166:	9b08      	ldr	r3, [sp, #32]
 8006168:	bfa8      	it	ge
 800616a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800616c:	eba5 0503 	sub.w	r5, r5, r3
 8006170:	4415      	add	r5, r2
 8006172:	4b67      	ldr	r3, [pc, #412]	@ (8006310 <_strtod_l+0x858>)
 8006174:	f105 35ff 	add.w	r5, r5, #4294967295
 8006178:	bfb8      	it	lt
 800617a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800617c:	429d      	cmp	r5, r3
 800617e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006182:	da50      	bge.n	8006226 <_strtod_l+0x76e>
 8006184:	1b5b      	subs	r3, r3, r5
 8006186:	2b1f      	cmp	r3, #31
 8006188:	f04f 0101 	mov.w	r1, #1
 800618c:	eba2 0203 	sub.w	r2, r2, r3
 8006190:	dc3d      	bgt.n	800620e <_strtod_l+0x756>
 8006192:	fa01 f303 	lsl.w	r3, r1, r3
 8006196:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006198:	2300      	movs	r3, #0
 800619a:	9310      	str	r3, [sp, #64]	@ 0x40
 800619c:	18bd      	adds	r5, r7, r2
 800619e:	9b08      	ldr	r3, [sp, #32]
 80061a0:	42af      	cmp	r7, r5
 80061a2:	4416      	add	r6, r2
 80061a4:	441e      	add	r6, r3
 80061a6:	463b      	mov	r3, r7
 80061a8:	bfa8      	it	ge
 80061aa:	462b      	movge	r3, r5
 80061ac:	42b3      	cmp	r3, r6
 80061ae:	bfa8      	it	ge
 80061b0:	4633      	movge	r3, r6
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bfc2      	ittt	gt
 80061b6:	1aed      	subgt	r5, r5, r3
 80061b8:	1af6      	subgt	r6, r6, r3
 80061ba:	1aff      	subgt	r7, r7, r3
 80061bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dd16      	ble.n	80061f0 <_strtod_l+0x738>
 80061c2:	4641      	mov	r1, r8
 80061c4:	461a      	mov	r2, r3
 80061c6:	9805      	ldr	r0, [sp, #20]
 80061c8:	f7ff f9a8 	bl	800551c <__pow5mult>
 80061cc:	4680      	mov	r8, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d0b7      	beq.n	8006142 <_strtod_l+0x68a>
 80061d2:	4601      	mov	r1, r0
 80061d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80061d6:	9805      	ldr	r0, [sp, #20]
 80061d8:	f7ff f8f8 	bl	80053cc <__multiply>
 80061dc:	900e      	str	r0, [sp, #56]	@ 0x38
 80061de:	2800      	cmp	r0, #0
 80061e0:	f43f ae85 	beq.w	8005eee <_strtod_l+0x436>
 80061e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061e6:	9805      	ldr	r0, [sp, #20]
 80061e8:	f7fe ffdc 	bl	80051a4 <_Bfree>
 80061ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	dc1d      	bgt.n	8006230 <_strtod_l+0x778>
 80061f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dd23      	ble.n	8006242 <_strtod_l+0x78a>
 80061fa:	4649      	mov	r1, r9
 80061fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80061fe:	9805      	ldr	r0, [sp, #20]
 8006200:	f7ff f98c 	bl	800551c <__pow5mult>
 8006204:	4681      	mov	r9, r0
 8006206:	b9e0      	cbnz	r0, 8006242 <_strtod_l+0x78a>
 8006208:	f04f 0900 	mov.w	r9, #0
 800620c:	e66f      	b.n	8005eee <_strtod_l+0x436>
 800620e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006212:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006216:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800621a:	35e2      	adds	r5, #226	@ 0xe2
 800621c:	fa01 f305 	lsl.w	r3, r1, r5
 8006220:	9310      	str	r3, [sp, #64]	@ 0x40
 8006222:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006224:	e7ba      	b.n	800619c <_strtod_l+0x6e4>
 8006226:	2300      	movs	r3, #0
 8006228:	9310      	str	r3, [sp, #64]	@ 0x40
 800622a:	2301      	movs	r3, #1
 800622c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800622e:	e7b5      	b.n	800619c <_strtod_l+0x6e4>
 8006230:	462a      	mov	r2, r5
 8006232:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006234:	9805      	ldr	r0, [sp, #20]
 8006236:	f7ff f9cb 	bl	80055d0 <__lshift>
 800623a:	901a      	str	r0, [sp, #104]	@ 0x68
 800623c:	2800      	cmp	r0, #0
 800623e:	d1d9      	bne.n	80061f4 <_strtod_l+0x73c>
 8006240:	e655      	b.n	8005eee <_strtod_l+0x436>
 8006242:	2e00      	cmp	r6, #0
 8006244:	dd07      	ble.n	8006256 <_strtod_l+0x79e>
 8006246:	4649      	mov	r1, r9
 8006248:	4632      	mov	r2, r6
 800624a:	9805      	ldr	r0, [sp, #20]
 800624c:	f7ff f9c0 	bl	80055d0 <__lshift>
 8006250:	4681      	mov	r9, r0
 8006252:	2800      	cmp	r0, #0
 8006254:	d0d8      	beq.n	8006208 <_strtod_l+0x750>
 8006256:	2f00      	cmp	r7, #0
 8006258:	dd08      	ble.n	800626c <_strtod_l+0x7b4>
 800625a:	4641      	mov	r1, r8
 800625c:	463a      	mov	r2, r7
 800625e:	9805      	ldr	r0, [sp, #20]
 8006260:	f7ff f9b6 	bl	80055d0 <__lshift>
 8006264:	4680      	mov	r8, r0
 8006266:	2800      	cmp	r0, #0
 8006268:	f43f ae41 	beq.w	8005eee <_strtod_l+0x436>
 800626c:	464a      	mov	r2, r9
 800626e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006270:	9805      	ldr	r0, [sp, #20]
 8006272:	f7ff fa35 	bl	80056e0 <__mdiff>
 8006276:	4604      	mov	r4, r0
 8006278:	2800      	cmp	r0, #0
 800627a:	f43f ae38 	beq.w	8005eee <_strtod_l+0x436>
 800627e:	68c3      	ldr	r3, [r0, #12]
 8006280:	4641      	mov	r1, r8
 8006282:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006284:	2300      	movs	r3, #0
 8006286:	60c3      	str	r3, [r0, #12]
 8006288:	f7ff fa0e 	bl	80056a8 <__mcmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	da45      	bge.n	800631c <_strtod_l+0x864>
 8006290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006292:	ea53 030a 	orrs.w	r3, r3, sl
 8006296:	d16b      	bne.n	8006370 <_strtod_l+0x8b8>
 8006298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800629c:	2b00      	cmp	r3, #0
 800629e:	d167      	bne.n	8006370 <_strtod_l+0x8b8>
 80062a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062a4:	0d1b      	lsrs	r3, r3, #20
 80062a6:	051b      	lsls	r3, r3, #20
 80062a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80062ac:	d960      	bls.n	8006370 <_strtod_l+0x8b8>
 80062ae:	6963      	ldr	r3, [r4, #20]
 80062b0:	b913      	cbnz	r3, 80062b8 <_strtod_l+0x800>
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	dd5b      	ble.n	8006370 <_strtod_l+0x8b8>
 80062b8:	4621      	mov	r1, r4
 80062ba:	2201      	movs	r2, #1
 80062bc:	9805      	ldr	r0, [sp, #20]
 80062be:	f7ff f987 	bl	80055d0 <__lshift>
 80062c2:	4641      	mov	r1, r8
 80062c4:	4604      	mov	r4, r0
 80062c6:	f7ff f9ef 	bl	80056a8 <__mcmp>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	dd50      	ble.n	8006370 <_strtod_l+0x8b8>
 80062ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062d2:	9a08      	ldr	r2, [sp, #32]
 80062d4:	0d1b      	lsrs	r3, r3, #20
 80062d6:	051b      	lsls	r3, r3, #20
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d06a      	beq.n	80063b2 <_strtod_l+0x8fa>
 80062dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80062e0:	d867      	bhi.n	80063b2 <_strtod_l+0x8fa>
 80062e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80062e6:	f67f ae98 	bls.w	800601a <_strtod_l+0x562>
 80062ea:	4650      	mov	r0, sl
 80062ec:	4659      	mov	r1, fp
 80062ee:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <_strtod_l+0x85c>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	f7fa f909 	bl	8000508 <__aeabi_dmul>
 80062f6:	4b08      	ldr	r3, [pc, #32]	@ (8006318 <_strtod_l+0x860>)
 80062f8:	4682      	mov	sl, r0
 80062fa:	400b      	ands	r3, r1
 80062fc:	468b      	mov	fp, r1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f47f ae00 	bne.w	8005f04 <_strtod_l+0x44c>
 8006304:	2322      	movs	r3, #34	@ 0x22
 8006306:	9a05      	ldr	r2, [sp, #20]
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e5fb      	b.n	8005f04 <_strtod_l+0x44c>
 800630c:	08007b90 	.word	0x08007b90
 8006310:	fffffc02 	.word	0xfffffc02
 8006314:	39500000 	.word	0x39500000
 8006318:	7ff00000 	.word	0x7ff00000
 800631c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006320:	d165      	bne.n	80063ee <_strtod_l+0x936>
 8006322:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006328:	b35a      	cbz	r2, 8006382 <_strtod_l+0x8ca>
 800632a:	4a99      	ldr	r2, [pc, #612]	@ (8006590 <_strtod_l+0xad8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d12b      	bne.n	8006388 <_strtod_l+0x8d0>
 8006330:	9b08      	ldr	r3, [sp, #32]
 8006332:	4651      	mov	r1, sl
 8006334:	b303      	cbz	r3, 8006378 <_strtod_l+0x8c0>
 8006336:	465a      	mov	r2, fp
 8006338:	4b96      	ldr	r3, [pc, #600]	@ (8006594 <_strtod_l+0xadc>)
 800633a:	4013      	ands	r3, r2
 800633c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	d81b      	bhi.n	800637e <_strtod_l+0x8c6>
 8006346:	0d1b      	lsrs	r3, r3, #20
 8006348:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	4299      	cmp	r1, r3
 8006352:	d119      	bne.n	8006388 <_strtod_l+0x8d0>
 8006354:	4b90      	ldr	r3, [pc, #576]	@ (8006598 <_strtod_l+0xae0>)
 8006356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006358:	429a      	cmp	r2, r3
 800635a:	d102      	bne.n	8006362 <_strtod_l+0x8aa>
 800635c:	3101      	adds	r1, #1
 800635e:	f43f adc6 	beq.w	8005eee <_strtod_l+0x436>
 8006362:	f04f 0a00 	mov.w	sl, #0
 8006366:	4b8b      	ldr	r3, [pc, #556]	@ (8006594 <_strtod_l+0xadc>)
 8006368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800636a:	401a      	ands	r2, r3
 800636c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006370:	9b08      	ldr	r3, [sp, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1b9      	bne.n	80062ea <_strtod_l+0x832>
 8006376:	e5c5      	b.n	8005f04 <_strtod_l+0x44c>
 8006378:	f04f 33ff 	mov.w	r3, #4294967295
 800637c:	e7e8      	b.n	8006350 <_strtod_l+0x898>
 800637e:	4613      	mov	r3, r2
 8006380:	e7e6      	b.n	8006350 <_strtod_l+0x898>
 8006382:	ea53 030a 	orrs.w	r3, r3, sl
 8006386:	d0a2      	beq.n	80062ce <_strtod_l+0x816>
 8006388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800638a:	b1db      	cbz	r3, 80063c4 <_strtod_l+0x90c>
 800638c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800638e:	4213      	tst	r3, r2
 8006390:	d0ee      	beq.n	8006370 <_strtod_l+0x8b8>
 8006392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006394:	4650      	mov	r0, sl
 8006396:	4659      	mov	r1, fp
 8006398:	9a08      	ldr	r2, [sp, #32]
 800639a:	b1bb      	cbz	r3, 80063cc <_strtod_l+0x914>
 800639c:	f7ff fb68 	bl	8005a70 <sulp>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063a8:	f7f9 fef8 	bl	800019c <__adddf3>
 80063ac:	4682      	mov	sl, r0
 80063ae:	468b      	mov	fp, r1
 80063b0:	e7de      	b.n	8006370 <_strtod_l+0x8b8>
 80063b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80063b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063ba:	f04f 3aff 	mov.w	sl, #4294967295
 80063be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063c2:	e7d5      	b.n	8006370 <_strtod_l+0x8b8>
 80063c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063c6:	ea13 0f0a 	tst.w	r3, sl
 80063ca:	e7e1      	b.n	8006390 <_strtod_l+0x8d8>
 80063cc:	f7ff fb50 	bl	8005a70 <sulp>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063d8:	f7f9 fede 	bl	8000198 <__aeabi_dsub>
 80063dc:	2200      	movs	r2, #0
 80063de:	2300      	movs	r3, #0
 80063e0:	4682      	mov	sl, r0
 80063e2:	468b      	mov	fp, r1
 80063e4:	f7fa faf8 	bl	80009d8 <__aeabi_dcmpeq>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d0c1      	beq.n	8006370 <_strtod_l+0x8b8>
 80063ec:	e615      	b.n	800601a <_strtod_l+0x562>
 80063ee:	4641      	mov	r1, r8
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff fac9 	bl	8005988 <__ratio>
 80063f6:	2200      	movs	r2, #0
 80063f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063fc:	4606      	mov	r6, r0
 80063fe:	460f      	mov	r7, r1
 8006400:	f7fa fafe 	bl	8000a00 <__aeabi_dcmple>
 8006404:	2800      	cmp	r0, #0
 8006406:	d06d      	beq.n	80064e4 <_strtod_l+0xa2c>
 8006408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d178      	bne.n	8006500 <_strtod_l+0xa48>
 800640e:	f1ba 0f00 	cmp.w	sl, #0
 8006412:	d156      	bne.n	80064c2 <_strtod_l+0xa0a>
 8006414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800641a:	2b00      	cmp	r3, #0
 800641c:	d158      	bne.n	80064d0 <_strtod_l+0xa18>
 800641e:	2200      	movs	r2, #0
 8006420:	4630      	mov	r0, r6
 8006422:	4639      	mov	r1, r7
 8006424:	4b5d      	ldr	r3, [pc, #372]	@ (800659c <_strtod_l+0xae4>)
 8006426:	f7fa fae1 	bl	80009ec <__aeabi_dcmplt>
 800642a:	2800      	cmp	r0, #0
 800642c:	d157      	bne.n	80064de <_strtod_l+0xa26>
 800642e:	4630      	mov	r0, r6
 8006430:	4639      	mov	r1, r7
 8006432:	2200      	movs	r2, #0
 8006434:	4b5a      	ldr	r3, [pc, #360]	@ (80065a0 <_strtod_l+0xae8>)
 8006436:	f7fa f867 	bl	8000508 <__aeabi_dmul>
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006442:	9606      	str	r6, [sp, #24]
 8006444:	9307      	str	r3, [sp, #28]
 8006446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800644a:	4d52      	ldr	r5, [pc, #328]	@ (8006594 <_strtod_l+0xadc>)
 800644c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006452:	401d      	ands	r5, r3
 8006454:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <_strtod_l+0xaec>)
 8006456:	429d      	cmp	r5, r3
 8006458:	f040 80aa 	bne.w	80065b0 <_strtod_l+0xaf8>
 800645c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800645e:	4650      	mov	r0, sl
 8006460:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006464:	4659      	mov	r1, fp
 8006466:	f7ff f9cf 	bl	8005808 <__ulp>
 800646a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800646e:	f7fa f84b 	bl	8000508 <__aeabi_dmul>
 8006472:	4652      	mov	r2, sl
 8006474:	465b      	mov	r3, fp
 8006476:	f7f9 fe91 	bl	800019c <__adddf3>
 800647a:	460b      	mov	r3, r1
 800647c:	4945      	ldr	r1, [pc, #276]	@ (8006594 <_strtod_l+0xadc>)
 800647e:	4a4a      	ldr	r2, [pc, #296]	@ (80065a8 <_strtod_l+0xaf0>)
 8006480:	4019      	ands	r1, r3
 8006482:	4291      	cmp	r1, r2
 8006484:	4682      	mov	sl, r0
 8006486:	d942      	bls.n	800650e <_strtod_l+0xa56>
 8006488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800648a:	4b43      	ldr	r3, [pc, #268]	@ (8006598 <_strtod_l+0xae0>)
 800648c:	429a      	cmp	r2, r3
 800648e:	d103      	bne.n	8006498 <_strtod_l+0x9e0>
 8006490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006492:	3301      	adds	r3, #1
 8006494:	f43f ad2b 	beq.w	8005eee <_strtod_l+0x436>
 8006498:	f04f 3aff 	mov.w	sl, #4294967295
 800649c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006598 <_strtod_l+0xae0>
 80064a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064a2:	9805      	ldr	r0, [sp, #20]
 80064a4:	f7fe fe7e 	bl	80051a4 <_Bfree>
 80064a8:	4649      	mov	r1, r9
 80064aa:	9805      	ldr	r0, [sp, #20]
 80064ac:	f7fe fe7a 	bl	80051a4 <_Bfree>
 80064b0:	4641      	mov	r1, r8
 80064b2:	9805      	ldr	r0, [sp, #20]
 80064b4:	f7fe fe76 	bl	80051a4 <_Bfree>
 80064b8:	4621      	mov	r1, r4
 80064ba:	9805      	ldr	r0, [sp, #20]
 80064bc:	f7fe fe72 	bl	80051a4 <_Bfree>
 80064c0:	e618      	b.n	80060f4 <_strtod_l+0x63c>
 80064c2:	f1ba 0f01 	cmp.w	sl, #1
 80064c6:	d103      	bne.n	80064d0 <_strtod_l+0xa18>
 80064c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f43f ada5 	beq.w	800601a <_strtod_l+0x562>
 80064d0:	2200      	movs	r2, #0
 80064d2:	4b36      	ldr	r3, [pc, #216]	@ (80065ac <_strtod_l+0xaf4>)
 80064d4:	2600      	movs	r6, #0
 80064d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064da:	4f30      	ldr	r7, [pc, #192]	@ (800659c <_strtod_l+0xae4>)
 80064dc:	e7b3      	b.n	8006446 <_strtod_l+0x98e>
 80064de:	2600      	movs	r6, #0
 80064e0:	4f2f      	ldr	r7, [pc, #188]	@ (80065a0 <_strtod_l+0xae8>)
 80064e2:	e7ac      	b.n	800643e <_strtod_l+0x986>
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	4b2d      	ldr	r3, [pc, #180]	@ (80065a0 <_strtod_l+0xae8>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7fa f80c 	bl	8000508 <__aeabi_dmul>
 80064f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064f2:	4606      	mov	r6, r0
 80064f4:	460f      	mov	r7, r1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0a1      	beq.n	800643e <_strtod_l+0x986>
 80064fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80064fe:	e7a2      	b.n	8006446 <_strtod_l+0x98e>
 8006500:	2200      	movs	r2, #0
 8006502:	4b26      	ldr	r3, [pc, #152]	@ (800659c <_strtod_l+0xae4>)
 8006504:	4616      	mov	r6, r2
 8006506:	461f      	mov	r7, r3
 8006508:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800650c:	e79b      	b.n	8006446 <_strtod_l+0x98e>
 800650e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1c1      	bne.n	80064a0 <_strtod_l+0x9e8>
 800651c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006520:	0d1b      	lsrs	r3, r3, #20
 8006522:	051b      	lsls	r3, r3, #20
 8006524:	429d      	cmp	r5, r3
 8006526:	d1bb      	bne.n	80064a0 <_strtod_l+0x9e8>
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7fa fb4c 	bl	8000bc8 <__aeabi_d2lz>
 8006530:	f7f9 ffbc 	bl	80004ac <__aeabi_l2d>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7f9 fe2c 	bl	8000198 <__aeabi_dsub>
 8006540:	460b      	mov	r3, r1
 8006542:	4602      	mov	r2, r0
 8006544:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006548:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800654c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800654e:	ea46 060a 	orr.w	r6, r6, sl
 8006552:	431e      	orrs	r6, r3
 8006554:	d069      	beq.n	800662a <_strtod_l+0xb72>
 8006556:	a30a      	add	r3, pc, #40	@ (adr r3, 8006580 <_strtod_l+0xac8>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7fa fa46 	bl	80009ec <__aeabi_dcmplt>
 8006560:	2800      	cmp	r0, #0
 8006562:	f47f accf 	bne.w	8005f04 <_strtod_l+0x44c>
 8006566:	a308      	add	r3, pc, #32	@ (adr r3, 8006588 <_strtod_l+0xad0>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006570:	f7fa fa5a 	bl	8000a28 <__aeabi_dcmpgt>
 8006574:	2800      	cmp	r0, #0
 8006576:	d093      	beq.n	80064a0 <_strtod_l+0x9e8>
 8006578:	e4c4      	b.n	8005f04 <_strtod_l+0x44c>
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w
 8006580:	94a03595 	.word	0x94a03595
 8006584:	3fdfffff 	.word	0x3fdfffff
 8006588:	35afe535 	.word	0x35afe535
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	000fffff 	.word	0x000fffff
 8006594:	7ff00000 	.word	0x7ff00000
 8006598:	7fefffff 	.word	0x7fefffff
 800659c:	3ff00000 	.word	0x3ff00000
 80065a0:	3fe00000 	.word	0x3fe00000
 80065a4:	7fe00000 	.word	0x7fe00000
 80065a8:	7c9fffff 	.word	0x7c9fffff
 80065ac:	bff00000 	.word	0xbff00000
 80065b0:	9b08      	ldr	r3, [sp, #32]
 80065b2:	b323      	cbz	r3, 80065fe <_strtod_l+0xb46>
 80065b4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80065b8:	d821      	bhi.n	80065fe <_strtod_l+0xb46>
 80065ba:	a327      	add	r3, pc, #156	@ (adr r3, 8006658 <_strtod_l+0xba0>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7fa fa1c 	bl	8000a00 <__aeabi_dcmple>
 80065c8:	b1a0      	cbz	r0, 80065f4 <_strtod_l+0xb3c>
 80065ca:	4639      	mov	r1, r7
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7fa fa73 	bl	8000ab8 <__aeabi_d2uiz>
 80065d2:	2801      	cmp	r0, #1
 80065d4:	bf38      	it	cc
 80065d6:	2001      	movcc	r0, #1
 80065d8:	f7f9 ff1c 	bl	8000414 <__aeabi_ui2d>
 80065dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	b9fb      	cbnz	r3, 8006624 <_strtod_l+0xb6c>
 80065e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065e8:	9014      	str	r0, [sp, #80]	@ 0x50
 80065ea:	9315      	str	r3, [sp, #84]	@ 0x54
 80065ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80065f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80065f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065f6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80065fa:	1b5b      	subs	r3, r3, r5
 80065fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80065fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006602:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006606:	f7ff f8ff 	bl	8005808 <__ulp>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4650      	mov	r0, sl
 8006610:	4659      	mov	r1, fp
 8006612:	f7f9 ff79 	bl	8000508 <__aeabi_dmul>
 8006616:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800661a:	f7f9 fdbf 	bl	800019c <__adddf3>
 800661e:	4682      	mov	sl, r0
 8006620:	468b      	mov	fp, r1
 8006622:	e776      	b.n	8006512 <_strtod_l+0xa5a>
 8006624:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006628:	e7e0      	b.n	80065ec <_strtod_l+0xb34>
 800662a:	a30d      	add	r3, pc, #52	@ (adr r3, 8006660 <_strtod_l+0xba8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7fa f9dc 	bl	80009ec <__aeabi_dcmplt>
 8006634:	e79e      	b.n	8006574 <_strtod_l+0xabc>
 8006636:	2300      	movs	r3, #0
 8006638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800663a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800663c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	f7ff ba77 	b.w	8005b32 <_strtod_l+0x7a>
 8006644:	2a65      	cmp	r2, #101	@ 0x65
 8006646:	f43f ab6e 	beq.w	8005d26 <_strtod_l+0x26e>
 800664a:	2a45      	cmp	r2, #69	@ 0x45
 800664c:	f43f ab6b 	beq.w	8005d26 <_strtod_l+0x26e>
 8006650:	2301      	movs	r3, #1
 8006652:	f7ff bba6 	b.w	8005da2 <_strtod_l+0x2ea>
 8006656:	bf00      	nop
 8006658:	ffc00000 	.word	0xffc00000
 800665c:	41dfffff 	.word	0x41dfffff
 8006660:	94a03595 	.word	0x94a03595
 8006664:	3fcfffff 	.word	0x3fcfffff

08006668 <_strtod_r>:
 8006668:	4b01      	ldr	r3, [pc, #4]	@ (8006670 <_strtod_r+0x8>)
 800666a:	f7ff ba25 	b.w	8005ab8 <_strtod_l>
 800666e:	bf00      	nop
 8006670:	20000068 	.word	0x20000068

08006674 <_strtol_l.constprop.0>:
 8006674:	2b24      	cmp	r3, #36	@ 0x24
 8006676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667a:	4686      	mov	lr, r0
 800667c:	4690      	mov	r8, r2
 800667e:	d801      	bhi.n	8006684 <_strtol_l.constprop.0+0x10>
 8006680:	2b01      	cmp	r3, #1
 8006682:	d106      	bne.n	8006692 <_strtol_l.constprop.0+0x1e>
 8006684:	f7fd fdc0 	bl	8004208 <__errno>
 8006688:	2316      	movs	r3, #22
 800668a:	6003      	str	r3, [r0, #0]
 800668c:	2000      	movs	r0, #0
 800668e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006692:	460d      	mov	r5, r1
 8006694:	4833      	ldr	r0, [pc, #204]	@ (8006764 <_strtol_l.constprop.0+0xf0>)
 8006696:	462a      	mov	r2, r5
 8006698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800669c:	5d06      	ldrb	r6, [r0, r4]
 800669e:	f016 0608 	ands.w	r6, r6, #8
 80066a2:	d1f8      	bne.n	8006696 <_strtol_l.constprop.0+0x22>
 80066a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80066a6:	d12d      	bne.n	8006704 <_strtol_l.constprop.0+0x90>
 80066a8:	2601      	movs	r6, #1
 80066aa:	782c      	ldrb	r4, [r5, #0]
 80066ac:	1c95      	adds	r5, r2, #2
 80066ae:	f033 0210 	bics.w	r2, r3, #16
 80066b2:	d109      	bne.n	80066c8 <_strtol_l.constprop.0+0x54>
 80066b4:	2c30      	cmp	r4, #48	@ 0x30
 80066b6:	d12a      	bne.n	800670e <_strtol_l.constprop.0+0x9a>
 80066b8:	782a      	ldrb	r2, [r5, #0]
 80066ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066be:	2a58      	cmp	r2, #88	@ 0x58
 80066c0:	d125      	bne.n	800670e <_strtol_l.constprop.0+0x9a>
 80066c2:	2310      	movs	r3, #16
 80066c4:	786c      	ldrb	r4, [r5, #1]
 80066c6:	3502      	adds	r5, #2
 80066c8:	2200      	movs	r2, #0
 80066ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80066ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066d2:	fbbc f9f3 	udiv	r9, ip, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80066dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80066e0:	2f09      	cmp	r7, #9
 80066e2:	d81b      	bhi.n	800671c <_strtol_l.constprop.0+0xa8>
 80066e4:	463c      	mov	r4, r7
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	dd27      	ble.n	800673a <_strtol_l.constprop.0+0xc6>
 80066ea:	1c57      	adds	r7, r2, #1
 80066ec:	d007      	beq.n	80066fe <_strtol_l.constprop.0+0x8a>
 80066ee:	4581      	cmp	r9, r0
 80066f0:	d320      	bcc.n	8006734 <_strtol_l.constprop.0+0xc0>
 80066f2:	d101      	bne.n	80066f8 <_strtol_l.constprop.0+0x84>
 80066f4:	45a2      	cmp	sl, r4
 80066f6:	db1d      	blt.n	8006734 <_strtol_l.constprop.0+0xc0>
 80066f8:	2201      	movs	r2, #1
 80066fa:	fb00 4003 	mla	r0, r0, r3, r4
 80066fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006702:	e7eb      	b.n	80066dc <_strtol_l.constprop.0+0x68>
 8006704:	2c2b      	cmp	r4, #43	@ 0x2b
 8006706:	bf04      	itt	eq
 8006708:	782c      	ldrbeq	r4, [r5, #0]
 800670a:	1c95      	addeq	r5, r2, #2
 800670c:	e7cf      	b.n	80066ae <_strtol_l.constprop.0+0x3a>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1da      	bne.n	80066c8 <_strtol_l.constprop.0+0x54>
 8006712:	2c30      	cmp	r4, #48	@ 0x30
 8006714:	bf0c      	ite	eq
 8006716:	2308      	moveq	r3, #8
 8006718:	230a      	movne	r3, #10
 800671a:	e7d5      	b.n	80066c8 <_strtol_l.constprop.0+0x54>
 800671c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006720:	2f19      	cmp	r7, #25
 8006722:	d801      	bhi.n	8006728 <_strtol_l.constprop.0+0xb4>
 8006724:	3c37      	subs	r4, #55	@ 0x37
 8006726:	e7de      	b.n	80066e6 <_strtol_l.constprop.0+0x72>
 8006728:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800672c:	2f19      	cmp	r7, #25
 800672e:	d804      	bhi.n	800673a <_strtol_l.constprop.0+0xc6>
 8006730:	3c57      	subs	r4, #87	@ 0x57
 8006732:	e7d8      	b.n	80066e6 <_strtol_l.constprop.0+0x72>
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	e7e1      	b.n	80066fe <_strtol_l.constprop.0+0x8a>
 800673a:	1c53      	adds	r3, r2, #1
 800673c:	d108      	bne.n	8006750 <_strtol_l.constprop.0+0xdc>
 800673e:	2322      	movs	r3, #34	@ 0x22
 8006740:	4660      	mov	r0, ip
 8006742:	f8ce 3000 	str.w	r3, [lr]
 8006746:	f1b8 0f00 	cmp.w	r8, #0
 800674a:	d0a0      	beq.n	800668e <_strtol_l.constprop.0+0x1a>
 800674c:	1e69      	subs	r1, r5, #1
 800674e:	e006      	b.n	800675e <_strtol_l.constprop.0+0xea>
 8006750:	b106      	cbz	r6, 8006754 <_strtol_l.constprop.0+0xe0>
 8006752:	4240      	negs	r0, r0
 8006754:	f1b8 0f00 	cmp.w	r8, #0
 8006758:	d099      	beq.n	800668e <_strtol_l.constprop.0+0x1a>
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1f6      	bne.n	800674c <_strtol_l.constprop.0+0xd8>
 800675e:	f8c8 1000 	str.w	r1, [r8]
 8006762:	e794      	b.n	800668e <_strtol_l.constprop.0+0x1a>
 8006764:	08007bb9 	.word	0x08007bb9

08006768 <_strtol_r>:
 8006768:	f7ff bf84 	b.w	8006674 <_strtol_l.constprop.0>

0800676c <__ssputs_r>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	461f      	mov	r7, r3
 8006772:	688e      	ldr	r6, [r1, #8]
 8006774:	4682      	mov	sl, r0
 8006776:	42be      	cmp	r6, r7
 8006778:	460c      	mov	r4, r1
 800677a:	4690      	mov	r8, r2
 800677c:	680b      	ldr	r3, [r1, #0]
 800677e:	d82d      	bhi.n	80067dc <__ssputs_r+0x70>
 8006780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006788:	d026      	beq.n	80067d8 <__ssputs_r+0x6c>
 800678a:	6965      	ldr	r5, [r4, #20]
 800678c:	6909      	ldr	r1, [r1, #16]
 800678e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006792:	eba3 0901 	sub.w	r9, r3, r1
 8006796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800679a:	1c7b      	adds	r3, r7, #1
 800679c:	444b      	add	r3, r9
 800679e:	106d      	asrs	r5, r5, #1
 80067a0:	429d      	cmp	r5, r3
 80067a2:	bf38      	it	cc
 80067a4:	461d      	movcc	r5, r3
 80067a6:	0553      	lsls	r3, r2, #21
 80067a8:	d527      	bpl.n	80067fa <__ssputs_r+0x8e>
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7fe fc2e 	bl	800500c <_malloc_r>
 80067b0:	4606      	mov	r6, r0
 80067b2:	b360      	cbz	r0, 800680e <__ssputs_r+0xa2>
 80067b4:	464a      	mov	r2, r9
 80067b6:	6921      	ldr	r1, [r4, #16]
 80067b8:	f000 fa14 	bl	8006be4 <memcpy>
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c6:	81a3      	strh	r3, [r4, #12]
 80067c8:	6126      	str	r6, [r4, #16]
 80067ca:	444e      	add	r6, r9
 80067cc:	6026      	str	r6, [r4, #0]
 80067ce:	463e      	mov	r6, r7
 80067d0:	6165      	str	r5, [r4, #20]
 80067d2:	eba5 0509 	sub.w	r5, r5, r9
 80067d6:	60a5      	str	r5, [r4, #8]
 80067d8:	42be      	cmp	r6, r7
 80067da:	d900      	bls.n	80067de <__ssputs_r+0x72>
 80067dc:	463e      	mov	r6, r7
 80067de:	4632      	mov	r2, r6
 80067e0:	4641      	mov	r1, r8
 80067e2:	6820      	ldr	r0, [r4, #0]
 80067e4:	f000 f9c2 	bl	8006b6c <memmove>
 80067e8:	2000      	movs	r0, #0
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	1b9b      	subs	r3, r3, r6
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	4433      	add	r3, r6
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	462a      	mov	r2, r5
 80067fc:	f000 fd83 	bl	8007306 <_realloc_r>
 8006800:	4606      	mov	r6, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d1e0      	bne.n	80067c8 <__ssputs_r+0x5c>
 8006806:	4650      	mov	r0, sl
 8006808:	6921      	ldr	r1, [r4, #16]
 800680a:	f7fe fb8d 	bl	8004f28 <_free_r>
 800680e:	230c      	movs	r3, #12
 8006810:	f8ca 3000 	str.w	r3, [sl]
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	e7e9      	b.n	80067f6 <__ssputs_r+0x8a>
	...

08006824 <_svfiprintf_r>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	4698      	mov	r8, r3
 800682a:	898b      	ldrh	r3, [r1, #12]
 800682c:	4607      	mov	r7, r0
 800682e:	061b      	lsls	r3, r3, #24
 8006830:	460d      	mov	r5, r1
 8006832:	4614      	mov	r4, r2
 8006834:	b09d      	sub	sp, #116	@ 0x74
 8006836:	d510      	bpl.n	800685a <_svfiprintf_r+0x36>
 8006838:	690b      	ldr	r3, [r1, #16]
 800683a:	b973      	cbnz	r3, 800685a <_svfiprintf_r+0x36>
 800683c:	2140      	movs	r1, #64	@ 0x40
 800683e:	f7fe fbe5 	bl	800500c <_malloc_r>
 8006842:	6028      	str	r0, [r5, #0]
 8006844:	6128      	str	r0, [r5, #16]
 8006846:	b930      	cbnz	r0, 8006856 <_svfiprintf_r+0x32>
 8006848:	230c      	movs	r3, #12
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	b01d      	add	sp, #116	@ 0x74
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	2340      	movs	r3, #64	@ 0x40
 8006858:	616b      	str	r3, [r5, #20]
 800685a:	2300      	movs	r3, #0
 800685c:	9309      	str	r3, [sp, #36]	@ 0x24
 800685e:	2320      	movs	r3, #32
 8006860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006864:	2330      	movs	r3, #48	@ 0x30
 8006866:	f04f 0901 	mov.w	r9, #1
 800686a:	f8cd 800c 	str.w	r8, [sp, #12]
 800686e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006a08 <_svfiprintf_r+0x1e4>
 8006872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006876:	4623      	mov	r3, r4
 8006878:	469a      	mov	sl, r3
 800687a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800687e:	b10a      	cbz	r2, 8006884 <_svfiprintf_r+0x60>
 8006880:	2a25      	cmp	r2, #37	@ 0x25
 8006882:	d1f9      	bne.n	8006878 <_svfiprintf_r+0x54>
 8006884:	ebba 0b04 	subs.w	fp, sl, r4
 8006888:	d00b      	beq.n	80068a2 <_svfiprintf_r+0x7e>
 800688a:	465b      	mov	r3, fp
 800688c:	4622      	mov	r2, r4
 800688e:	4629      	mov	r1, r5
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff ff6b 	bl	800676c <__ssputs_r>
 8006896:	3001      	adds	r0, #1
 8006898:	f000 80a7 	beq.w	80069ea <_svfiprintf_r+0x1c6>
 800689c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800689e:	445a      	add	r2, fp
 80068a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80068a2:	f89a 3000 	ldrb.w	r3, [sl]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 809f 	beq.w	80069ea <_svfiprintf_r+0x1c6>
 80068ac:	2300      	movs	r3, #0
 80068ae:	f04f 32ff 	mov.w	r2, #4294967295
 80068b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068b6:	f10a 0a01 	add.w	sl, sl, #1
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	9307      	str	r3, [sp, #28]
 80068be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80068c4:	4654      	mov	r4, sl
 80068c6:	2205      	movs	r2, #5
 80068c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068cc:	484e      	ldr	r0, [pc, #312]	@ (8006a08 <_svfiprintf_r+0x1e4>)
 80068ce:	f7fd fcc8 	bl	8004262 <memchr>
 80068d2:	9a04      	ldr	r2, [sp, #16]
 80068d4:	b9d8      	cbnz	r0, 800690e <_svfiprintf_r+0xea>
 80068d6:	06d0      	lsls	r0, r2, #27
 80068d8:	bf44      	itt	mi
 80068da:	2320      	movmi	r3, #32
 80068dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068e0:	0711      	lsls	r1, r2, #28
 80068e2:	bf44      	itt	mi
 80068e4:	232b      	movmi	r3, #43	@ 0x2b
 80068e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ea:	f89a 3000 	ldrb.w	r3, [sl]
 80068ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f0:	d015      	beq.n	800691e <_svfiprintf_r+0xfa>
 80068f2:	4654      	mov	r4, sl
 80068f4:	2000      	movs	r0, #0
 80068f6:	f04f 0c0a 	mov.w	ip, #10
 80068fa:	9a07      	ldr	r2, [sp, #28]
 80068fc:	4621      	mov	r1, r4
 80068fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006902:	3b30      	subs	r3, #48	@ 0x30
 8006904:	2b09      	cmp	r3, #9
 8006906:	d94b      	bls.n	80069a0 <_svfiprintf_r+0x17c>
 8006908:	b1b0      	cbz	r0, 8006938 <_svfiprintf_r+0x114>
 800690a:	9207      	str	r2, [sp, #28]
 800690c:	e014      	b.n	8006938 <_svfiprintf_r+0x114>
 800690e:	eba0 0308 	sub.w	r3, r0, r8
 8006912:	fa09 f303 	lsl.w	r3, r9, r3
 8006916:	4313      	orrs	r3, r2
 8006918:	46a2      	mov	sl, r4
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	e7d2      	b.n	80068c4 <_svfiprintf_r+0xa0>
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	9103      	str	r1, [sp, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	bfbb      	ittet	lt
 800692a:	425b      	neglt	r3, r3
 800692c:	f042 0202 	orrlt.w	r2, r2, #2
 8006930:	9307      	strge	r3, [sp, #28]
 8006932:	9307      	strlt	r3, [sp, #28]
 8006934:	bfb8      	it	lt
 8006936:	9204      	strlt	r2, [sp, #16]
 8006938:	7823      	ldrb	r3, [r4, #0]
 800693a:	2b2e      	cmp	r3, #46	@ 0x2e
 800693c:	d10a      	bne.n	8006954 <_svfiprintf_r+0x130>
 800693e:	7863      	ldrb	r3, [r4, #1]
 8006940:	2b2a      	cmp	r3, #42	@ 0x2a
 8006942:	d132      	bne.n	80069aa <_svfiprintf_r+0x186>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	3402      	adds	r4, #2
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	9203      	str	r2, [sp, #12]
 800694e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006a0c <_svfiprintf_r+0x1e8>
 8006958:	2203      	movs	r2, #3
 800695a:	4650      	mov	r0, sl
 800695c:	7821      	ldrb	r1, [r4, #0]
 800695e:	f7fd fc80 	bl	8004262 <memchr>
 8006962:	b138      	cbz	r0, 8006974 <_svfiprintf_r+0x150>
 8006964:	2240      	movs	r2, #64	@ 0x40
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	eba0 000a 	sub.w	r0, r0, sl
 800696c:	4082      	lsls	r2, r0
 800696e:	4313      	orrs	r3, r2
 8006970:	3401      	adds	r4, #1
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006978:	2206      	movs	r2, #6
 800697a:	4825      	ldr	r0, [pc, #148]	@ (8006a10 <_svfiprintf_r+0x1ec>)
 800697c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006980:	f7fd fc6f 	bl	8004262 <memchr>
 8006984:	2800      	cmp	r0, #0
 8006986:	d036      	beq.n	80069f6 <_svfiprintf_r+0x1d2>
 8006988:	4b22      	ldr	r3, [pc, #136]	@ (8006a14 <_svfiprintf_r+0x1f0>)
 800698a:	bb1b      	cbnz	r3, 80069d4 <_svfiprintf_r+0x1b0>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	3307      	adds	r3, #7
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	3308      	adds	r3, #8
 8006996:	9303      	str	r3, [sp, #12]
 8006998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699a:	4433      	add	r3, r6
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	e76a      	b.n	8006876 <_svfiprintf_r+0x52>
 80069a0:	460c      	mov	r4, r1
 80069a2:	2001      	movs	r0, #1
 80069a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a8:	e7a8      	b.n	80068fc <_svfiprintf_r+0xd8>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f04f 0c0a 	mov.w	ip, #10
 80069b0:	4619      	mov	r1, r3
 80069b2:	3401      	adds	r4, #1
 80069b4:	9305      	str	r3, [sp, #20]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069bc:	3a30      	subs	r2, #48	@ 0x30
 80069be:	2a09      	cmp	r2, #9
 80069c0:	d903      	bls.n	80069ca <_svfiprintf_r+0x1a6>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0c6      	beq.n	8006954 <_svfiprintf_r+0x130>
 80069c6:	9105      	str	r1, [sp, #20]
 80069c8:	e7c4      	b.n	8006954 <_svfiprintf_r+0x130>
 80069ca:	4604      	mov	r4, r0
 80069cc:	2301      	movs	r3, #1
 80069ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d2:	e7f0      	b.n	80069b6 <_svfiprintf_r+0x192>
 80069d4:	ab03      	add	r3, sp, #12
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	462a      	mov	r2, r5
 80069da:	4638      	mov	r0, r7
 80069dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a18 <_svfiprintf_r+0x1f4>)
 80069de:	a904      	add	r1, sp, #16
 80069e0:	f7fc fccc 	bl	800337c <_printf_float>
 80069e4:	1c42      	adds	r2, r0, #1
 80069e6:	4606      	mov	r6, r0
 80069e8:	d1d6      	bne.n	8006998 <_svfiprintf_r+0x174>
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	065b      	lsls	r3, r3, #25
 80069ee:	f53f af2d 	bmi.w	800684c <_svfiprintf_r+0x28>
 80069f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f4:	e72c      	b.n	8006850 <_svfiprintf_r+0x2c>
 80069f6:	ab03      	add	r3, sp, #12
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	462a      	mov	r2, r5
 80069fc:	4638      	mov	r0, r7
 80069fe:	4b06      	ldr	r3, [pc, #24]	@ (8006a18 <_svfiprintf_r+0x1f4>)
 8006a00:	a904      	add	r1, sp, #16
 8006a02:	f7fc ff59 	bl	80038b8 <_printf_i>
 8006a06:	e7ed      	b.n	80069e4 <_svfiprintf_r+0x1c0>
 8006a08:	08007cb9 	.word	0x08007cb9
 8006a0c:	08007cbf 	.word	0x08007cbf
 8006a10:	08007cc3 	.word	0x08007cc3
 8006a14:	0800337d 	.word	0x0800337d
 8006a18:	0800676d 	.word	0x0800676d

08006a1c <__sflush_r>:
 8006a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	0716      	lsls	r6, r2, #28
 8006a24:	4605      	mov	r5, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	d454      	bmi.n	8006ad4 <__sflush_r+0xb8>
 8006a2a:	684b      	ldr	r3, [r1, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc02      	bgt.n	8006a36 <__sflush_r+0x1a>
 8006a30:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dd48      	ble.n	8006ac8 <__sflush_r+0xac>
 8006a36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a38:	2e00      	cmp	r6, #0
 8006a3a:	d045      	beq.n	8006ac8 <__sflush_r+0xac>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a42:	682f      	ldr	r7, [r5, #0]
 8006a44:	6a21      	ldr	r1, [r4, #32]
 8006a46:	602b      	str	r3, [r5, #0]
 8006a48:	d030      	beq.n	8006aac <__sflush_r+0x90>
 8006a4a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	0759      	lsls	r1, r3, #29
 8006a50:	d505      	bpl.n	8006a5e <__sflush_r+0x42>
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a58:	b10b      	cbz	r3, 8006a5e <__sflush_r+0x42>
 8006a5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a5c:	1ad2      	subs	r2, r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4628      	mov	r0, r5
 8006a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a64:	6a21      	ldr	r1, [r4, #32]
 8006a66:	47b0      	blx	r6
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	d106      	bne.n	8006a7c <__sflush_r+0x60>
 8006a6e:	6829      	ldr	r1, [r5, #0]
 8006a70:	291d      	cmp	r1, #29
 8006a72:	d82b      	bhi.n	8006acc <__sflush_r+0xb0>
 8006a74:	4a28      	ldr	r2, [pc, #160]	@ (8006b18 <__sflush_r+0xfc>)
 8006a76:	410a      	asrs	r2, r1
 8006a78:	07d6      	lsls	r6, r2, #31
 8006a7a:	d427      	bmi.n	8006acc <__sflush_r+0xb0>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	6062      	str	r2, [r4, #4]
 8006a80:	6922      	ldr	r2, [r4, #16]
 8006a82:	04d9      	lsls	r1, r3, #19
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	d504      	bpl.n	8006a92 <__sflush_r+0x76>
 8006a88:	1c42      	adds	r2, r0, #1
 8006a8a:	d101      	bne.n	8006a90 <__sflush_r+0x74>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b903      	cbnz	r3, 8006a92 <__sflush_r+0x76>
 8006a90:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a94:	602f      	str	r7, [r5, #0]
 8006a96:	b1b9      	cbz	r1, 8006ac8 <__sflush_r+0xac>
 8006a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	d002      	beq.n	8006aa6 <__sflush_r+0x8a>
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7fe fa41 	bl	8004f28 <_free_r>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006aaa:	e00d      	b.n	8006ac8 <__sflush_r+0xac>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b0      	blx	r6
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	1c50      	adds	r0, r2, #1
 8006ab6:	d1c9      	bne.n	8006a4c <__sflush_r+0x30>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0c6      	beq.n	8006a4c <__sflush_r+0x30>
 8006abe:	2b1d      	cmp	r3, #29
 8006ac0:	d001      	beq.n	8006ac6 <__sflush_r+0xaa>
 8006ac2:	2b16      	cmp	r3, #22
 8006ac4:	d11d      	bne.n	8006b02 <__sflush_r+0xe6>
 8006ac6:	602f      	str	r7, [r5, #0]
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e021      	b.n	8006b10 <__sflush_r+0xf4>
 8006acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad0:	b21b      	sxth	r3, r3
 8006ad2:	e01a      	b.n	8006b0a <__sflush_r+0xee>
 8006ad4:	690f      	ldr	r7, [r1, #16]
 8006ad6:	2f00      	cmp	r7, #0
 8006ad8:	d0f6      	beq.n	8006ac8 <__sflush_r+0xac>
 8006ada:	0793      	lsls	r3, r2, #30
 8006adc:	bf18      	it	ne
 8006ade:	2300      	movne	r3, #0
 8006ae0:	680e      	ldr	r6, [r1, #0]
 8006ae2:	bf08      	it	eq
 8006ae4:	694b      	ldreq	r3, [r1, #20]
 8006ae6:	1bf6      	subs	r6, r6, r7
 8006ae8:	600f      	str	r7, [r1, #0]
 8006aea:	608b      	str	r3, [r1, #8]
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	ddeb      	ble.n	8006ac8 <__sflush_r+0xac>
 8006af0:	4633      	mov	r3, r6
 8006af2:	463a      	mov	r2, r7
 8006af4:	4628      	mov	r0, r5
 8006af6:	6a21      	ldr	r1, [r4, #32]
 8006af8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006afc:	47e0      	blx	ip
 8006afe:	2800      	cmp	r0, #0
 8006b00:	dc07      	bgt.n	8006b12 <__sflush_r+0xf6>
 8006b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b12:	4407      	add	r7, r0
 8006b14:	1a36      	subs	r6, r6, r0
 8006b16:	e7e9      	b.n	8006aec <__sflush_r+0xd0>
 8006b18:	dfbffffe 	.word	0xdfbffffe

08006b1c <_fflush_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	4605      	mov	r5, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	b913      	cbnz	r3, 8006b2c <_fflush_r+0x10>
 8006b26:	2500      	movs	r5, #0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	b118      	cbz	r0, 8006b36 <_fflush_r+0x1a>
 8006b2e:	6a03      	ldr	r3, [r0, #32]
 8006b30:	b90b      	cbnz	r3, 8006b36 <_fflush_r+0x1a>
 8006b32:	f7fd fa7d 	bl	8004030 <__sinit>
 8006b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f3      	beq.n	8006b26 <_fflush_r+0xa>
 8006b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b40:	07d0      	lsls	r0, r2, #31
 8006b42:	d404      	bmi.n	8006b4e <_fflush_r+0x32>
 8006b44:	0599      	lsls	r1, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_fflush_r+0x32>
 8006b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b4a:	f7fd fb88 	bl	800425e <__retarget_lock_acquire_recursive>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	4621      	mov	r1, r4
 8006b52:	f7ff ff63 	bl	8006a1c <__sflush_r>
 8006b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b58:	4605      	mov	r5, r0
 8006b5a:	07da      	lsls	r2, r3, #31
 8006b5c:	d4e4      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	d4e1      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b66:	f7fd fb7b 	bl	8004260 <__retarget_lock_release_recursive>
 8006b6a:	e7dd      	b.n	8006b28 <_fflush_r+0xc>

08006b6c <memmove>:
 8006b6c:	4288      	cmp	r0, r1
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	eb01 0402 	add.w	r4, r1, r2
 8006b74:	d902      	bls.n	8006b7c <memmove+0x10>
 8006b76:	4284      	cmp	r4, r0
 8006b78:	4623      	mov	r3, r4
 8006b7a:	d807      	bhi.n	8006b8c <memmove+0x20>
 8006b7c:	1e43      	subs	r3, r0, #1
 8006b7e:	42a1      	cmp	r1, r4
 8006b80:	d008      	beq.n	8006b94 <memmove+0x28>
 8006b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b8a:	e7f8      	b.n	8006b7e <memmove+0x12>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4402      	add	r2, r0
 8006b90:	428a      	cmp	r2, r1
 8006b92:	d100      	bne.n	8006b96 <memmove+0x2a>
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b9e:	e7f7      	b.n	8006b90 <memmove+0x24>

08006ba0 <strncmp>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	b16a      	cbz	r2, 8006bc0 <strncmp+0x20>
 8006ba4:	3901      	subs	r1, #1
 8006ba6:	1884      	adds	r4, r0, r2
 8006ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d103      	bne.n	8006bbc <strncmp+0x1c>
 8006bb4:	42a0      	cmp	r0, r4
 8006bb6:	d001      	beq.n	8006bbc <strncmp+0x1c>
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d1f5      	bne.n	8006ba8 <strncmp+0x8>
 8006bbc:	1ad0      	subs	r0, r2, r3
 8006bbe:	bd10      	pop	{r4, pc}
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	e7fc      	b.n	8006bbe <strncmp+0x1e>

08006bc4 <_sbrk_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4d05      	ldr	r5, [pc, #20]	@ (8006be0 <_sbrk_r+0x1c>)
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	f7fa fbdc 	bl	800138c <_sbrk>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_sbrk_r+0x1a>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_sbrk_r+0x1a>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	200003c4 	.word	0x200003c4

08006be4 <memcpy>:
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bec:	d100      	bne.n	8006bf0 <memcpy+0xc>
 8006bee:	4770      	bx	lr
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf6:	4291      	cmp	r1, r2
 8006bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfc:	d1f9      	bne.n	8006bf2 <memcpy+0xe>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <nan>:
 8006c00:	2000      	movs	r0, #0
 8006c02:	4901      	ldr	r1, [pc, #4]	@ (8006c08 <nan+0x8>)
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	7ff80000 	.word	0x7ff80000

08006c0c <__assert_func>:
 8006c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c0e:	4614      	mov	r4, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b09      	ldr	r3, [pc, #36]	@ (8006c38 <__assert_func+0x2c>)
 8006c14:	4605      	mov	r5, r0
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68d8      	ldr	r0, [r3, #12]
 8006c1a:	b954      	cbnz	r4, 8006c32 <__assert_func+0x26>
 8006c1c:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <__assert_func+0x30>)
 8006c1e:	461c      	mov	r4, r3
 8006c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c24:	9100      	str	r1, [sp, #0]
 8006c26:	462b      	mov	r3, r5
 8006c28:	4905      	ldr	r1, [pc, #20]	@ (8006c40 <__assert_func+0x34>)
 8006c2a:	f000 fba7 	bl	800737c <fiprintf>
 8006c2e:	f000 fbb7 	bl	80073a0 <abort>
 8006c32:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <__assert_func+0x38>)
 8006c34:	e7f4      	b.n	8006c20 <__assert_func+0x14>
 8006c36:	bf00      	nop
 8006c38:	20000018 	.word	0x20000018
 8006c3c:	08007d0d 	.word	0x08007d0d
 8006c40:	08007cdf 	.word	0x08007cdf
 8006c44:	08007cd2 	.word	0x08007cd2

08006c48 <_calloc_r>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	fba1 5402 	umull	r5, r4, r1, r2
 8006c4e:	b93c      	cbnz	r4, 8006c60 <_calloc_r+0x18>
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7fe f9db 	bl	800500c <_malloc_r>
 8006c56:	4606      	mov	r6, r0
 8006c58:	b928      	cbnz	r0, 8006c66 <_calloc_r+0x1e>
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	220c      	movs	r2, #12
 8006c62:	6002      	str	r2, [r0, #0]
 8006c64:	e7f9      	b.n	8006c5a <_calloc_r+0x12>
 8006c66:	462a      	mov	r2, r5
 8006c68:	4621      	mov	r1, r4
 8006c6a:	f7fd fa7a 	bl	8004162 <memset>
 8006c6e:	e7f5      	b.n	8006c5c <_calloc_r+0x14>

08006c70 <rshift>:
 8006c70:	6903      	ldr	r3, [r0, #16]
 8006c72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c7a:	f100 0414 	add.w	r4, r0, #20
 8006c7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c82:	dd46      	ble.n	8006d12 <rshift+0xa2>
 8006c84:	f011 011f 	ands.w	r1, r1, #31
 8006c88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c90:	d10c      	bne.n	8006cac <rshift+0x3c>
 8006c92:	4629      	mov	r1, r5
 8006c94:	f100 0710 	add.w	r7, r0, #16
 8006c98:	42b1      	cmp	r1, r6
 8006c9a:	d335      	bcc.n	8006d08 <rshift+0x98>
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	1eea      	subs	r2, r5, #3
 8006ca2:	4296      	cmp	r6, r2
 8006ca4:	bf38      	it	cc
 8006ca6:	2300      	movcc	r3, #0
 8006ca8:	4423      	add	r3, r4
 8006caa:	e015      	b.n	8006cd8 <rshift+0x68>
 8006cac:	46a1      	mov	r9, r4
 8006cae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006cb2:	f1c1 0820 	rsb	r8, r1, #32
 8006cb6:	40cf      	lsrs	r7, r1
 8006cb8:	f105 0e04 	add.w	lr, r5, #4
 8006cbc:	4576      	cmp	r6, lr
 8006cbe:	46f4      	mov	ip, lr
 8006cc0:	d816      	bhi.n	8006cf0 <rshift+0x80>
 8006cc2:	1a9a      	subs	r2, r3, r2
 8006cc4:	0092      	lsls	r2, r2, #2
 8006cc6:	3a04      	subs	r2, #4
 8006cc8:	3501      	adds	r5, #1
 8006cca:	42ae      	cmp	r6, r5
 8006ccc:	bf38      	it	cc
 8006cce:	2200      	movcc	r2, #0
 8006cd0:	18a3      	adds	r3, r4, r2
 8006cd2:	50a7      	str	r7, [r4, r2]
 8006cd4:	b107      	cbz	r7, 8006cd8 <rshift+0x68>
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	eba3 0204 	sub.w	r2, r3, r4
 8006cde:	bf08      	it	eq
 8006ce0:	2300      	moveq	r3, #0
 8006ce2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ce6:	6102      	str	r2, [r0, #16]
 8006ce8:	bf08      	it	eq
 8006cea:	6143      	streq	r3, [r0, #20]
 8006cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cf0:	f8dc c000 	ldr.w	ip, [ip]
 8006cf4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006cf8:	ea4c 0707 	orr.w	r7, ip, r7
 8006cfc:	f849 7b04 	str.w	r7, [r9], #4
 8006d00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d04:	40cf      	lsrs	r7, r1
 8006d06:	e7d9      	b.n	8006cbc <rshift+0x4c>
 8006d08:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d10:	e7c2      	b.n	8006c98 <rshift+0x28>
 8006d12:	4623      	mov	r3, r4
 8006d14:	e7e0      	b.n	8006cd8 <rshift+0x68>

08006d16 <__hexdig_fun>:
 8006d16:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006d1a:	2b09      	cmp	r3, #9
 8006d1c:	d802      	bhi.n	8006d24 <__hexdig_fun+0xe>
 8006d1e:	3820      	subs	r0, #32
 8006d20:	b2c0      	uxtb	r0, r0
 8006d22:	4770      	bx	lr
 8006d24:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	d801      	bhi.n	8006d30 <__hexdig_fun+0x1a>
 8006d2c:	3847      	subs	r0, #71	@ 0x47
 8006d2e:	e7f7      	b.n	8006d20 <__hexdig_fun+0xa>
 8006d30:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	d801      	bhi.n	8006d3c <__hexdig_fun+0x26>
 8006d38:	3827      	subs	r0, #39	@ 0x27
 8006d3a:	e7f1      	b.n	8006d20 <__hexdig_fun+0xa>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	4770      	bx	lr

08006d40 <__gethex>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	468a      	mov	sl, r1
 8006d46:	4690      	mov	r8, r2
 8006d48:	b085      	sub	sp, #20
 8006d4a:	9302      	str	r3, [sp, #8]
 8006d4c:	680b      	ldr	r3, [r1, #0]
 8006d4e:	9001      	str	r0, [sp, #4]
 8006d50:	1c9c      	adds	r4, r3, #2
 8006d52:	46a1      	mov	r9, r4
 8006d54:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006d58:	2830      	cmp	r0, #48	@ 0x30
 8006d5a:	d0fa      	beq.n	8006d52 <__gethex+0x12>
 8006d5c:	eba9 0303 	sub.w	r3, r9, r3
 8006d60:	f1a3 0b02 	sub.w	fp, r3, #2
 8006d64:	f7ff ffd7 	bl	8006d16 <__hexdig_fun>
 8006d68:	4605      	mov	r5, r0
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d168      	bne.n	8006e40 <__gethex+0x100>
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4648      	mov	r0, r9
 8006d72:	499f      	ldr	r1, [pc, #636]	@ (8006ff0 <__gethex+0x2b0>)
 8006d74:	f7ff ff14 	bl	8006ba0 <strncmp>
 8006d78:	4607      	mov	r7, r0
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d167      	bne.n	8006e4e <__gethex+0x10e>
 8006d7e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006d82:	4626      	mov	r6, r4
 8006d84:	f7ff ffc7 	bl	8006d16 <__hexdig_fun>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d062      	beq.n	8006e52 <__gethex+0x112>
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	7818      	ldrb	r0, [r3, #0]
 8006d90:	4699      	mov	r9, r3
 8006d92:	2830      	cmp	r0, #48	@ 0x30
 8006d94:	f103 0301 	add.w	r3, r3, #1
 8006d98:	d0f9      	beq.n	8006d8e <__gethex+0x4e>
 8006d9a:	f7ff ffbc 	bl	8006d16 <__hexdig_fun>
 8006d9e:	fab0 f580 	clz	r5, r0
 8006da2:	f04f 0b01 	mov.w	fp, #1
 8006da6:	096d      	lsrs	r5, r5, #5
 8006da8:	464a      	mov	r2, r9
 8006daa:	4616      	mov	r6, r2
 8006dac:	7830      	ldrb	r0, [r6, #0]
 8006dae:	3201      	adds	r2, #1
 8006db0:	f7ff ffb1 	bl	8006d16 <__hexdig_fun>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d1f8      	bne.n	8006daa <__gethex+0x6a>
 8006db8:	2201      	movs	r2, #1
 8006dba:	4630      	mov	r0, r6
 8006dbc:	498c      	ldr	r1, [pc, #560]	@ (8006ff0 <__gethex+0x2b0>)
 8006dbe:	f7ff feef 	bl	8006ba0 <strncmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d13f      	bne.n	8006e46 <__gethex+0x106>
 8006dc6:	b944      	cbnz	r4, 8006dda <__gethex+0x9a>
 8006dc8:	1c74      	adds	r4, r6, #1
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4616      	mov	r6, r2
 8006dce:	7830      	ldrb	r0, [r6, #0]
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	f7ff ffa0 	bl	8006d16 <__hexdig_fun>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d1f8      	bne.n	8006dcc <__gethex+0x8c>
 8006dda:	1ba4      	subs	r4, r4, r6
 8006ddc:	00a7      	lsls	r7, r4, #2
 8006dde:	7833      	ldrb	r3, [r6, #0]
 8006de0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006de4:	2b50      	cmp	r3, #80	@ 0x50
 8006de6:	d13e      	bne.n	8006e66 <__gethex+0x126>
 8006de8:	7873      	ldrb	r3, [r6, #1]
 8006dea:	2b2b      	cmp	r3, #43	@ 0x2b
 8006dec:	d033      	beq.n	8006e56 <__gethex+0x116>
 8006dee:	2b2d      	cmp	r3, #45	@ 0x2d
 8006df0:	d034      	beq.n	8006e5c <__gethex+0x11c>
 8006df2:	2400      	movs	r4, #0
 8006df4:	1c71      	adds	r1, r6, #1
 8006df6:	7808      	ldrb	r0, [r1, #0]
 8006df8:	f7ff ff8d 	bl	8006d16 <__hexdig_fun>
 8006dfc:	1e43      	subs	r3, r0, #1
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b18      	cmp	r3, #24
 8006e02:	d830      	bhi.n	8006e66 <__gethex+0x126>
 8006e04:	f1a0 0210 	sub.w	r2, r0, #16
 8006e08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e0c:	f7ff ff83 	bl	8006d16 <__hexdig_fun>
 8006e10:	f100 3cff 	add.w	ip, r0, #4294967295
 8006e14:	fa5f fc8c 	uxtb.w	ip, ip
 8006e18:	f1bc 0f18 	cmp.w	ip, #24
 8006e1c:	f04f 030a 	mov.w	r3, #10
 8006e20:	d91e      	bls.n	8006e60 <__gethex+0x120>
 8006e22:	b104      	cbz	r4, 8006e26 <__gethex+0xe6>
 8006e24:	4252      	negs	r2, r2
 8006e26:	4417      	add	r7, r2
 8006e28:	f8ca 1000 	str.w	r1, [sl]
 8006e2c:	b1ed      	cbz	r5, 8006e6a <__gethex+0x12a>
 8006e2e:	f1bb 0f00 	cmp.w	fp, #0
 8006e32:	bf0c      	ite	eq
 8006e34:	2506      	moveq	r5, #6
 8006e36:	2500      	movne	r5, #0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	b005      	add	sp, #20
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	2500      	movs	r5, #0
 8006e42:	462c      	mov	r4, r5
 8006e44:	e7b0      	b.n	8006da8 <__gethex+0x68>
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	d1c7      	bne.n	8006dda <__gethex+0x9a>
 8006e4a:	4627      	mov	r7, r4
 8006e4c:	e7c7      	b.n	8006dde <__gethex+0x9e>
 8006e4e:	464e      	mov	r6, r9
 8006e50:	462f      	mov	r7, r5
 8006e52:	2501      	movs	r5, #1
 8006e54:	e7c3      	b.n	8006dde <__gethex+0x9e>
 8006e56:	2400      	movs	r4, #0
 8006e58:	1cb1      	adds	r1, r6, #2
 8006e5a:	e7cc      	b.n	8006df6 <__gethex+0xb6>
 8006e5c:	2401      	movs	r4, #1
 8006e5e:	e7fb      	b.n	8006e58 <__gethex+0x118>
 8006e60:	fb03 0002 	mla	r0, r3, r2, r0
 8006e64:	e7ce      	b.n	8006e04 <__gethex+0xc4>
 8006e66:	4631      	mov	r1, r6
 8006e68:	e7de      	b.n	8006e28 <__gethex+0xe8>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	eba6 0309 	sub.w	r3, r6, r9
 8006e70:	3b01      	subs	r3, #1
 8006e72:	2b07      	cmp	r3, #7
 8006e74:	dc0a      	bgt.n	8006e8c <__gethex+0x14c>
 8006e76:	9801      	ldr	r0, [sp, #4]
 8006e78:	f7fe f954 	bl	8005124 <_Balloc>
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	b940      	cbnz	r0, 8006e92 <__gethex+0x152>
 8006e80:	4602      	mov	r2, r0
 8006e82:	21e4      	movs	r1, #228	@ 0xe4
 8006e84:	4b5b      	ldr	r3, [pc, #364]	@ (8006ff4 <__gethex+0x2b4>)
 8006e86:	485c      	ldr	r0, [pc, #368]	@ (8006ff8 <__gethex+0x2b8>)
 8006e88:	f7ff fec0 	bl	8006c0c <__assert_func>
 8006e8c:	3101      	adds	r1, #1
 8006e8e:	105b      	asrs	r3, r3, #1
 8006e90:	e7ef      	b.n	8006e72 <__gethex+0x132>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f100 0a14 	add.w	sl, r0, #20
 8006e98:	4655      	mov	r5, sl
 8006e9a:	469b      	mov	fp, r3
 8006e9c:	45b1      	cmp	r9, r6
 8006e9e:	d337      	bcc.n	8006f10 <__gethex+0x1d0>
 8006ea0:	f845 bb04 	str.w	fp, [r5], #4
 8006ea4:	eba5 050a 	sub.w	r5, r5, sl
 8006ea8:	10ad      	asrs	r5, r5, #2
 8006eaa:	6125      	str	r5, [r4, #16]
 8006eac:	4658      	mov	r0, fp
 8006eae:	f7fe fa2b 	bl	8005308 <__hi0bits>
 8006eb2:	016d      	lsls	r5, r5, #5
 8006eb4:	f8d8 6000 	ldr.w	r6, [r8]
 8006eb8:	1a2d      	subs	r5, r5, r0
 8006eba:	42b5      	cmp	r5, r6
 8006ebc:	dd54      	ble.n	8006f68 <__gethex+0x228>
 8006ebe:	1bad      	subs	r5, r5, r6
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7fe fdb3 	bl	8005a2e <__any_on>
 8006ec8:	4681      	mov	r9, r0
 8006eca:	b178      	cbz	r0, 8006eec <__gethex+0x1ac>
 8006ecc:	f04f 0901 	mov.w	r9, #1
 8006ed0:	1e6b      	subs	r3, r5, #1
 8006ed2:	1159      	asrs	r1, r3, #5
 8006ed4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006ed8:	f003 021f 	and.w	r2, r3, #31
 8006edc:	fa09 f202 	lsl.w	r2, r9, r2
 8006ee0:	420a      	tst	r2, r1
 8006ee2:	d003      	beq.n	8006eec <__gethex+0x1ac>
 8006ee4:	454b      	cmp	r3, r9
 8006ee6:	dc36      	bgt.n	8006f56 <__gethex+0x216>
 8006ee8:	f04f 0902 	mov.w	r9, #2
 8006eec:	4629      	mov	r1, r5
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff febe 	bl	8006c70 <rshift>
 8006ef4:	442f      	add	r7, r5
 8006ef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006efa:	42bb      	cmp	r3, r7
 8006efc:	da42      	bge.n	8006f84 <__gethex+0x244>
 8006efe:	4621      	mov	r1, r4
 8006f00:	9801      	ldr	r0, [sp, #4]
 8006f02:	f7fe f94f 	bl	80051a4 <_Bfree>
 8006f06:	2300      	movs	r3, #0
 8006f08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f0a:	25a3      	movs	r5, #163	@ 0xa3
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e793      	b.n	8006e38 <__gethex+0xf8>
 8006f10:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006f14:	2a2e      	cmp	r2, #46	@ 0x2e
 8006f16:	d012      	beq.n	8006f3e <__gethex+0x1fe>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d104      	bne.n	8006f26 <__gethex+0x1e6>
 8006f1c:	f845 bb04 	str.w	fp, [r5], #4
 8006f20:	f04f 0b00 	mov.w	fp, #0
 8006f24:	465b      	mov	r3, fp
 8006f26:	7830      	ldrb	r0, [r6, #0]
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	f7ff fef4 	bl	8006d16 <__hexdig_fun>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f000 000f 	and.w	r0, r0, #15
 8006f34:	4098      	lsls	r0, r3
 8006f36:	ea4b 0b00 	orr.w	fp, fp, r0
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	e7ae      	b.n	8006e9c <__gethex+0x15c>
 8006f3e:	45b1      	cmp	r9, r6
 8006f40:	d8ea      	bhi.n	8006f18 <__gethex+0x1d8>
 8006f42:	2201      	movs	r2, #1
 8006f44:	4630      	mov	r0, r6
 8006f46:	492a      	ldr	r1, [pc, #168]	@ (8006ff0 <__gethex+0x2b0>)
 8006f48:	9303      	str	r3, [sp, #12]
 8006f4a:	f7ff fe29 	bl	8006ba0 <strncmp>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d1e1      	bne.n	8006f18 <__gethex+0x1d8>
 8006f54:	e7a2      	b.n	8006e9c <__gethex+0x15c>
 8006f56:	4620      	mov	r0, r4
 8006f58:	1ea9      	subs	r1, r5, #2
 8006f5a:	f7fe fd68 	bl	8005a2e <__any_on>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d0c2      	beq.n	8006ee8 <__gethex+0x1a8>
 8006f62:	f04f 0903 	mov.w	r9, #3
 8006f66:	e7c1      	b.n	8006eec <__gethex+0x1ac>
 8006f68:	da09      	bge.n	8006f7e <__gethex+0x23e>
 8006f6a:	1b75      	subs	r5, r6, r5
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	462a      	mov	r2, r5
 8006f70:	9801      	ldr	r0, [sp, #4]
 8006f72:	f7fe fb2d 	bl	80055d0 <__lshift>
 8006f76:	4604      	mov	r4, r0
 8006f78:	1b7f      	subs	r7, r7, r5
 8006f7a:	f100 0a14 	add.w	sl, r0, #20
 8006f7e:	f04f 0900 	mov.w	r9, #0
 8006f82:	e7b8      	b.n	8006ef6 <__gethex+0x1b6>
 8006f84:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f88:	42bd      	cmp	r5, r7
 8006f8a:	dd6f      	ble.n	800706c <__gethex+0x32c>
 8006f8c:	1bed      	subs	r5, r5, r7
 8006f8e:	42ae      	cmp	r6, r5
 8006f90:	dc34      	bgt.n	8006ffc <__gethex+0x2bc>
 8006f92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d022      	beq.n	8006fe0 <__gethex+0x2a0>
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d024      	beq.n	8006fe8 <__gethex+0x2a8>
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d115      	bne.n	8006fce <__gethex+0x28e>
 8006fa2:	42ae      	cmp	r6, r5
 8006fa4:	d113      	bne.n	8006fce <__gethex+0x28e>
 8006fa6:	2e01      	cmp	r6, #1
 8006fa8:	d10b      	bne.n	8006fc2 <__gethex+0x282>
 8006faa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fae:	9a02      	ldr	r2, [sp, #8]
 8006fb0:	2562      	movs	r5, #98	@ 0x62
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	f8ca 3000 	str.w	r3, [sl]
 8006fbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fbe:	601c      	str	r4, [r3, #0]
 8006fc0:	e73a      	b.n	8006e38 <__gethex+0xf8>
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	1e71      	subs	r1, r6, #1
 8006fc6:	f7fe fd32 	bl	8005a2e <__any_on>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d1ed      	bne.n	8006faa <__gethex+0x26a>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	9801      	ldr	r0, [sp, #4]
 8006fd2:	f7fe f8e7 	bl	80051a4 <_Bfree>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fda:	2550      	movs	r5, #80	@ 0x50
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e72b      	b.n	8006e38 <__gethex+0xf8>
 8006fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f3      	bne.n	8006fce <__gethex+0x28e>
 8006fe6:	e7e0      	b.n	8006faa <__gethex+0x26a>
 8006fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1dd      	bne.n	8006faa <__gethex+0x26a>
 8006fee:	e7ee      	b.n	8006fce <__gethex+0x28e>
 8006ff0:	08007b60 	.word	0x08007b60
 8006ff4:	080079f5 	.word	0x080079f5
 8006ff8:	08007d0e 	.word	0x08007d0e
 8006ffc:	1e6f      	subs	r7, r5, #1
 8006ffe:	f1b9 0f00 	cmp.w	r9, #0
 8007002:	d130      	bne.n	8007066 <__gethex+0x326>
 8007004:	b127      	cbz	r7, 8007010 <__gethex+0x2d0>
 8007006:	4639      	mov	r1, r7
 8007008:	4620      	mov	r0, r4
 800700a:	f7fe fd10 	bl	8005a2e <__any_on>
 800700e:	4681      	mov	r9, r0
 8007010:	2301      	movs	r3, #1
 8007012:	4629      	mov	r1, r5
 8007014:	1b76      	subs	r6, r6, r5
 8007016:	2502      	movs	r5, #2
 8007018:	117a      	asrs	r2, r7, #5
 800701a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800701e:	f007 071f 	and.w	r7, r7, #31
 8007022:	40bb      	lsls	r3, r7
 8007024:	4213      	tst	r3, r2
 8007026:	4620      	mov	r0, r4
 8007028:	bf18      	it	ne
 800702a:	f049 0902 	orrne.w	r9, r9, #2
 800702e:	f7ff fe1f 	bl	8006c70 <rshift>
 8007032:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007036:	f1b9 0f00 	cmp.w	r9, #0
 800703a:	d047      	beq.n	80070cc <__gethex+0x38c>
 800703c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d015      	beq.n	8007070 <__gethex+0x330>
 8007044:	2b03      	cmp	r3, #3
 8007046:	d017      	beq.n	8007078 <__gethex+0x338>
 8007048:	2b01      	cmp	r3, #1
 800704a:	d109      	bne.n	8007060 <__gethex+0x320>
 800704c:	f019 0f02 	tst.w	r9, #2
 8007050:	d006      	beq.n	8007060 <__gethex+0x320>
 8007052:	f8da 3000 	ldr.w	r3, [sl]
 8007056:	ea49 0903 	orr.w	r9, r9, r3
 800705a:	f019 0f01 	tst.w	r9, #1
 800705e:	d10e      	bne.n	800707e <__gethex+0x33e>
 8007060:	f045 0510 	orr.w	r5, r5, #16
 8007064:	e032      	b.n	80070cc <__gethex+0x38c>
 8007066:	f04f 0901 	mov.w	r9, #1
 800706a:	e7d1      	b.n	8007010 <__gethex+0x2d0>
 800706c:	2501      	movs	r5, #1
 800706e:	e7e2      	b.n	8007036 <__gethex+0x2f6>
 8007070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007072:	f1c3 0301 	rsb	r3, r3, #1
 8007076:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <__gethex+0x320>
 800707e:	f04f 0c00 	mov.w	ip, #0
 8007082:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007086:	f104 0314 	add.w	r3, r4, #20
 800708a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800708e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007092:	4618      	mov	r0, r3
 8007094:	f853 2b04 	ldr.w	r2, [r3], #4
 8007098:	f1b2 3fff 	cmp.w	r2, #4294967295
 800709c:	d01b      	beq.n	80070d6 <__gethex+0x396>
 800709e:	3201      	adds	r2, #1
 80070a0:	6002      	str	r2, [r0, #0]
 80070a2:	2d02      	cmp	r5, #2
 80070a4:	f104 0314 	add.w	r3, r4, #20
 80070a8:	d13c      	bne.n	8007124 <__gethex+0x3e4>
 80070aa:	f8d8 2000 	ldr.w	r2, [r8]
 80070ae:	3a01      	subs	r2, #1
 80070b0:	42b2      	cmp	r2, r6
 80070b2:	d109      	bne.n	80070c8 <__gethex+0x388>
 80070b4:	2201      	movs	r2, #1
 80070b6:	1171      	asrs	r1, r6, #5
 80070b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070bc:	f006 061f 	and.w	r6, r6, #31
 80070c0:	fa02 f606 	lsl.w	r6, r2, r6
 80070c4:	421e      	tst	r6, r3
 80070c6:	d13a      	bne.n	800713e <__gethex+0x3fe>
 80070c8:	f045 0520 	orr.w	r5, r5, #32
 80070cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ce:	601c      	str	r4, [r3, #0]
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	601f      	str	r7, [r3, #0]
 80070d4:	e6b0      	b.n	8006e38 <__gethex+0xf8>
 80070d6:	4299      	cmp	r1, r3
 80070d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80070dc:	d8d9      	bhi.n	8007092 <__gethex+0x352>
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	459b      	cmp	fp, r3
 80070e2:	db17      	blt.n	8007114 <__gethex+0x3d4>
 80070e4:	6861      	ldr	r1, [r4, #4]
 80070e6:	9801      	ldr	r0, [sp, #4]
 80070e8:	3101      	adds	r1, #1
 80070ea:	f7fe f81b 	bl	8005124 <_Balloc>
 80070ee:	4681      	mov	r9, r0
 80070f0:	b918      	cbnz	r0, 80070fa <__gethex+0x3ba>
 80070f2:	4602      	mov	r2, r0
 80070f4:	2184      	movs	r1, #132	@ 0x84
 80070f6:	4b19      	ldr	r3, [pc, #100]	@ (800715c <__gethex+0x41c>)
 80070f8:	e6c5      	b.n	8006e86 <__gethex+0x146>
 80070fa:	6922      	ldr	r2, [r4, #16]
 80070fc:	f104 010c 	add.w	r1, r4, #12
 8007100:	3202      	adds	r2, #2
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	300c      	adds	r0, #12
 8007106:	f7ff fd6d 	bl	8006be4 <memcpy>
 800710a:	4621      	mov	r1, r4
 800710c:	9801      	ldr	r0, [sp, #4]
 800710e:	f7fe f849 	bl	80051a4 <_Bfree>
 8007112:	464c      	mov	r4, r9
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	2201      	movs	r2, #1
 800711c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007120:	615a      	str	r2, [r3, #20]
 8007122:	e7be      	b.n	80070a2 <__gethex+0x362>
 8007124:	6922      	ldr	r2, [r4, #16]
 8007126:	455a      	cmp	r2, fp
 8007128:	dd0b      	ble.n	8007142 <__gethex+0x402>
 800712a:	2101      	movs	r1, #1
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff fd9f 	bl	8006c70 <rshift>
 8007132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007136:	3701      	adds	r7, #1
 8007138:	42bb      	cmp	r3, r7
 800713a:	f6ff aee0 	blt.w	8006efe <__gethex+0x1be>
 800713e:	2501      	movs	r5, #1
 8007140:	e7c2      	b.n	80070c8 <__gethex+0x388>
 8007142:	f016 061f 	ands.w	r6, r6, #31
 8007146:	d0fa      	beq.n	800713e <__gethex+0x3fe>
 8007148:	4453      	add	r3, sl
 800714a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800714e:	f7fe f8db 	bl	8005308 <__hi0bits>
 8007152:	f1c6 0620 	rsb	r6, r6, #32
 8007156:	42b0      	cmp	r0, r6
 8007158:	dbe7      	blt.n	800712a <__gethex+0x3ea>
 800715a:	e7f0      	b.n	800713e <__gethex+0x3fe>
 800715c:	080079f5 	.word	0x080079f5

08007160 <L_shift>:
 8007160:	f1c2 0208 	rsb	r2, r2, #8
 8007164:	0092      	lsls	r2, r2, #2
 8007166:	b570      	push	{r4, r5, r6, lr}
 8007168:	f1c2 0620 	rsb	r6, r2, #32
 800716c:	6843      	ldr	r3, [r0, #4]
 800716e:	6804      	ldr	r4, [r0, #0]
 8007170:	fa03 f506 	lsl.w	r5, r3, r6
 8007174:	432c      	orrs	r4, r5
 8007176:	40d3      	lsrs	r3, r2
 8007178:	6004      	str	r4, [r0, #0]
 800717a:	f840 3f04 	str.w	r3, [r0, #4]!
 800717e:	4288      	cmp	r0, r1
 8007180:	d3f4      	bcc.n	800716c <L_shift+0xc>
 8007182:	bd70      	pop	{r4, r5, r6, pc}

08007184 <__match>:
 8007184:	b530      	push	{r4, r5, lr}
 8007186:	6803      	ldr	r3, [r0, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	b914      	cbnz	r4, 8007196 <__match+0x12>
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	2001      	movs	r0, #1
 8007194:	bd30      	pop	{r4, r5, pc}
 8007196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800719e:	2d19      	cmp	r5, #25
 80071a0:	bf98      	it	ls
 80071a2:	3220      	addls	r2, #32
 80071a4:	42a2      	cmp	r2, r4
 80071a6:	d0f0      	beq.n	800718a <__match+0x6>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7f3      	b.n	8007194 <__match+0x10>

080071ac <__hexnan>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	2500      	movs	r5, #0
 80071b2:	680b      	ldr	r3, [r1, #0]
 80071b4:	4682      	mov	sl, r0
 80071b6:	115e      	asrs	r6, r3, #5
 80071b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071bc:	f013 031f 	ands.w	r3, r3, #31
 80071c0:	bf18      	it	ne
 80071c2:	3604      	addne	r6, #4
 80071c4:	1f37      	subs	r7, r6, #4
 80071c6:	4690      	mov	r8, r2
 80071c8:	46b9      	mov	r9, r7
 80071ca:	463c      	mov	r4, r7
 80071cc:	46ab      	mov	fp, r5
 80071ce:	b087      	sub	sp, #28
 80071d0:	6801      	ldr	r1, [r0, #0]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80071d8:	9502      	str	r5, [sp, #8]
 80071da:	784a      	ldrb	r2, [r1, #1]
 80071dc:	1c4b      	adds	r3, r1, #1
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	b342      	cbz	r2, 8007234 <__hexnan+0x88>
 80071e2:	4610      	mov	r0, r2
 80071e4:	9105      	str	r1, [sp, #20]
 80071e6:	9204      	str	r2, [sp, #16]
 80071e8:	f7ff fd95 	bl	8006d16 <__hexdig_fun>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d151      	bne.n	8007294 <__hexnan+0xe8>
 80071f0:	9a04      	ldr	r2, [sp, #16]
 80071f2:	9905      	ldr	r1, [sp, #20]
 80071f4:	2a20      	cmp	r2, #32
 80071f6:	d818      	bhi.n	800722a <__hexnan+0x7e>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	459b      	cmp	fp, r3
 80071fc:	dd13      	ble.n	8007226 <__hexnan+0x7a>
 80071fe:	454c      	cmp	r4, r9
 8007200:	d206      	bcs.n	8007210 <__hexnan+0x64>
 8007202:	2d07      	cmp	r5, #7
 8007204:	dc04      	bgt.n	8007210 <__hexnan+0x64>
 8007206:	462a      	mov	r2, r5
 8007208:	4649      	mov	r1, r9
 800720a:	4620      	mov	r0, r4
 800720c:	f7ff ffa8 	bl	8007160 <L_shift>
 8007210:	4544      	cmp	r4, r8
 8007212:	d952      	bls.n	80072ba <__hexnan+0x10e>
 8007214:	2300      	movs	r3, #0
 8007216:	f1a4 0904 	sub.w	r9, r4, #4
 800721a:	f844 3c04 	str.w	r3, [r4, #-4]
 800721e:	461d      	mov	r5, r3
 8007220:	464c      	mov	r4, r9
 8007222:	f8cd b008 	str.w	fp, [sp, #8]
 8007226:	9903      	ldr	r1, [sp, #12]
 8007228:	e7d7      	b.n	80071da <__hexnan+0x2e>
 800722a:	2a29      	cmp	r2, #41	@ 0x29
 800722c:	d157      	bne.n	80072de <__hexnan+0x132>
 800722e:	3102      	adds	r1, #2
 8007230:	f8ca 1000 	str.w	r1, [sl]
 8007234:	f1bb 0f00 	cmp.w	fp, #0
 8007238:	d051      	beq.n	80072de <__hexnan+0x132>
 800723a:	454c      	cmp	r4, r9
 800723c:	d206      	bcs.n	800724c <__hexnan+0xa0>
 800723e:	2d07      	cmp	r5, #7
 8007240:	dc04      	bgt.n	800724c <__hexnan+0xa0>
 8007242:	462a      	mov	r2, r5
 8007244:	4649      	mov	r1, r9
 8007246:	4620      	mov	r0, r4
 8007248:	f7ff ff8a 	bl	8007160 <L_shift>
 800724c:	4544      	cmp	r4, r8
 800724e:	d936      	bls.n	80072be <__hexnan+0x112>
 8007250:	4623      	mov	r3, r4
 8007252:	f1a8 0204 	sub.w	r2, r8, #4
 8007256:	f853 1b04 	ldr.w	r1, [r3], #4
 800725a:	429f      	cmp	r7, r3
 800725c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007260:	d2f9      	bcs.n	8007256 <__hexnan+0xaa>
 8007262:	1b3b      	subs	r3, r7, r4
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	3304      	adds	r3, #4
 800726a:	3401      	adds	r4, #1
 800726c:	3e03      	subs	r6, #3
 800726e:	42b4      	cmp	r4, r6
 8007270:	bf88      	it	hi
 8007272:	2304      	movhi	r3, #4
 8007274:	2200      	movs	r2, #0
 8007276:	4443      	add	r3, r8
 8007278:	f843 2b04 	str.w	r2, [r3], #4
 800727c:	429f      	cmp	r7, r3
 800727e:	d2fb      	bcs.n	8007278 <__hexnan+0xcc>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	b91b      	cbnz	r3, 800728c <__hexnan+0xe0>
 8007284:	4547      	cmp	r7, r8
 8007286:	d128      	bne.n	80072da <__hexnan+0x12e>
 8007288:	2301      	movs	r3, #1
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	2005      	movs	r0, #5
 800728e:	b007      	add	sp, #28
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	3501      	adds	r5, #1
 8007296:	2d08      	cmp	r5, #8
 8007298:	f10b 0b01 	add.w	fp, fp, #1
 800729c:	dd06      	ble.n	80072ac <__hexnan+0x100>
 800729e:	4544      	cmp	r4, r8
 80072a0:	d9c1      	bls.n	8007226 <__hexnan+0x7a>
 80072a2:	2300      	movs	r3, #0
 80072a4:	2501      	movs	r5, #1
 80072a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80072aa:	3c04      	subs	r4, #4
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	f000 000f 	and.w	r0, r0, #15
 80072b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80072b6:	6020      	str	r0, [r4, #0]
 80072b8:	e7b5      	b.n	8007226 <__hexnan+0x7a>
 80072ba:	2508      	movs	r5, #8
 80072bc:	e7b3      	b.n	8007226 <__hexnan+0x7a>
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0dd      	beq.n	8007280 <__hexnan+0xd4>
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	f1c3 0320 	rsb	r3, r3, #32
 80072cc:	40da      	lsrs	r2, r3
 80072ce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80072d2:	4013      	ands	r3, r2
 80072d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80072d8:	e7d2      	b.n	8007280 <__hexnan+0xd4>
 80072da:	3f04      	subs	r7, #4
 80072dc:	e7d0      	b.n	8007280 <__hexnan+0xd4>
 80072de:	2004      	movs	r0, #4
 80072e0:	e7d5      	b.n	800728e <__hexnan+0xe2>

080072e2 <__ascii_mbtowc>:
 80072e2:	b082      	sub	sp, #8
 80072e4:	b901      	cbnz	r1, 80072e8 <__ascii_mbtowc+0x6>
 80072e6:	a901      	add	r1, sp, #4
 80072e8:	b142      	cbz	r2, 80072fc <__ascii_mbtowc+0x1a>
 80072ea:	b14b      	cbz	r3, 8007300 <__ascii_mbtowc+0x1e>
 80072ec:	7813      	ldrb	r3, [r2, #0]
 80072ee:	600b      	str	r3, [r1, #0]
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	1e10      	subs	r0, r2, #0
 80072f4:	bf18      	it	ne
 80072f6:	2001      	movne	r0, #1
 80072f8:	b002      	add	sp, #8
 80072fa:	4770      	bx	lr
 80072fc:	4610      	mov	r0, r2
 80072fe:	e7fb      	b.n	80072f8 <__ascii_mbtowc+0x16>
 8007300:	f06f 0001 	mvn.w	r0, #1
 8007304:	e7f8      	b.n	80072f8 <__ascii_mbtowc+0x16>

08007306 <_realloc_r>:
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	4680      	mov	r8, r0
 800730c:	4615      	mov	r5, r2
 800730e:	460c      	mov	r4, r1
 8007310:	b921      	cbnz	r1, 800731c <_realloc_r+0x16>
 8007312:	4611      	mov	r1, r2
 8007314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	f7fd be78 	b.w	800500c <_malloc_r>
 800731c:	b92a      	cbnz	r2, 800732a <_realloc_r+0x24>
 800731e:	f7fd fe03 	bl	8004f28 <_free_r>
 8007322:	2400      	movs	r4, #0
 8007324:	4620      	mov	r0, r4
 8007326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732a:	f000 f840 	bl	80073ae <_malloc_usable_size_r>
 800732e:	4285      	cmp	r5, r0
 8007330:	4606      	mov	r6, r0
 8007332:	d802      	bhi.n	800733a <_realloc_r+0x34>
 8007334:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007338:	d8f4      	bhi.n	8007324 <_realloc_r+0x1e>
 800733a:	4629      	mov	r1, r5
 800733c:	4640      	mov	r0, r8
 800733e:	f7fd fe65 	bl	800500c <_malloc_r>
 8007342:	4607      	mov	r7, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d0ec      	beq.n	8007322 <_realloc_r+0x1c>
 8007348:	42b5      	cmp	r5, r6
 800734a:	462a      	mov	r2, r5
 800734c:	4621      	mov	r1, r4
 800734e:	bf28      	it	cs
 8007350:	4632      	movcs	r2, r6
 8007352:	f7ff fc47 	bl	8006be4 <memcpy>
 8007356:	4621      	mov	r1, r4
 8007358:	4640      	mov	r0, r8
 800735a:	f7fd fde5 	bl	8004f28 <_free_r>
 800735e:	463c      	mov	r4, r7
 8007360:	e7e0      	b.n	8007324 <_realloc_r+0x1e>

08007362 <__ascii_wctomb>:
 8007362:	4603      	mov	r3, r0
 8007364:	4608      	mov	r0, r1
 8007366:	b141      	cbz	r1, 800737a <__ascii_wctomb+0x18>
 8007368:	2aff      	cmp	r2, #255	@ 0xff
 800736a:	d904      	bls.n	8007376 <__ascii_wctomb+0x14>
 800736c:	228a      	movs	r2, #138	@ 0x8a
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	4770      	bx	lr
 8007376:	2001      	movs	r0, #1
 8007378:	700a      	strb	r2, [r1, #0]
 800737a:	4770      	bx	lr

0800737c <fiprintf>:
 800737c:	b40e      	push	{r1, r2, r3}
 800737e:	b503      	push	{r0, r1, lr}
 8007380:	4601      	mov	r1, r0
 8007382:	ab03      	add	r3, sp, #12
 8007384:	4805      	ldr	r0, [pc, #20]	@ (800739c <fiprintf+0x20>)
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f000 f83d 	bl	800740c <_vfiprintf_r>
 8007392:	b002      	add	sp, #8
 8007394:	f85d eb04 	ldr.w	lr, [sp], #4
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	20000018 	.word	0x20000018

080073a0 <abort>:
 80073a0:	2006      	movs	r0, #6
 80073a2:	b508      	push	{r3, lr}
 80073a4:	f000 fa06 	bl	80077b4 <raise>
 80073a8:	2001      	movs	r0, #1
 80073aa:	f7f9 ff7a 	bl	80012a2 <_exit>

080073ae <_malloc_usable_size_r>:
 80073ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b2:	1f18      	subs	r0, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfbc      	itt	lt
 80073b8:	580b      	ldrlt	r3, [r1, r0]
 80073ba:	18c0      	addlt	r0, r0, r3
 80073bc:	4770      	bx	lr

080073be <__sfputc_r>:
 80073be:	6893      	ldr	r3, [r2, #8]
 80073c0:	b410      	push	{r4}
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	6093      	str	r3, [r2, #8]
 80073c8:	da07      	bge.n	80073da <__sfputc_r+0x1c>
 80073ca:	6994      	ldr	r4, [r2, #24]
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	db01      	blt.n	80073d4 <__sfputc_r+0x16>
 80073d0:	290a      	cmp	r1, #10
 80073d2:	d102      	bne.n	80073da <__sfputc_r+0x1c>
 80073d4:	bc10      	pop	{r4}
 80073d6:	f000 b931 	b.w	800763c <__swbuf_r>
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	1c58      	adds	r0, r3, #1
 80073de:	6010      	str	r0, [r2, #0]
 80073e0:	7019      	strb	r1, [r3, #0]
 80073e2:	4608      	mov	r0, r1
 80073e4:	bc10      	pop	{r4}
 80073e6:	4770      	bx	lr

080073e8 <__sfputs_r>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	4606      	mov	r6, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	4614      	mov	r4, r2
 80073f0:	18d5      	adds	r5, r2, r3
 80073f2:	42ac      	cmp	r4, r5
 80073f4:	d101      	bne.n	80073fa <__sfputs_r+0x12>
 80073f6:	2000      	movs	r0, #0
 80073f8:	e007      	b.n	800740a <__sfputs_r+0x22>
 80073fa:	463a      	mov	r2, r7
 80073fc:	4630      	mov	r0, r6
 80073fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007402:	f7ff ffdc 	bl	80073be <__sfputc_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d1f3      	bne.n	80073f2 <__sfputs_r+0xa>
 800740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800740c <_vfiprintf_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	460d      	mov	r5, r1
 8007412:	4614      	mov	r4, r2
 8007414:	4698      	mov	r8, r3
 8007416:	4606      	mov	r6, r0
 8007418:	b09d      	sub	sp, #116	@ 0x74
 800741a:	b118      	cbz	r0, 8007424 <_vfiprintf_r+0x18>
 800741c:	6a03      	ldr	r3, [r0, #32]
 800741e:	b90b      	cbnz	r3, 8007424 <_vfiprintf_r+0x18>
 8007420:	f7fc fe06 	bl	8004030 <__sinit>
 8007424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007426:	07d9      	lsls	r1, r3, #31
 8007428:	d405      	bmi.n	8007436 <_vfiprintf_r+0x2a>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	059a      	lsls	r2, r3, #22
 800742e:	d402      	bmi.n	8007436 <_vfiprintf_r+0x2a>
 8007430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007432:	f7fc ff14 	bl	800425e <__retarget_lock_acquire_recursive>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	d501      	bpl.n	8007440 <_vfiprintf_r+0x34>
 800743c:	692b      	ldr	r3, [r5, #16]
 800743e:	b99b      	cbnz	r3, 8007468 <_vfiprintf_r+0x5c>
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f000 f938 	bl	80076b8 <__swsetup_r>
 8007448:	b170      	cbz	r0, 8007468 <_vfiprintf_r+0x5c>
 800744a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744c:	07dc      	lsls	r4, r3, #31
 800744e:	d504      	bpl.n	800745a <_vfiprintf_r+0x4e>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	b01d      	add	sp, #116	@ 0x74
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	0598      	lsls	r0, r3, #22
 800745e:	d4f7      	bmi.n	8007450 <_vfiprintf_r+0x44>
 8007460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007462:	f7fc fefd 	bl	8004260 <__retarget_lock_release_recursive>
 8007466:	e7f3      	b.n	8007450 <_vfiprintf_r+0x44>
 8007468:	2300      	movs	r3, #0
 800746a:	9309      	str	r3, [sp, #36]	@ 0x24
 800746c:	2320      	movs	r3, #32
 800746e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007472:	2330      	movs	r3, #48	@ 0x30
 8007474:	f04f 0901 	mov.w	r9, #1
 8007478:	f8cd 800c 	str.w	r8, [sp, #12]
 800747c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007628 <_vfiprintf_r+0x21c>
 8007480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007484:	4623      	mov	r3, r4
 8007486:	469a      	mov	sl, r3
 8007488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748c:	b10a      	cbz	r2, 8007492 <_vfiprintf_r+0x86>
 800748e:	2a25      	cmp	r2, #37	@ 0x25
 8007490:	d1f9      	bne.n	8007486 <_vfiprintf_r+0x7a>
 8007492:	ebba 0b04 	subs.w	fp, sl, r4
 8007496:	d00b      	beq.n	80074b0 <_vfiprintf_r+0xa4>
 8007498:	465b      	mov	r3, fp
 800749a:	4622      	mov	r2, r4
 800749c:	4629      	mov	r1, r5
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ffa2 	bl	80073e8 <__sfputs_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	f000 80a7 	beq.w	80075f8 <_vfiprintf_r+0x1ec>
 80074aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ac:	445a      	add	r2, fp
 80074ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80074b0:	f89a 3000 	ldrb.w	r3, [sl]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 809f 	beq.w	80075f8 <_vfiprintf_r+0x1ec>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295
 80074c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c4:	f10a 0a01 	add.w	sl, sl, #1
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	9307      	str	r3, [sp, #28]
 80074cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80074d2:	4654      	mov	r4, sl
 80074d4:	2205      	movs	r2, #5
 80074d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074da:	4853      	ldr	r0, [pc, #332]	@ (8007628 <_vfiprintf_r+0x21c>)
 80074dc:	f7fc fec1 	bl	8004262 <memchr>
 80074e0:	9a04      	ldr	r2, [sp, #16]
 80074e2:	b9d8      	cbnz	r0, 800751c <_vfiprintf_r+0x110>
 80074e4:	06d1      	lsls	r1, r2, #27
 80074e6:	bf44      	itt	mi
 80074e8:	2320      	movmi	r3, #32
 80074ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ee:	0713      	lsls	r3, r2, #28
 80074f0:	bf44      	itt	mi
 80074f2:	232b      	movmi	r3, #43	@ 0x2b
 80074f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074f8:	f89a 3000 	ldrb.w	r3, [sl]
 80074fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074fe:	d015      	beq.n	800752c <_vfiprintf_r+0x120>
 8007500:	4654      	mov	r4, sl
 8007502:	2000      	movs	r0, #0
 8007504:	f04f 0c0a 	mov.w	ip, #10
 8007508:	9a07      	ldr	r2, [sp, #28]
 800750a:	4621      	mov	r1, r4
 800750c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007510:	3b30      	subs	r3, #48	@ 0x30
 8007512:	2b09      	cmp	r3, #9
 8007514:	d94b      	bls.n	80075ae <_vfiprintf_r+0x1a2>
 8007516:	b1b0      	cbz	r0, 8007546 <_vfiprintf_r+0x13a>
 8007518:	9207      	str	r2, [sp, #28]
 800751a:	e014      	b.n	8007546 <_vfiprintf_r+0x13a>
 800751c:	eba0 0308 	sub.w	r3, r0, r8
 8007520:	fa09 f303 	lsl.w	r3, r9, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	46a2      	mov	sl, r4
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	e7d2      	b.n	80074d2 <_vfiprintf_r+0xc6>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	1d19      	adds	r1, r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	9103      	str	r1, [sp, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	bfbb      	ittet	lt
 8007538:	425b      	neglt	r3, r3
 800753a:	f042 0202 	orrlt.w	r2, r2, #2
 800753e:	9307      	strge	r3, [sp, #28]
 8007540:	9307      	strlt	r3, [sp, #28]
 8007542:	bfb8      	it	lt
 8007544:	9204      	strlt	r2, [sp, #16]
 8007546:	7823      	ldrb	r3, [r4, #0]
 8007548:	2b2e      	cmp	r3, #46	@ 0x2e
 800754a:	d10a      	bne.n	8007562 <_vfiprintf_r+0x156>
 800754c:	7863      	ldrb	r3, [r4, #1]
 800754e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007550:	d132      	bne.n	80075b8 <_vfiprintf_r+0x1ac>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	3402      	adds	r4, #2
 8007556:	1d1a      	adds	r2, r3, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	9203      	str	r2, [sp, #12]
 800755c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800762c <_vfiprintf_r+0x220>
 8007566:	2203      	movs	r2, #3
 8007568:	4650      	mov	r0, sl
 800756a:	7821      	ldrb	r1, [r4, #0]
 800756c:	f7fc fe79 	bl	8004262 <memchr>
 8007570:	b138      	cbz	r0, 8007582 <_vfiprintf_r+0x176>
 8007572:	2240      	movs	r2, #64	@ 0x40
 8007574:	9b04      	ldr	r3, [sp, #16]
 8007576:	eba0 000a 	sub.w	r0, r0, sl
 800757a:	4082      	lsls	r2, r0
 800757c:	4313      	orrs	r3, r2
 800757e:	3401      	adds	r4, #1
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007586:	2206      	movs	r2, #6
 8007588:	4829      	ldr	r0, [pc, #164]	@ (8007630 <_vfiprintf_r+0x224>)
 800758a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800758e:	f7fc fe68 	bl	8004262 <memchr>
 8007592:	2800      	cmp	r0, #0
 8007594:	d03f      	beq.n	8007616 <_vfiprintf_r+0x20a>
 8007596:	4b27      	ldr	r3, [pc, #156]	@ (8007634 <_vfiprintf_r+0x228>)
 8007598:	bb1b      	cbnz	r3, 80075e2 <_vfiprintf_r+0x1d6>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	3307      	adds	r3, #7
 800759e:	f023 0307 	bic.w	r3, r3, #7
 80075a2:	3308      	adds	r3, #8
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a8:	443b      	add	r3, r7
 80075aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ac:	e76a      	b.n	8007484 <_vfiprintf_r+0x78>
 80075ae:	460c      	mov	r4, r1
 80075b0:	2001      	movs	r0, #1
 80075b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075b6:	e7a8      	b.n	800750a <_vfiprintf_r+0xfe>
 80075b8:	2300      	movs	r3, #0
 80075ba:	f04f 0c0a 	mov.w	ip, #10
 80075be:	4619      	mov	r1, r3
 80075c0:	3401      	adds	r4, #1
 80075c2:	9305      	str	r3, [sp, #20]
 80075c4:	4620      	mov	r0, r4
 80075c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ca:	3a30      	subs	r2, #48	@ 0x30
 80075cc:	2a09      	cmp	r2, #9
 80075ce:	d903      	bls.n	80075d8 <_vfiprintf_r+0x1cc>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0c6      	beq.n	8007562 <_vfiprintf_r+0x156>
 80075d4:	9105      	str	r1, [sp, #20]
 80075d6:	e7c4      	b.n	8007562 <_vfiprintf_r+0x156>
 80075d8:	4604      	mov	r4, r0
 80075da:	2301      	movs	r3, #1
 80075dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e0:	e7f0      	b.n	80075c4 <_vfiprintf_r+0x1b8>
 80075e2:	ab03      	add	r3, sp, #12
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	462a      	mov	r2, r5
 80075e8:	4630      	mov	r0, r6
 80075ea:	4b13      	ldr	r3, [pc, #76]	@ (8007638 <_vfiprintf_r+0x22c>)
 80075ec:	a904      	add	r1, sp, #16
 80075ee:	f7fb fec5 	bl	800337c <_printf_float>
 80075f2:	4607      	mov	r7, r0
 80075f4:	1c78      	adds	r0, r7, #1
 80075f6:	d1d6      	bne.n	80075a6 <_vfiprintf_r+0x19a>
 80075f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075fa:	07d9      	lsls	r1, r3, #31
 80075fc:	d405      	bmi.n	800760a <_vfiprintf_r+0x1fe>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	059a      	lsls	r2, r3, #22
 8007602:	d402      	bmi.n	800760a <_vfiprintf_r+0x1fe>
 8007604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007606:	f7fc fe2b 	bl	8004260 <__retarget_lock_release_recursive>
 800760a:	89ab      	ldrh	r3, [r5, #12]
 800760c:	065b      	lsls	r3, r3, #25
 800760e:	f53f af1f 	bmi.w	8007450 <_vfiprintf_r+0x44>
 8007612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007614:	e71e      	b.n	8007454 <_vfiprintf_r+0x48>
 8007616:	ab03      	add	r3, sp, #12
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	462a      	mov	r2, r5
 800761c:	4630      	mov	r0, r6
 800761e:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <_vfiprintf_r+0x22c>)
 8007620:	a904      	add	r1, sp, #16
 8007622:	f7fc f949 	bl	80038b8 <_printf_i>
 8007626:	e7e4      	b.n	80075f2 <_vfiprintf_r+0x1e6>
 8007628:	08007cb9 	.word	0x08007cb9
 800762c:	08007cbf 	.word	0x08007cbf
 8007630:	08007cc3 	.word	0x08007cc3
 8007634:	0800337d 	.word	0x0800337d
 8007638:	080073e9 	.word	0x080073e9

0800763c <__swbuf_r>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	460e      	mov	r6, r1
 8007640:	4614      	mov	r4, r2
 8007642:	4605      	mov	r5, r0
 8007644:	b118      	cbz	r0, 800764e <__swbuf_r+0x12>
 8007646:	6a03      	ldr	r3, [r0, #32]
 8007648:	b90b      	cbnz	r3, 800764e <__swbuf_r+0x12>
 800764a:	f7fc fcf1 	bl	8004030 <__sinit>
 800764e:	69a3      	ldr	r3, [r4, #24]
 8007650:	60a3      	str	r3, [r4, #8]
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	071a      	lsls	r2, r3, #28
 8007656:	d501      	bpl.n	800765c <__swbuf_r+0x20>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	b943      	cbnz	r3, 800766e <__swbuf_r+0x32>
 800765c:	4621      	mov	r1, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f82a 	bl	80076b8 <__swsetup_r>
 8007664:	b118      	cbz	r0, 800766e <__swbuf_r+0x32>
 8007666:	f04f 37ff 	mov.w	r7, #4294967295
 800766a:	4638      	mov	r0, r7
 800766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	6922      	ldr	r2, [r4, #16]
 8007672:	b2f6      	uxtb	r6, r6
 8007674:	1a98      	subs	r0, r3, r2
 8007676:	6963      	ldr	r3, [r4, #20]
 8007678:	4637      	mov	r7, r6
 800767a:	4283      	cmp	r3, r0
 800767c:	dc05      	bgt.n	800768a <__swbuf_r+0x4e>
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff fa4b 	bl	8006b1c <_fflush_r>
 8007686:	2800      	cmp	r0, #0
 8007688:	d1ed      	bne.n	8007666 <__swbuf_r+0x2a>
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	3b01      	subs	r3, #1
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	701e      	strb	r6, [r3, #0]
 8007698:	6962      	ldr	r2, [r4, #20]
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	429a      	cmp	r2, r3
 800769e:	d004      	beq.n	80076aa <__swbuf_r+0x6e>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	07db      	lsls	r3, r3, #31
 80076a4:	d5e1      	bpl.n	800766a <__swbuf_r+0x2e>
 80076a6:	2e0a      	cmp	r6, #10
 80076a8:	d1df      	bne.n	800766a <__swbuf_r+0x2e>
 80076aa:	4621      	mov	r1, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	f7ff fa35 	bl	8006b1c <_fflush_r>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d0d9      	beq.n	800766a <__swbuf_r+0x2e>
 80076b6:	e7d6      	b.n	8007666 <__swbuf_r+0x2a>

080076b8 <__swsetup_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4b29      	ldr	r3, [pc, #164]	@ (8007760 <__swsetup_r+0xa8>)
 80076bc:	4605      	mov	r5, r0
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	460c      	mov	r4, r1
 80076c2:	b118      	cbz	r0, 80076cc <__swsetup_r+0x14>
 80076c4:	6a03      	ldr	r3, [r0, #32]
 80076c6:	b90b      	cbnz	r3, 80076cc <__swsetup_r+0x14>
 80076c8:	f7fc fcb2 	bl	8004030 <__sinit>
 80076cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d0:	0719      	lsls	r1, r3, #28
 80076d2:	d422      	bmi.n	800771a <__swsetup_r+0x62>
 80076d4:	06da      	lsls	r2, r3, #27
 80076d6:	d407      	bmi.n	80076e8 <__swsetup_r+0x30>
 80076d8:	2209      	movs	r2, #9
 80076da:	602a      	str	r2, [r5, #0]
 80076dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e033      	b.n	8007750 <__swsetup_r+0x98>
 80076e8:	0758      	lsls	r0, r3, #29
 80076ea:	d512      	bpl.n	8007712 <__swsetup_r+0x5a>
 80076ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076ee:	b141      	cbz	r1, 8007702 <__swsetup_r+0x4a>
 80076f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076f4:	4299      	cmp	r1, r3
 80076f6:	d002      	beq.n	80076fe <__swsetup_r+0x46>
 80076f8:	4628      	mov	r0, r5
 80076fa:	f7fd fc15 	bl	8004f28 <_free_r>
 80076fe:	2300      	movs	r3, #0
 8007700:	6363      	str	r3, [r4, #52]	@ 0x34
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	2300      	movs	r3, #0
 800770c:	6063      	str	r3, [r4, #4]
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	f043 0308 	orr.w	r3, r3, #8
 8007718:	81a3      	strh	r3, [r4, #12]
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	b94b      	cbnz	r3, 8007732 <__swsetup_r+0x7a>
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007728:	d003      	beq.n	8007732 <__swsetup_r+0x7a>
 800772a:	4621      	mov	r1, r4
 800772c:	4628      	mov	r0, r5
 800772e:	f000 f882 	bl	8007836 <__smakebuf_r>
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	f013 0201 	ands.w	r2, r3, #1
 800773a:	d00a      	beq.n	8007752 <__swsetup_r+0x9a>
 800773c:	2200      	movs	r2, #0
 800773e:	60a2      	str	r2, [r4, #8]
 8007740:	6962      	ldr	r2, [r4, #20]
 8007742:	4252      	negs	r2, r2
 8007744:	61a2      	str	r2, [r4, #24]
 8007746:	6922      	ldr	r2, [r4, #16]
 8007748:	b942      	cbnz	r2, 800775c <__swsetup_r+0xa4>
 800774a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800774e:	d1c5      	bne.n	80076dc <__swsetup_r+0x24>
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	0799      	lsls	r1, r3, #30
 8007754:	bf58      	it	pl
 8007756:	6962      	ldrpl	r2, [r4, #20]
 8007758:	60a2      	str	r2, [r4, #8]
 800775a:	e7f4      	b.n	8007746 <__swsetup_r+0x8e>
 800775c:	2000      	movs	r0, #0
 800775e:	e7f7      	b.n	8007750 <__swsetup_r+0x98>
 8007760:	20000018 	.word	0x20000018

08007764 <_raise_r>:
 8007764:	291f      	cmp	r1, #31
 8007766:	b538      	push	{r3, r4, r5, lr}
 8007768:	4605      	mov	r5, r0
 800776a:	460c      	mov	r4, r1
 800776c:	d904      	bls.n	8007778 <_raise_r+0x14>
 800776e:	2316      	movs	r3, #22
 8007770:	6003      	str	r3, [r0, #0]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800777a:	b112      	cbz	r2, 8007782 <_raise_r+0x1e>
 800777c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007780:	b94b      	cbnz	r3, 8007796 <_raise_r+0x32>
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f830 	bl	80077e8 <_getpid_r>
 8007788:	4622      	mov	r2, r4
 800778a:	4601      	mov	r1, r0
 800778c:	4628      	mov	r0, r5
 800778e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007792:	f000 b817 	b.w	80077c4 <_kill_r>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d00a      	beq.n	80077b0 <_raise_r+0x4c>
 800779a:	1c59      	adds	r1, r3, #1
 800779c:	d103      	bne.n	80077a6 <_raise_r+0x42>
 800779e:	2316      	movs	r3, #22
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	2001      	movs	r0, #1
 80077a4:	e7e7      	b.n	8007776 <_raise_r+0x12>
 80077a6:	2100      	movs	r1, #0
 80077a8:	4620      	mov	r0, r4
 80077aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077ae:	4798      	blx	r3
 80077b0:	2000      	movs	r0, #0
 80077b2:	e7e0      	b.n	8007776 <_raise_r+0x12>

080077b4 <raise>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	@ (80077c0 <raise+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f7ff bfd3 	b.w	8007764 <_raise_r>
 80077be:	bf00      	nop
 80077c0:	20000018 	.word	0x20000018

080077c4 <_kill_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	2300      	movs	r3, #0
 80077c8:	4d06      	ldr	r5, [pc, #24]	@ (80077e4 <_kill_r+0x20>)
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	f7f9 fd56 	bl	8001282 <_kill>
 80077d6:	1c43      	adds	r3, r0, #1
 80077d8:	d102      	bne.n	80077e0 <_kill_r+0x1c>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	b103      	cbz	r3, 80077e0 <_kill_r+0x1c>
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	200003c4 	.word	0x200003c4

080077e8 <_getpid_r>:
 80077e8:	f7f9 bd44 	b.w	8001274 <_getpid>

080077ec <__swhatbuf_r>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	460c      	mov	r4, r1
 80077f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f4:	4615      	mov	r5, r2
 80077f6:	2900      	cmp	r1, #0
 80077f8:	461e      	mov	r6, r3
 80077fa:	b096      	sub	sp, #88	@ 0x58
 80077fc:	da0c      	bge.n	8007818 <__swhatbuf_r+0x2c>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	2100      	movs	r1, #0
 8007802:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007806:	bf14      	ite	ne
 8007808:	2340      	movne	r3, #64	@ 0x40
 800780a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800780e:	2000      	movs	r0, #0
 8007810:	6031      	str	r1, [r6, #0]
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	b016      	add	sp, #88	@ 0x58
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	466a      	mov	r2, sp
 800781a:	f000 f849 	bl	80078b0 <_fstat_r>
 800781e:	2800      	cmp	r0, #0
 8007820:	dbed      	blt.n	80077fe <__swhatbuf_r+0x12>
 8007822:	9901      	ldr	r1, [sp, #4]
 8007824:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007828:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800782c:	4259      	negs	r1, r3
 800782e:	4159      	adcs	r1, r3
 8007830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007834:	e7eb      	b.n	800780e <__swhatbuf_r+0x22>

08007836 <__smakebuf_r>:
 8007836:	898b      	ldrh	r3, [r1, #12]
 8007838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800783a:	079d      	lsls	r5, r3, #30
 800783c:	4606      	mov	r6, r0
 800783e:	460c      	mov	r4, r1
 8007840:	d507      	bpl.n	8007852 <__smakebuf_r+0x1c>
 8007842:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	2301      	movs	r3, #1
 800784c:	6163      	str	r3, [r4, #20]
 800784e:	b003      	add	sp, #12
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007852:	466a      	mov	r2, sp
 8007854:	ab01      	add	r3, sp, #4
 8007856:	f7ff ffc9 	bl	80077ec <__swhatbuf_r>
 800785a:	9f00      	ldr	r7, [sp, #0]
 800785c:	4605      	mov	r5, r0
 800785e:	4639      	mov	r1, r7
 8007860:	4630      	mov	r0, r6
 8007862:	f7fd fbd3 	bl	800500c <_malloc_r>
 8007866:	b948      	cbnz	r0, 800787c <__smakebuf_r+0x46>
 8007868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786c:	059a      	lsls	r2, r3, #22
 800786e:	d4ee      	bmi.n	800784e <__smakebuf_r+0x18>
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	f043 0302 	orr.w	r3, r3, #2
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e7e2      	b.n	8007842 <__smakebuf_r+0xc>
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	9b01      	ldr	r3, [sp, #4]
 800788a:	6020      	str	r0, [r4, #0]
 800788c:	b15b      	cbz	r3, 80078a6 <__smakebuf_r+0x70>
 800788e:	4630      	mov	r0, r6
 8007890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007894:	f000 f81e 	bl	80078d4 <_isatty_r>
 8007898:	b128      	cbz	r0, 80078a6 <__smakebuf_r+0x70>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f023 0303 	bic.w	r3, r3, #3
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	431d      	orrs	r5, r3
 80078aa:	81a5      	strh	r5, [r4, #12]
 80078ac:	e7cf      	b.n	800784e <__smakebuf_r+0x18>
	...

080078b0 <_fstat_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	2300      	movs	r3, #0
 80078b4:	4d06      	ldr	r5, [pc, #24]	@ (80078d0 <_fstat_r+0x20>)
 80078b6:	4604      	mov	r4, r0
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	f7f9 fd3f 	bl	8001340 <_fstat>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	d102      	bne.n	80078cc <_fstat_r+0x1c>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	b103      	cbz	r3, 80078cc <_fstat_r+0x1c>
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	bf00      	nop
 80078d0:	200003c4 	.word	0x200003c4

080078d4 <_isatty_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	2300      	movs	r3, #0
 80078d8:	4d05      	ldr	r5, [pc, #20]	@ (80078f0 <_isatty_r+0x1c>)
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7f9 fd3d 	bl	800135e <_isatty>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_isatty_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_isatty_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	200003c4 	.word	0x200003c4

080078f4 <_init>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr

08007900 <_fini>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr
